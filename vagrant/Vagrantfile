# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # config.vm.box = "bento/ubuntu-16.04"
  config.vm.box = "bento/centos-7.4"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  config.vm.network "forwarded_port", guest: 22, host: 2226, auto_correct: true, id: "ssh"
  config.vm.network "forwarded_port", guest: 80, host: 80, auto_correct: true, id: "http"
  config.vm.network "forwarded_port", guest: 443, host: 443, auto_correct: true, id: "https"
  config.vm.network "forwarded_port", guest: 3306, host: 3306, auto_correct: true, id: "mysql"
  config.vm.network "forwarded_port", guest: 8080, host: 8080, auto_correct: true, id: "tomcat-fedora"
  config.vm.network "forwarded_port", guest: 8091, host: 8091, auto_correct: true, id: "tomcat-solr"
  config.vm.network "forwarded_port", guest: 8443, host: 8443, auto_correct: true, id: "ssltomcat"
  config.vm.network "forwarded_port", guest: 8777, host: 8777, auto_correct: true, id: "http-fedora"
  config.vm.network "forwarded_port", guest: 8983, host: 8983, auto_correct: true, id: "solr"
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "10.10.10.130"
  config.ssh.forward_agent = true
  config.ssh.insert_key = false
  config.vm.hostname = "isle-host-macos"
  config.hostsupdater.aliases = ["isle.localdomain", "apache", "fedora", "mysql", "solr"]

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  #config.vm.synced_folder "", "/vagrant-nfs", type: :nfs

  # Use vagrant-bindfs to re-mount folder as of Nov 19,2015
  #config.bindfs.bind_folder "/vagrant-nfs", "/var/www/html", owner: 'islandora', group: 'apache', perms: "0777,u=rwx:g=rwx:o=rwx", create_as_user: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
    vb.name = "isle-host-macos"
    vb.memory = "4096"
    vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  end
    # Use VBoxManage to customize the VM. For example to change memory:
    config.vm.define "isle-host-macos" do |isle_host_macos|
  end
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "2048"

  #end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
end
