{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ISLandora Enterprise (ISLE) ISLE is a community developed open-source project that bundles the Islandora stack into a set of Docker images that are easy to install and update. ISLE allows for persistent customizations and provides a fully functioning Islandora platform for production, staging, and development digital repositories. How to Install ISLE This documentation provides clear instructions on how to install and update ISLE: ISLE Installation : Follow these successive steps to create a complete workflow by installing ISLE on a Local personal computer, and then on Staging and Production environments. This workflow creates a production ready Islandora site and a workflow that supports updates, customization, and development. Additionally, you may choose to build this workflow for a New Islandora site or use this to Migrate your existing Islandora 7.x site. Update ISLE : Update your version of ISLE to the latest release and receive improvements and security updates. ( Demo ISLE Installation : Quickly learn how to use Docker to create a new Islandora platform on your personal computer. Use this to \"kick the tires\" on ISLE.) How to Contribute to ISLE We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Get Started"},{"location":"#islandora-enterprise-isle","text":"ISLE is a community developed open-source project that bundles the Islandora stack into a set of Docker images that are easy to install and update. ISLE allows for persistent customizations and provides a fully functioning Islandora platform for production, staging, and development digital repositories.","title":"ISLandora Enterprise (ISLE)"},{"location":"#how-to-install-isle","text":"This documentation provides clear instructions on how to install and update ISLE: ISLE Installation : Follow these successive steps to create a complete workflow by installing ISLE on a Local personal computer, and then on Staging and Production environments. This workflow creates a production ready Islandora site and a workflow that supports updates, customization, and development. Additionally, you may choose to build this workflow for a New Islandora site or use this to Migrate your existing Islandora 7.x site. Update ISLE : Update your version of ISLE to the latest release and receive improvements and security updates. ( Demo ISLE Installation : Quickly learn how to use Docker to create a new Islandora platform on your personal computer. Use this to \"kick the tires\" on ISLE.)","title":"How to Install ISLE"},{"location":"#how-to-contribute-to-isle","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"How to Contribute to ISLE"},{"location":"about/about-isle/","text":"ISLandora Enterprise (ISLE) is a project that addresses two of the most significant pain-points in Islandora: installation and maintenance. Islandora is an open-source software framework designed to help institutions and organizations and their audiences collaboratively manage, and discover digital assets using a best-practices framework. ISLE is an orchestrated group of Docker containers to be run on a server, personal computer or cloud instance with a minimal suite of tools enabling an efficient deploy and release of an updated production-ready Islandora environment. ISLE functions as both an initial installer and maintenance updater with the ability to build new production, staging, or development environments as distributable, lightweight and fast \"containers\" in a Docker Engine environment. This process allows folks to choose between hosting: locally on a personal computer for development work on site in an institutional data center in a cloud environment such as Amazon Web Services or Google Cloud Platform . ISLE's production-ready platform is updated at least every 2 months with: critical security patches full stack software updates a suite of commonly installed features and solution packs. ISLE is designed to be an evolving but trusted environment to help create a managed process for migrating to the next major release of Islandora (8/9). Project Overview ISLE public repository: https://github.com/Islandora-Collaboration-Group/ISLE How Does It Work? ISLE separates an institution's customizations from core code, and moves that core code into containers that are easily updated, simplifying and largely automating the process of installation and updates of Islandora. ISLE also bundles together the best shared modules into a common, production-ready and security-hardened platform. Why Is It Needed? Islandora is a powerful digital repository comprised of more than 80 different open-source software libraries. This complex ecosystem makes Islandora difficult and expensive to install, maintain and customize. ISLE lowers the barrier to entry for new schools while allowing existing institutions to reallocate funds towards development or ingestion instead of maintenance. High Level Objective To deliver a secure and production-ready Islandora stack (\"ISLE\") that reduces the involved support time and effort for installation, maintenance and customization. ISLE Functional Definition By ISLE, it is meant a system that will: Function as both an initial installer and maintenance updater for Islandora stacks with up-to-date components suitable for use as staging, development or production environments, as well as for use on personal computers for development work. Consist of a public, tagged set of Docker containers. Include use of an orchestration tool such as Docker Composer. Allow for the replacement of older containers with newer versions. Be updated to include new component security patch releases within one calendar month. Support institution-specific customizations (XSLTs/Islandora Transforms, Solr, schemas, config.xml, MODS configurations/forms, XACML policies) able to persist through container upgrades and replacements. These will be stored in a git repository and a mechanism will be provided to reintegrate with the installed Docker containers as part of an upgrade. Support for either institutional hosting or Amazon Web Services (AWS) for the Docker host server. Support data store flexibility on institutional hosting or an AWS cloud environment. Encompass critical security patches, and full stack software updates, plus dependencies for commonly installed features and all available solution packs. Include an integrated ISLE/Islandora test suite (expected to utilize TravisCI) to be utilized, developed in conjunction with the Islandora Foundation and the current Islandora release managers Include documentation that covers end usage, a how-to guide to set up an initial ISLE installation, a how-to guide for an established installation to upgrade containers to the latest versions, and a functional description of mechanics, administrative system management and the process for future ISLE development","title":"About ISLE"},{"location":"about/about-isle/#project-overview","text":"ISLE public repository: https://github.com/Islandora-Collaboration-Group/ISLE","title":"Project Overview"},{"location":"about/about-isle/#how-does-it-work","text":"ISLE separates an institution's customizations from core code, and moves that core code into containers that are easily updated, simplifying and largely automating the process of installation and updates of Islandora. ISLE also bundles together the best shared modules into a common, production-ready and security-hardened platform.","title":"How Does It Work?"},{"location":"about/about-isle/#why-is-it-needed","text":"Islandora is a powerful digital repository comprised of more than 80 different open-source software libraries. This complex ecosystem makes Islandora difficult and expensive to install, maintain and customize. ISLE lowers the barrier to entry for new schools while allowing existing institutions to reallocate funds towards development or ingestion instead of maintenance.","title":"Why Is It Needed?"},{"location":"about/about-isle/#high-level-objective","text":"To deliver a secure and production-ready Islandora stack (\"ISLE\") that reduces the involved support time and effort for installation, maintenance and customization.","title":"High Level Objective"},{"location":"about/about-isle/#isle-functional-definition","text":"By ISLE, it is meant a system that will: Function as both an initial installer and maintenance updater for Islandora stacks with up-to-date components suitable for use as staging, development or production environments, as well as for use on personal computers for development work. Consist of a public, tagged set of Docker containers. Include use of an orchestration tool such as Docker Composer. Allow for the replacement of older containers with newer versions. Be updated to include new component security patch releases within one calendar month. Support institution-specific customizations (XSLTs/Islandora Transforms, Solr, schemas, config.xml, MODS configurations/forms, XACML policies) able to persist through container upgrades and replacements. These will be stored in a git repository and a mechanism will be provided to reintegrate with the installed Docker containers as part of an upgrade. Support for either institutional hosting or Amazon Web Services (AWS) for the Docker host server. Support data store flexibility on institutional hosting or an AWS cloud environment. Encompass critical security patches, and full stack software updates, plus dependencies for commonly installed features and all available solution packs. Include an integrated ISLE/Islandora test suite (expected to utilize TravisCI) to be utilized, developed in conjunction with the Islandora Foundation and the current Islandora release managers Include documentation that covers end usage, a how-to guide to set up an initial ISLE installation, a how-to guide for an established installation to upgrade containers to the latest versions, and a functional description of mechanics, administrative system management and the process for future ISLE development","title":"ISLE Functional Definition"},{"location":"about/contributing/","text":"How to Contribute to ISLE We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Contributing to ISLE"},{"location":"about/contributing/#how-to-contribute-to-isle","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"How to Contribute to ISLE"},{"location":"about/get-help/","text":"Getting Help with ISLE Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Get Help"},{"location":"about/get-help/#getting-help-with-isle","text":"Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Getting Help with ISLE"},{"location":"about/project-history/","text":"ISLandora Enterprise (ISLE) ISLE Documents ISLE Executive Summary (project overview) What is ISLE? ISLE is a community project\u2014initially funded by 17 academic institutions and Born-Digital\u2014that addresses two of the most significant pain-points in Islandora: installation and maintenance. Looking ahead: ISLE is collaborating with the community's LASIR project to develop and include a robust suite of Institutional Repository (IR) features within Islandora. ISLE's common, updatable platform will be advantageous to the community as we prepare to move toward the next major version of Islandora (8/9). Why Use ISLE? ISLE cuts in half (compared to pre-ISLE upkeep costs) the time required to install and maintain an Islandora stack. Clear documentation makes it a snap to test installation on a personal computer, install it directly on a local host server or cloud service, or update a pre-existing ISLE site. ISLE standardizes best-practice security features and protocols, removing much of the opportunity for human error from configuration and upkeep of Production Islandora systems. Multiple stacks (production, staging, and development) may be installed on a single virtual server, and each may be distinctly configured. Initial use cases are showing ISLE to be dramatically faster (more on that soon). Islandora is a powerful digital repository comprised of over 80 different, best-of-breed open-source software libraries. Islandora's strength is that it integrates these packages into one easy to manage system. However, this ecosystem has traditionally been complex enough as to require staff with technical expertise to install and maintain. ISLE lowers the barrier to entry for new institutions or organizations because it reduces the complexity and expense to the point where non-technical staff can upgrade an Islandora stack in just under an hour per month. This in turn allows institutions to reallocate funds towards development or ingestion instead of maintenance. An ISLE maintained Islandora stack is secure and can be run as a production server straight out of the box. A note about migration: ISLE contains complete documentation for migrating existing Islandora installations to the ISLE framework. Institutions currently using CONTENTdm, Digital Commons, or other platforms are able to migrate to ISLE by using the well-documented Move to Islandora Kit (MIK). It is assumed that some institutions will have custom theming, customizations and metadata formats that, while they are preserved during ISLE updates, will need to be manually refactored during the migration to Islandora (8/9). Funding ISLE Phase I: $90,000 crowdfunded ($66,000 from 17 academic institutions; $24,000 in-kind labor from Born-Digital); exceeded original goal of $84,000. ISLE Phase II: Williams College, in partnership with the Islandora Collaboration Group (ICG) and in consultation with the Islandora Foundation, has received a $153,000 grant from The Andrew W. Mellon Foundation to support the Islandora for All project: \"Islandora for All: Extending the Open-Source Platform to Include Broad Scale Institutional Repository Appeal and High-Performance Scalability\" ISLE Phase III: TBD Project Sustainability The ISLE Steering Committee (ISC) oversees the ISLE project and the ISLE Project Maintainers maintain the project with scheduled new releases on GitHub project boards , and issue release notes . The ISC will submit the resultant development via Islandora's Licensed Software Acceptance Procedure ( LSAP ). The development will then become a core part of the Islandora 7x Release (Fall 2019) and will be supported and maintained by the Islandora community as part of the free and publicly shared open-source platform. Through this LSAP method, Islandora has already adopted a large number of externally contributed modules that are sustainably maintained by community members. ISLE Steering Committee Francesca Baird, Wesleyan University Sarah Goldstein, Mount Holyoke College David Keiser-Clark (Chair), Williams College Mark McFate, Grinnell College Gavin Morris, Born-Digital (ex officio, non-voting) Mark Sandford, Colgate University (ex officio, non-voting) Bethany Seeger, Amherst College (ex officio, non-voting) Shaun Trujillo, Mount Holyoke College (ex officio, non-voting) ISLE Funding Institutions Amherst College Barnard College California Institute of Technology Colgate University Grinnell College Hamilton College Hampshire College Mount Holyoke College Rensselaer Polytechnic Institute Smith College St. Lawrence University Tulane University University of Manitoba Libraries University of Pittsburgh Vassar College Wesleyan University Williams College Born-Digital Islandora Foundation (Board supports ISLE; not a funder) Timeline 08/2016 - [Completed] ISLE Phase I conceived with the ICG and Common Media/Born-Digital 09/2016 - [Completed] ISLE presented at ICG Hack/Doc @ Wesleyan University 05/2017 - [Completed] ISLE presented at Islandoracon 2017 annual conference (Hamilton, Ontario) 09/2017 - [Completed] $90,000 crowdfunded from 17 academic institutions to fund ISLE Phase I 09/2017 - [Completed] ISLE MVP: Opened 3-week Public Comment Period 12/2017 - [Completed] Public prototype demonstration: view 5-minute video 12/2017 - [Completed] Alpha Test #1: Grinnell College (lead: Mark McFate) 04/2018 - [Completed] Alpha Test #2: Williams College (lead: David Keiser-Clark) 03/2018 - [Completed] Alpha Test #3: Rensselaer Polytechnic Institute (lead: Andrea Byrne) 03/2018 - [In Process] Community Alpha Test #1: University of Pittsburgh (lead: Clinton Graham) 03/2018 - [Completed] Community Alpha Test #2: Hamilton College (lead: Steve Young) 03/2018 - [Completed] Community Alpha Test #3: Barnard College (lead: Ben Rosner) 05/2018 - [In Process] ISLE Steering Committee approved ISLE (Islandora 7x) hand-off from Born-Digital 05/2018 - [Completed] ISLE v1.0 release available as open-source for public use 08/2018 - [Completed] ISLE v1.1 release candidate available as open-source for public use 10/2018 - [Completed] The Andrew W. Mellon Foundation awarded a $153,000 grant to fund ISLE Phase II 11/2018 - [Completed] ISLE v1.1 released (open-source for public use)","title":"ISLandora Enterprise (ISLE)"},{"location":"about/project-history/#islandora-enterprise-isle","text":"","title":"ISLandora Enterprise (ISLE)"},{"location":"about/project-history/#isle-documents","text":"ISLE Executive Summary (project overview)","title":"ISLE Documents"},{"location":"about/project-history/#what-is-isle","text":"ISLE is a community project\u2014initially funded by 17 academic institutions and Born-Digital\u2014that addresses two of the most significant pain-points in Islandora: installation and maintenance. Looking ahead: ISLE is collaborating with the community's LASIR project to develop and include a robust suite of Institutional Repository (IR) features within Islandora. ISLE's common, updatable platform will be advantageous to the community as we prepare to move toward the next major version of Islandora (8/9).","title":"What is ISLE?"},{"location":"about/project-history/#why-use-isle","text":"ISLE cuts in half (compared to pre-ISLE upkeep costs) the time required to install and maintain an Islandora stack. Clear documentation makes it a snap to test installation on a personal computer, install it directly on a local host server or cloud service, or update a pre-existing ISLE site. ISLE standardizes best-practice security features and protocols, removing much of the opportunity for human error from configuration and upkeep of Production Islandora systems. Multiple stacks (production, staging, and development) may be installed on a single virtual server, and each may be distinctly configured. Initial use cases are showing ISLE to be dramatically faster (more on that soon). Islandora is a powerful digital repository comprised of over 80 different, best-of-breed open-source software libraries. Islandora's strength is that it integrates these packages into one easy to manage system. However, this ecosystem has traditionally been complex enough as to require staff with technical expertise to install and maintain. ISLE lowers the barrier to entry for new institutions or organizations because it reduces the complexity and expense to the point where non-technical staff can upgrade an Islandora stack in just under an hour per month. This in turn allows institutions to reallocate funds towards development or ingestion instead of maintenance. An ISLE maintained Islandora stack is secure and can be run as a production server straight out of the box. A note about migration: ISLE contains complete documentation for migrating existing Islandora installations to the ISLE framework. Institutions currently using CONTENTdm, Digital Commons, or other platforms are able to migrate to ISLE by using the well-documented Move to Islandora Kit (MIK). It is assumed that some institutions will have custom theming, customizations and metadata formats that, while they are preserved during ISLE updates, will need to be manually refactored during the migration to Islandora (8/9).","title":"Why Use ISLE?"},{"location":"about/project-history/#funding","text":"ISLE Phase I: $90,000 crowdfunded ($66,000 from 17 academic institutions; $24,000 in-kind labor from Born-Digital); exceeded original goal of $84,000. ISLE Phase II: Williams College, in partnership with the Islandora Collaboration Group (ICG) and in consultation with the Islandora Foundation, has received a $153,000 grant from The Andrew W. Mellon Foundation to support the Islandora for All project: \"Islandora for All: Extending the Open-Source Platform to Include Broad Scale Institutional Repository Appeal and High-Performance Scalability\" ISLE Phase III: TBD","title":"Funding"},{"location":"about/project-history/#project-sustainability","text":"The ISLE Steering Committee (ISC) oversees the ISLE project and the ISLE Project Maintainers maintain the project with scheduled new releases on GitHub project boards , and issue release notes . The ISC will submit the resultant development via Islandora's Licensed Software Acceptance Procedure ( LSAP ). The development will then become a core part of the Islandora 7x Release (Fall 2019) and will be supported and maintained by the Islandora community as part of the free and publicly shared open-source platform. Through this LSAP method, Islandora has already adopted a large number of externally contributed modules that are sustainably maintained by community members.","title":"Project Sustainability"},{"location":"about/project-history/#isle-steering-committee","text":"Francesca Baird, Wesleyan University Sarah Goldstein, Mount Holyoke College David Keiser-Clark (Chair), Williams College Mark McFate, Grinnell College Gavin Morris, Born-Digital (ex officio, non-voting) Mark Sandford, Colgate University (ex officio, non-voting) Bethany Seeger, Amherst College (ex officio, non-voting) Shaun Trujillo, Mount Holyoke College (ex officio, non-voting)","title":"ISLE Steering Committee"},{"location":"about/project-history/#isle-funding-institutions","text":"Amherst College Barnard College California Institute of Technology Colgate University Grinnell College Hamilton College Hampshire College Mount Holyoke College Rensselaer Polytechnic Institute Smith College St. Lawrence University Tulane University University of Manitoba Libraries University of Pittsburgh Vassar College Wesleyan University Williams College Born-Digital Islandora Foundation (Board supports ISLE; not a funder)","title":"ISLE Funding Institutions"},{"location":"about/project-history/#timeline","text":"08/2016 - [Completed] ISLE Phase I conceived with the ICG and Common Media/Born-Digital 09/2016 - [Completed] ISLE presented at ICG Hack/Doc @ Wesleyan University 05/2017 - [Completed] ISLE presented at Islandoracon 2017 annual conference (Hamilton, Ontario) 09/2017 - [Completed] $90,000 crowdfunded from 17 academic institutions to fund ISLE Phase I 09/2017 - [Completed] ISLE MVP: Opened 3-week Public Comment Period 12/2017 - [Completed] Public prototype demonstration: view 5-minute video 12/2017 - [Completed] Alpha Test #1: Grinnell College (lead: Mark McFate) 04/2018 - [Completed] Alpha Test #2: Williams College (lead: David Keiser-Clark) 03/2018 - [Completed] Alpha Test #3: Rensselaer Polytechnic Institute (lead: Andrea Byrne) 03/2018 - [In Process] Community Alpha Test #1: University of Pittsburgh (lead: Clinton Graham) 03/2018 - [Completed] Community Alpha Test #2: Hamilton College (lead: Steve Young) 03/2018 - [Completed] Community Alpha Test #3: Barnard College (lead: Ben Rosner) 05/2018 - [In Process] ISLE Steering Committee approved ISLE (Islandora 7x) hand-off from Born-Digital 05/2018 - [Completed] ISLE v1.0 release available as open-source for public use 08/2018 - [Completed] ISLE v1.1 release candidate available as open-source for public use 10/2018 - [Completed] The Andrew W. Mellon Foundation awarded a $153,000 grant to fund ISLE Phase II 11/2018 - [Completed] ISLE v1.1 released (open-source for public use)","title":"Timeline"},{"location":"appendices/configuring-lets-encrypt/","text":"Let's Encrypt: Free SSL Certificates Let's Encrypt is a free, automated, and open Certificate Authority for generating SSL certificates for your ISLE environment. Time required: approximately 30 minutes. Prerequisites An internet accessible ISLE server with a fully qualified domain name (FQDN). The FQDN set in your .env file's BASE_DOMAIN is the FQDN we're requesting for SSL certificates. Steps Note: You do not need to stop your stack to complete these steps. Open a terminal on your personal computer and ssh to the server or VM that is hosting your ISLE environment . Change to the \"ISLE\" directory that contains the \"docker-compose.yml\": cd /opt/ISLE Change to the \"config/proxy\" directory: cd config/proxy Create a blank file called \"acme.json\": touch acme.json Modify the permissions of \"acme.json\" to be user read-write ONLY: chmod 600 acme.json Use a text editor (emacs, nano, vi, etc.) to open \"traefik.toml\" ( note: this file is in your \"config/proxy\" folder) Locate the following lines [[entryPoints.https.tls.certificates]] certFile = \"/certs/isle.localdomain.cert\" keyFile = \"/certs/isle.localdomain.key\" Comment the three lines out by adding a # to the beginning of the line: # [[entryPoints.https.tls.certificates]] # certFile = \"/certs/isle.localdomain.cert\" # keyFile = \"/certs/isle.localdomain.key\" On a new line add the following, substituting in your email address: [acme] email = \"your-email@my-institution.org/edu\" storage = \"acme.json\" entryPoint = \"https\" onHostRule = true onDemand = false [acme.httpChallenge] entryPoint = \"http\" Save and close the file. Change back to the directory with your \"docker-compose.yml\" in terminal. Use a text editor to open \"docker-compose.yml\". Locate the section for \"traefik\" and under the \"volumes\" area for \"traefik\" add: - ./config/proxy/acme.json:/acme.json ## Automated cert storage. Save and close the file. Reload your ISLE environment by running docker-compose up -d . Visit your website and inspect your certificates. Additional Resources Let's Encrypt & Docker","title":"Let's Encrypt: Free SSL Certificates"},{"location":"appendices/configuring-lets-encrypt/#lets-encrypt-free-ssl-certificates","text":"Let's Encrypt is a free, automated, and open Certificate Authority for generating SSL certificates for your ISLE environment. Time required: approximately 30 minutes.","title":"Let's Encrypt: Free SSL Certificates"},{"location":"appendices/configuring-lets-encrypt/#prerequisites","text":"An internet accessible ISLE server with a fully qualified domain name (FQDN). The FQDN set in your .env file's BASE_DOMAIN is the FQDN we're requesting for SSL certificates.","title":"Prerequisites"},{"location":"appendices/configuring-lets-encrypt/#steps","text":"Note: You do not need to stop your stack to complete these steps. Open a terminal on your personal computer and ssh to the server or VM that is hosting your ISLE environment . Change to the \"ISLE\" directory that contains the \"docker-compose.yml\": cd /opt/ISLE Change to the \"config/proxy\" directory: cd config/proxy Create a blank file called \"acme.json\": touch acme.json Modify the permissions of \"acme.json\" to be user read-write ONLY: chmod 600 acme.json Use a text editor (emacs, nano, vi, etc.) to open \"traefik.toml\" ( note: this file is in your \"config/proxy\" folder) Locate the following lines [[entryPoints.https.tls.certificates]] certFile = \"/certs/isle.localdomain.cert\" keyFile = \"/certs/isle.localdomain.key\" Comment the three lines out by adding a # to the beginning of the line: # [[entryPoints.https.tls.certificates]] # certFile = \"/certs/isle.localdomain.cert\" # keyFile = \"/certs/isle.localdomain.key\" On a new line add the following, substituting in your email address: [acme] email = \"your-email@my-institution.org/edu\" storage = \"acme.json\" entryPoint = \"https\" onHostRule = true onDemand = false [acme.httpChallenge] entryPoint = \"http\" Save and close the file. Change back to the directory with your \"docker-compose.yml\" in terminal. Use a text editor to open \"docker-compose.yml\". Locate the section for \"traefik\" and under the \"volumes\" area for \"traefik\" add: - ./config/proxy/acme.json:/acme.json ## Automated cert storage. Save and close the file. Reload your ISLE environment by running docker-compose up -d . Visit your website and inspect your certificates.","title":"Steps"},{"location":"appendices/configuring-lets-encrypt/#additional-resources","text":"Let's Encrypt & Docker","title":"Additional Resources"},{"location":"appendices/data-persistence/","text":"Data Persistence in Docker Please note this is a simplified explanation of how Docker stores data in relation to a typical ISLE installation. This document assumes the use of the docker-compose command and docker-compose.yml, though there are other ways to specify how docker uses volumes and bind mounts. For more complete descriptions of bind mounts and volumes, and their management, please see the official docker documentation. Data , in this context, can include digital objects, files, logs, code, or information stored in MySQL, Solr, or Fedora. Essentially, anything typically written to or read from disk in some format, is data. Each time a docker container is brought up using a command like docker-compose up -d the container is recreated using the base container image. When a process in the container creates or changes a file (for example, an Apache log file) those changes only exist while the container is running. If the container is brought down and back up again, it is recreated using the base image, which will not include the Apache log. In order to preserve certain data--for example, the Fedora datastore, Drupal's database and files, etc, ISLE uses volumes and/or bind mounts defined in 'docker-compose.yml'. Data written to volumes and bind mounts are different to other data in Docker in two important ways: It is persistent, so it will survive when there is an update to the base ISLE docker images It can be read and written from the host easily and safely Bind mounts vs volumes Docker provides two different ways to persist data: Volumes and bind mounts , described below. For simplicity, in this document, persisted refers to any data or directory stored in either a bind mount or volume. Volumes Volumes can be named in the docker-compose.yml file and are managed by docker. In the host system, the directories will be created in the Docker store (on Linux, usually /var/lib/docker). If the volume does not already exist, it will be created on docker-compose up. Below is an example docker-compose.yml directive for an Apache container using a volume: volumes: apache-data:/var/www/html Explanation: If not already created, docker will create a directory on the host at '/var/lib/docker' and use that for the apache container's '/var/www/html' directory. Bind Mounts Bind mounts map a directory in the container to a directory anywhere on the host and are not managed directly by docker. Below is an example 'docker-compose.yml' directive for an apache container using a bind mount: volumes: /opt/ISLE/apache/html:/var/www/html Explanation: Data in the host's /opt/ISLE/apache/html directory will be in the apache container's /var/www/html. If the directory does not exist on the host, it will NOT be created on docker-compose up -d , so be sure to create any necessary directories on the host manually. If the container's '/var/www/html/' directory has content, it will be masked by the contents of the host's '/opt/ISLE/apache/html/' directory. What should be persisted this way? Data and directories that store data unique to your Islandora, such as the Fedora datastore, Solr index, and the full Drupal directory, should be persisted, as should the MySQL data directories and some configuration files (those not generated via the .env files). This will ensure that your customizations and content remain even after ISLE containers are updated. It may be useful to write logs to a persisted directory to make accessing and managing the logs easier, and to provide sufficient capacity for log storage. If your workflows involve moving digital objects onto the Islandora server for local ingest, it may be useful to have a persisted directory designated for those objects. The alternative is to put them on the host server, then use scp or docker cp to copy them into the container, which adds steps to the process. What should NOT be persisted? Application data that is not meant to be customized or unique to your institution should not be persisted, but instead managed within the docker container (as it is by default). Example: The ISLE team updates the apache container to apache2's latest security release. If the directory containing apache's binary is in a persisted directory, then updating ISLE will NOT automatically provide the latest apache, and you will continue to run the older, insecure apache until you manually update it inside the container. This negates many of the benefits of using ISLE. Which should I use, bind mounts or volumes? The answer for this is \"it depends\". Bind mounts may be easier to get to on a host machine as you have more control over where they are. If you are migrating an existing installation, you will almost certainly want to copy over things like your /var/www/html directory and Fedora store and use a bind mount to point to them. The Solr index, however, should not be migrated over but rather rebuilt. It doesn't need to exist before the containers do. It is also unlikely that a user would want to navigate to the Solr directory via command line on the host and edit files directly. A named volume would probably work fine in this case, and be more easily managed by docker.","title":"Data Persistence in Docker"},{"location":"appendices/data-persistence/#data-persistence-in-docker","text":"Please note this is a simplified explanation of how Docker stores data in relation to a typical ISLE installation. This document assumes the use of the docker-compose command and docker-compose.yml, though there are other ways to specify how docker uses volumes and bind mounts. For more complete descriptions of bind mounts and volumes, and their management, please see the official docker documentation. Data , in this context, can include digital objects, files, logs, code, or information stored in MySQL, Solr, or Fedora. Essentially, anything typically written to or read from disk in some format, is data. Each time a docker container is brought up using a command like docker-compose up -d the container is recreated using the base container image. When a process in the container creates or changes a file (for example, an Apache log file) those changes only exist while the container is running. If the container is brought down and back up again, it is recreated using the base image, which will not include the Apache log. In order to preserve certain data--for example, the Fedora datastore, Drupal's database and files, etc, ISLE uses volumes and/or bind mounts defined in 'docker-compose.yml'. Data written to volumes and bind mounts are different to other data in Docker in two important ways: It is persistent, so it will survive when there is an update to the base ISLE docker images It can be read and written from the host easily and safely","title":"Data Persistence in Docker"},{"location":"appendices/data-persistence/#bind-mounts-vs-volumes","text":"Docker provides two different ways to persist data: Volumes and bind mounts , described below. For simplicity, in this document, persisted refers to any data or directory stored in either a bind mount or volume.","title":"Bind mounts vs volumes"},{"location":"appendices/data-persistence/#volumes","text":"Volumes can be named in the docker-compose.yml file and are managed by docker. In the host system, the directories will be created in the Docker store (on Linux, usually /var/lib/docker). If the volume does not already exist, it will be created on docker-compose up. Below is an example docker-compose.yml directive for an Apache container using a volume: volumes: apache-data:/var/www/html Explanation: If not already created, docker will create a directory on the host at '/var/lib/docker' and use that for the apache container's '/var/www/html' directory.","title":"Volumes"},{"location":"appendices/data-persistence/#bind-mounts","text":"Bind mounts map a directory in the container to a directory anywhere on the host and are not managed directly by docker. Below is an example 'docker-compose.yml' directive for an apache container using a bind mount: volumes: /opt/ISLE/apache/html:/var/www/html Explanation: Data in the host's /opt/ISLE/apache/html directory will be in the apache container's /var/www/html. If the directory does not exist on the host, it will NOT be created on docker-compose up -d , so be sure to create any necessary directories on the host manually. If the container's '/var/www/html/' directory has content, it will be masked by the contents of the host's '/opt/ISLE/apache/html/' directory.","title":"Bind Mounts"},{"location":"appendices/data-persistence/#what-should-be-persisted-this-way","text":"Data and directories that store data unique to your Islandora, such as the Fedora datastore, Solr index, and the full Drupal directory, should be persisted, as should the MySQL data directories and some configuration files (those not generated via the .env files). This will ensure that your customizations and content remain even after ISLE containers are updated. It may be useful to write logs to a persisted directory to make accessing and managing the logs easier, and to provide sufficient capacity for log storage. If your workflows involve moving digital objects onto the Islandora server for local ingest, it may be useful to have a persisted directory designated for those objects. The alternative is to put them on the host server, then use scp or docker cp to copy them into the container, which adds steps to the process.","title":"What should be persisted this way?"},{"location":"appendices/data-persistence/#what-should-not-be-persisted","text":"Application data that is not meant to be customized or unique to your institution should not be persisted, but instead managed within the docker container (as it is by default). Example: The ISLE team updates the apache container to apache2's latest security release. If the directory containing apache's binary is in a persisted directory, then updating ISLE will NOT automatically provide the latest apache, and you will continue to run the older, insecure apache until you manually update it inside the container. This negates many of the benefits of using ISLE.","title":"What should NOT be persisted?"},{"location":"appendices/data-persistence/#which-should-i-use-bind-mounts-or-volumes","text":"The answer for this is \"it depends\". Bind mounts may be easier to get to on a host machine as you have more control over where they are. If you are migrating an existing installation, you will almost certainly want to copy over things like your /var/www/html directory and Fedora store and use a bind mount to point to them. The Solr index, however, should not be migrated over but rather rebuilt. It doesn't need to exist before the containers do. It is also unlikely that a user would want to navigate to the Solr directory via command line on the host and edit files directly. A named volume would probably work fine in this case, and be more easily managed by docker.","title":"Which should I use, bind mounts or volumes?"},{"location":"appendices/environment-files/","text":"ISLE Environment Files The .env and tomcat.env Docker files are located in the folder with the docker-compose.yml, and are key to configuring the ISLE stack to suit your needs. Here are the variables and their job: .env (Docker Environment File) COMPOSE_PROJECT_NAME=isle-production This variable is appended to Docker objects like volume and network names. BASE_DOMAIN=mydomain.edu This variable specifies your domain name. CONTAINER_SHORT_ID=ld Okay to leave this as is. Keep this variable short as it is appended to the end of all running containers. Database (SQL) .env Variable Purpose ISLE Services updated What it does MYSQL_ROOT_PASSWORD Set the root password for MySQL MySQL, Fedora, Apache Allows Fedora and Apache to update their relevant databases as well as to configure themselves to work together. FEDORA_DB Set the name of Fedora database MySQL, Fedora Specifies which database to create or use for Fedora data. DRUPAL_DB Set the name of the Drupal database MySQL, Apache, Fedora Specifies which database to create or use for Fedora data. Updates components of Fedora so it can read the Drupal database for users. FEDORA_DB_USER DRUPAL_DB_USER Sets the MySQL user MySQL, Apache, Fedora Specifies names of Database users. FEDORA_DB_PASS DRUPAL_DB_PASS Sets MySQL user passwords MySQL, Apache, Fedora Specifies passwords of Database users. Islandora (Drupal) .env Variable Purpose ISLE Services updated What it does DRUPAL_SITE_NAME Sets the Drupal Site Name variable Drupal Sets the name of your Islandora Website; e.g.: \"Your Project Name\" DRUPAL_ADMIN_USER Set the name of Drupal admin Drupal Specifies the 'admin user' for your Islandora website. DRUPAL_ADMIN_PASS Set the password of Drupal admin Drupal Specifies the password of 'admin user' for your Islandora website. DRUPAL_ADMIN_EMAIL Set the email of Drupal admin Drupal Specifies the email address of the 'admin user' for your Islandora site. DRUPAL_HASH_SALT Secures your installation by hashing data Drupal Secures your install of Drupal (Islandora) by hashing (obscuring) key data. Use password generator tool to create a HASH_SALT, remember alphanumeric characters ONLY (no special characters). Fedora Repository .env Variable Purpose ISLE Services updated What it does FEDORA_ADMIN_USER Set the name of Fedora admin Fedora Sets the administrator username to login to the Fedora repository. You login with this user. FEDORA_ADMIN_PASS Set the password of Fedora admin Fedora Sets the administrator password to login to the Fedora repository. FEDORA_GSEARCH_USER Sets the username for FGS Fedora, Fedora Generic Search Sets the Fedora Generic Search (FGS) username used to login to the Fedora repository. FGS uses this user to connect to Fedora to update your search index. FEDORA_GSEARCH_PASS Sets the password for FGS Fedora, Fedora Generic Search Sets the password for FGS to gain access to your repository. FEDORA_INTCALL_USER Sets the internal call user Fedora The internal call username FEDORA_INTCALL_PASS Sets the internal call password Fedora The internal call password Image Services .env Variable ISLE Services updated What it does CANTALOUPE_ADMIN_INTERFACE_ENABLE ImageServices Enables or Disables the Cantaloupe IIIF /admin control panel. Located at http://hostip:8083/cantaloupe/admin when true, else false. CANTALOUPE_ADMIN_USER ImageServices Set the admin username to login to the admin panel. CANTALOUPE_ADMIN_PASS ImageServices Set the admin password to login to the admin panel. tomcat.env (Docker Environment File) Tomcat.env Variable ISLE Services updated What it does TOMCAT_ADMIN_USER Fedora, Solr, ImageServices Set the admin username to login to the admin panel. TOMCAT_ADMIN_PASS Fedora, Solr, ImageServices Set the admin password to login to the admin panel. TOMCAT_MANAGER_USER Fedora, Solr, ImageServices Set the manager username to login to the admin panel. TOMCAT_MANAGER_PASS Fedora, Solr, ImageServices Set the manager password to login to the admin panel.","title":"Environment files"},{"location":"appendices/environment-files/#isle-environment-files","text":"The .env and tomcat.env Docker files are located in the folder with the docker-compose.yml, and are key to configuring the ISLE stack to suit your needs. Here are the variables and their job:","title":"ISLE Environment Files"},{"location":"appendices/environment-files/#env-docker-environment-file","text":"COMPOSE_PROJECT_NAME=isle-production This variable is appended to Docker objects like volume and network names. BASE_DOMAIN=mydomain.edu This variable specifies your domain name. CONTAINER_SHORT_ID=ld Okay to leave this as is. Keep this variable short as it is appended to the end of all running containers.","title":".env (Docker Environment File)"},{"location":"appendices/environment-files/#database-sql","text":".env Variable Purpose ISLE Services updated What it does MYSQL_ROOT_PASSWORD Set the root password for MySQL MySQL, Fedora, Apache Allows Fedora and Apache to update their relevant databases as well as to configure themselves to work together. FEDORA_DB Set the name of Fedora database MySQL, Fedora Specifies which database to create or use for Fedora data. DRUPAL_DB Set the name of the Drupal database MySQL, Apache, Fedora Specifies which database to create or use for Fedora data. Updates components of Fedora so it can read the Drupal database for users. FEDORA_DB_USER DRUPAL_DB_USER Sets the MySQL user MySQL, Apache, Fedora Specifies names of Database users. FEDORA_DB_PASS DRUPAL_DB_PASS Sets MySQL user passwords MySQL, Apache, Fedora Specifies passwords of Database users.","title":"Database (SQL)"},{"location":"appendices/environment-files/#islandora-drupal","text":".env Variable Purpose ISLE Services updated What it does DRUPAL_SITE_NAME Sets the Drupal Site Name variable Drupal Sets the name of your Islandora Website; e.g.: \"Your Project Name\" DRUPAL_ADMIN_USER Set the name of Drupal admin Drupal Specifies the 'admin user' for your Islandora website. DRUPAL_ADMIN_PASS Set the password of Drupal admin Drupal Specifies the password of 'admin user' for your Islandora website. DRUPAL_ADMIN_EMAIL Set the email of Drupal admin Drupal Specifies the email address of the 'admin user' for your Islandora site. DRUPAL_HASH_SALT Secures your installation by hashing data Drupal Secures your install of Drupal (Islandora) by hashing (obscuring) key data. Use password generator tool to create a HASH_SALT, remember alphanumeric characters ONLY (no special characters).","title":"Islandora (Drupal)"},{"location":"appendices/environment-files/#fedora-repository","text":".env Variable Purpose ISLE Services updated What it does FEDORA_ADMIN_USER Set the name of Fedora admin Fedora Sets the administrator username to login to the Fedora repository. You login with this user. FEDORA_ADMIN_PASS Set the password of Fedora admin Fedora Sets the administrator password to login to the Fedora repository. FEDORA_GSEARCH_USER Sets the username for FGS Fedora, Fedora Generic Search Sets the Fedora Generic Search (FGS) username used to login to the Fedora repository. FGS uses this user to connect to Fedora to update your search index. FEDORA_GSEARCH_PASS Sets the password for FGS Fedora, Fedora Generic Search Sets the password for FGS to gain access to your repository. FEDORA_INTCALL_USER Sets the internal call user Fedora The internal call username FEDORA_INTCALL_PASS Sets the internal call password Fedora The internal call password","title":"Fedora Repository"},{"location":"appendices/environment-files/#image-services","text":".env Variable ISLE Services updated What it does CANTALOUPE_ADMIN_INTERFACE_ENABLE ImageServices Enables or Disables the Cantaloupe IIIF /admin control panel. Located at http://hostip:8083/cantaloupe/admin when true, else false. CANTALOUPE_ADMIN_USER ImageServices Set the admin username to login to the admin panel. CANTALOUPE_ADMIN_PASS ImageServices Set the admin password to login to the admin panel.","title":"Image Services"},{"location":"appendices/environment-files/#tomcatenv-docker-environment-file","text":"Tomcat.env Variable ISLE Services updated What it does TOMCAT_ADMIN_USER Fedora, Solr, ImageServices Set the admin username to login to the admin panel. TOMCAT_ADMIN_PASS Fedora, Solr, ImageServices Set the admin password to login to the admin panel. TOMCAT_MANAGER_USER Fedora, Solr, ImageServices Set the manager username to login to the admin panel. TOMCAT_MANAGER_PASS Fedora, Solr, ImageServices Set the manager password to login to the admin panel.","title":"tomcat.env (Docker Environment File)"},{"location":"appendices/glossary/","text":"Glossary Topics ISLE Docker Documentation / Development Solr Systems Virtualization ISLE ISLE : In simple terms, ISLE is a set of resources that allows one to build a fully functioning Islandora system fairly quickly using a system building tool called Docker . Docker Containers : Docker containers are lightweight, stand-alone, executable packages of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Each major component of Islandora runs in its own container. Docker : used to build ISLE - Docker is used to create containers (similar to virtual servers) based on pre-built images. A \"recipe\" file called docker-compose.yml orchestrates the setting up and networking of the containers. Dockerfile : Docker can build images automatically by reading the instructions from a Dockerfile . A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker for Mac : Docker for Mac is an easy-to-install desktop app for building, debugging and testing Dockerized apps on a Mac. Docker for Mac is a complete development environment deeply integrated with the MacOS Hypervisor framework, networking and filesystem Dockerhub : website / repository that provides access to the latest Docker images for the ISLE containers. Host Server : Also called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a personal computer (LOCAL), or a server you connected to via ssh (REMOTE). Images : Docker images - source for the containers - these are built with installed software and updated by ISLE developers and stored on Dockerhub. You can see what software is used in each of the image's Dockerfiles e.g. apache/Dockerfile , etc. This will contain additional information on official Docker images used as a Docker base image ISLE on GitHub : the ISLE repository on github.com contains documentation and configuration files necessary to build ISLE. Network refers to a defined Docker network that is controlled by docker. This has powerful implications in production. ISLE services: fedora , solr , apache , mysql , and proxy communicate using an internal private stack network. The service proxy also joins an insecure network that is accessible to the WAN (or for testing \"WAN\" likely means a smaller internal network). Why two networks? Swarms, scaling, replicating. Volume a Docker controlled place to hold data on the local file system. Used to persist data across containers. Documentation / Development Git - A free and open source distributed software version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. https://git-scm.com/ The ISLE project and its documentation is hosted by an online git service called Github.com Note: GUI based clients such as the SourceTree App may be provide a helpful visual aid for using git. Git branches - Branching means you diverge from the main line of development and continue to do work without messing with that main line. Learn more about branching here Markdown is a lightweight markup language with plain text formatting syntax. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). https://en.wikipedia.org/wiki/Markdown https://daringfireball.net/projects/markdown/syntax http://kirkstrobeck.github.io/whatismarkdown.com/ https://help.github.com/categories/writing-on-github/ Terminal (CLI) - A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface[1] and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). A program which handles the interface is called a command language interpreter or shell. TL;DR - \"Too long; didn't read.\" - used to indicate a large post, article, etc. that has a brief summary of said post, article, etc. as it might be too long to read. YAML (YAML Ain't Markup Language) is a human-readable data serialization language. It is commonly used for configuration files, but could be used in many applications where data is being stored (e.g. debugging output) or transmitted (e.g. document headers). https://en.wikipedia.org/wiki/YAML http://yaml.org/ Solr Note: Online versions of the SOLR documentation are for 6.6+ or higher, ISLE currently users version 4.10.4 only. Solr - an open source enterprise search platform with the such features as full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[1] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance. Learn more about Solr here Learn more about using Solr 4.10.4 Core - In Solr, the term core is used to refer to a single index and associated transaction log and configuration files (including the solrconfig.xml and Schema files, among others). Your Solr installation can have multiple cores if needed, which allows you to index data with different structures in the same server, and maintain more control over how your data is presented to different audiences. schema.xml - Solr organizes its data into documents, which consist of fields. The schema.xml file contains information about these fields, how they are analyzed and then filtered during searches. Different field types can contain different types of data so Solr uses the schema.xml file to determine how to build indexes from these input documents, and how to perform index and query time processing. solr.xml - The solr.xml file specifies configuration options for each Solr core, including configuration options for multiple cores. The file also contains mappings for request URLs, and indicates which cores to load when the server starts. solrconfig.xml - The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, you configure important features such as: request handlers, which process the requests to Solr, such as requests to add documents to the index or requests to return results for a query listeners processes that \"listen\" for particular query-related events. Listeners can be used to trigger the execution of special code, such as invoking some common queries to warm-up caches and much more... stopwords.txt - The stopwords.txt file is a configuration file that lists the words to be used by the Solr stop filter to be excluded from appearing or being used for searches. Examples of these common words are a large list that can include \"a\", \"the\", or \"is\" which in a page could easily appear hundreds of times or more. When a user performs a search, an algorithm calculates the relevancy of any document in the search index by counting the number of times a word appears in the text being searched and since words like \"the\" have no bearing on a document's actual relevancy; they are then excluded from this ranking algorithm's results. Systems cronjob - The software utility cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration Learn more here . This is used by such utilities like tmpreaper and the Drupal site on the apache container. domain - A domain name is your website name for the IP address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of numbers. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses. Learn more about domains here or here dhparam - A script to create this file can be found in the /config/isle-sample/proxy/config/ssl-certs directory. This file is used in conjunction with the Nginx reverse proxy on the proxy container to further secure the communication / traffic between the external network (ISLE Host) and the internal ISLE network (other four containers.) The Diffie\u2013Hellman key exchange is an alternative to RSA-based key exchange using an ephemeral but slower Diffie-Hellman algorithm which generates session keys in such a way that only the two parties involved in the communication can obtain them. No one else can, even if they have access to the server's private key. After the session is complete, and both parties destroy the session keys, the only way to decrypt the communication is to break the session keys themselves. This protocol feature is known as Forward Secrecy. Learn more about Diffie-Hellman parameters environment - An ISLE environment can be a production, development or staging environment. However ISLE is flexible and can be named anything using any convention of the end user's desire, one is not forced to do the following. Following a recommended workflow of \"code up, data down\" for Islandora development typically: a production ISLE environment is a separate ISLE instance running all production (final and tested) potentially public facing code, themes, databases and a full amount of collection data or objects. a staging ISLE environment is a separate ISLE instance running all running all pre-production (final and tested) private (non-public) facing code, themes, databases and a full amount of collection data or objects. staging should be an exact mirror of production (RAM, CPU, storage etc) with the exception of new code to be reviewed and tested internally prior to pushing to production. a development ISLE environment is a separate ISLE instance running all development (experimental and untested) private (non-public) facing code, themes, databases and a limited amount of collection data or objects. development should not be a mirror of production and can be greatly limited and underpowered in its resource footprint e.g. less RAM, CPU, HD, etc. personal computer - a personal computer represents a personal laptop or desk computer (workstation). Root User - the user name or account that by default has access to all commands and files on a Linux or other Unix-like operating system. It is also referred to as the root account, root, root user and the superuser. Learn more about root user SSH - is a cryptographic network protocol for operating network services securely over an unsecured network. The best known example application is for remote login to computer systems by users. Learn more about SSH SSL certificates - files that digitally bind a cryptographic key to an organization's web domain (URL). To enable HTTPS on your website, you need to get a certificate (a type of file) from a Certificate Authority (CA). When installed on a web server, the browser will display a padlock icon and https will appear as the prefix to the URL to indicate a secure connection between the web server and user's browser. SSL certificates are used to secure credit card transactions, data transfer, logins, and more. Generate SSL certificates by using ONE of the following methods: Ask your IT department to provision a complete SSL Certificate Chain . On your remote server ISLE Installation you will place the SSL certificates into the ./ISLE/config/proxy/ssl-certs directory. These SSL certificates are used by the apache & proxy Docker containers. Use Let's Encrypt , a free, automated, and open Certificate Authority for generating SSL certificates for your ISLE environment. In order to get a certificate for your website's domain from Let's Encrypt, you have to demonstrate control over the domain. With Let's Encrypt, you do this using software that uses the ACME protocol, which typically runs on your web host. To begin, visit the Let's Encrypt: Free SSL Certificates ISLE guide. Additional resources: Why SSL? The Purpose of using SSL Certificates How to Configure Nginx SSL Certificate Chain The SSLCertificateChainFile Directive directive sets the optional all-in-one file where you can assemble the certificates of Certification Authorities (CA) which form the certificate chain of the server certificate. (e.g. /certs/sample-interm.pem used as an example in later documentation. This file may be optional in some setups but is generally recommended for use by the apache container when available.) The SSLCertificateFile Directive directive points to a file with certificate data in PEM format. At a minimum, the file must include an end-entity (leaf) certificate. (e.g. /certs/sample.pem used as an example in later documentation. This file is required in all setups.) The SSLCertificateKeyFile Directive directive points to the PEM-encoded private key file for the server. If the contained private key is encrypted, the pass phrase dialog is forced at startup time. (e.g. /certs/sample-key.pem used as an example in later documentation. This file is required in all setups.) sudo - short for \"substitute user do\" and it allows the user to have root permissions when entered in front of a command. Learn more about sudo Virtualization Vagrant : Vagrant provides easy to configure, reproducible, and portable work environments. Vagrant works on Mac, Linux, Windows, and more. Within the ISLE project there is a vagrant folder. Vagrantfile : Vagrantfile used to describe the type of virtual machine required for the ISLE project, and how to configure and provision these virtual machines. Vagrantfiles are called Vagrantfiles because the actual literal filename for the file is Vagrantfile. Vagrant is meant to run with one Vagrantfile per project which allows end users to check out the code, run vagrant up, and be on their way. Vagrantfiles are used primarily for use on personal computers running a Ubuntu or CentOS ISLE Host server. Virtualbox : VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. VM : Virtual Machine - A virtual machine is a software computer that, similar to a physical computer, runs an operating system and applications comprised of specification and configuration files backed by the resources of a host (the physical computer).","title":"Glossary"},{"location":"appendices/glossary/#isle","text":"ISLE : In simple terms, ISLE is a set of resources that allows one to build a fully functioning Islandora system fairly quickly using a system building tool called Docker .","title":"ISLE"},{"location":"appendices/glossary/#docker","text":"Containers : Docker containers are lightweight, stand-alone, executable packages of a piece of software that includes everything needed to run it: code, runtime, system tools, system libraries, settings. Each major component of Islandora runs in its own container. Docker : used to build ISLE - Docker is used to create containers (similar to virtual servers) based on pre-built images. A \"recipe\" file called docker-compose.yml orchestrates the setting up and networking of the containers. Dockerfile : Docker can build images automatically by reading the instructions from a Dockerfile . A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Using docker build users can create an automated build that executes several command-line instructions in succession. Docker for Mac : Docker for Mac is an easy-to-install desktop app for building, debugging and testing Dockerized apps on a Mac. Docker for Mac is a complete development environment deeply integrated with the MacOS Hypervisor framework, networking and filesystem Dockerhub : website / repository that provides access to the latest Docker images for the ISLE containers. Host Server : Also called \"the host\" - this is the base computer upon which the entire ISLE stack is built - this can be a virtual machine on a personal computer (LOCAL), or a server you connected to via ssh (REMOTE). Images : Docker images - source for the containers - these are built with installed software and updated by ISLE developers and stored on Dockerhub. You can see what software is used in each of the image's Dockerfiles e.g. apache/Dockerfile , etc. This will contain additional information on official Docker images used as a Docker base image ISLE on GitHub : the ISLE repository on github.com contains documentation and configuration files necessary to build ISLE. Network refers to a defined Docker network that is controlled by docker. This has powerful implications in production. ISLE services: fedora , solr , apache , mysql , and proxy communicate using an internal private stack network. The service proxy also joins an insecure network that is accessible to the WAN (or for testing \"WAN\" likely means a smaller internal network). Why two networks? Swarms, scaling, replicating. Volume a Docker controlled place to hold data on the local file system. Used to persist data across containers.","title":"Docker"},{"location":"appendices/glossary/#documentation-development","text":"Git - A free and open source distributed software version control system designed to handle everything from small to very large projects with speed and efficiency. Git is easy to learn and has a tiny footprint with lightning fast performance. https://git-scm.com/ The ISLE project and its documentation is hosted by an online git service called Github.com Note: GUI based clients such as the SourceTree App may be provide a helpful visual aid for using git. Git branches - Branching means you diverge from the main line of development and continue to do work without messing with that main line. Learn more about branching here Markdown is a lightweight markup language with plain text formatting syntax. Markdown allows you to write using an easy-to-read, easy-to-write plain text format, then convert it to structurally valid XHTML (or HTML). https://en.wikipedia.org/wiki/Markdown https://daringfireball.net/projects/markdown/syntax http://kirkstrobeck.github.io/whatismarkdown.com/ https://help.github.com/categories/writing-on-github/ Terminal (CLI) - A command-line interface or command language interpreter (CLI), also known as command-line user interface, console user interface[1] and character user interface (CUI), is a means of interacting with a computer program where the user (or client) issues commands to the program in the form of successive lines of text (command lines). A program which handles the interface is called a command language interpreter or shell. TL;DR - \"Too long; didn't read.\" - used to indicate a large post, article, etc. that has a brief summary of said post, article, etc. as it might be too long to read. YAML (YAML Ain't Markup Language) is a human-readable data serialization language. It is commonly used for configuration files, but could be used in many applications where data is being stored (e.g. debugging output) or transmitted (e.g. document headers). https://en.wikipedia.org/wiki/YAML http://yaml.org/","title":"Documentation / Development"},{"location":"appendices/glossary/#solr","text":"Note: Online versions of the SOLR documentation are for 6.6+ or higher, ISLE currently users version 4.10.4 only. Solr - an open source enterprise search platform with the such features as full-text search, hit highlighting, faceted search, real-time indexing, dynamic clustering, database integration, NoSQL features[1] and rich document (e.g., Word, PDF) handling. Providing distributed search and index replication, Solr is designed for scalability and fault tolerance. Learn more about Solr here Learn more about using Solr 4.10.4 Core - In Solr, the term core is used to refer to a single index and associated transaction log and configuration files (including the solrconfig.xml and Schema files, among others). Your Solr installation can have multiple cores if needed, which allows you to index data with different structures in the same server, and maintain more control over how your data is presented to different audiences. schema.xml - Solr organizes its data into documents, which consist of fields. The schema.xml file contains information about these fields, how they are analyzed and then filtered during searches. Different field types can contain different types of data so Solr uses the schema.xml file to determine how to build indexes from these input documents, and how to perform index and query time processing. solr.xml - The solr.xml file specifies configuration options for each Solr core, including configuration options for multiple cores. The file also contains mappings for request URLs, and indicates which cores to load when the server starts. solrconfig.xml - The solrconfig.xml file is the configuration file with the most parameters affecting Solr itself. In solrconfig.xml, you configure important features such as: request handlers, which process the requests to Solr, such as requests to add documents to the index or requests to return results for a query listeners processes that \"listen\" for particular query-related events. Listeners can be used to trigger the execution of special code, such as invoking some common queries to warm-up caches and much more... stopwords.txt - The stopwords.txt file is a configuration file that lists the words to be used by the Solr stop filter to be excluded from appearing or being used for searches. Examples of these common words are a large list that can include \"a\", \"the\", or \"is\" which in a page could easily appear hundreds of times or more. When a user performs a search, an algorithm calculates the relevancy of any document in the search index by counting the number of times a word appears in the text being searched and since words like \"the\" have no bearing on a document's actual relevancy; they are then excluded from this ranking algorithm's results.","title":"Solr"},{"location":"appendices/glossary/#systems","text":"cronjob - The software utility cron is a time-based job scheduler in Unix-like computer operating systems. People who set up and maintain software environments use cron to schedule jobs (commands or shell scripts) to run periodically at fixed times, dates, or intervals. It typically automates system maintenance or administration Learn more here . This is used by such utilities like tmpreaper and the Drupal site on the apache container. domain - A domain name is your website name for the IP address where Internet users can access your website. A domain name is used for finding and identifying computers on the Internet. Computers use IP addresses, which are a series of numbers. However, it is difficult for humans to remember strings of numbers. Because of this, domain names were developed and used to identify entities on the Internet rather than using IP addresses. Learn more about domains here or here dhparam - A script to create this file can be found in the /config/isle-sample/proxy/config/ssl-certs directory. This file is used in conjunction with the Nginx reverse proxy on the proxy container to further secure the communication / traffic between the external network (ISLE Host) and the internal ISLE network (other four containers.) The Diffie\u2013Hellman key exchange is an alternative to RSA-based key exchange using an ephemeral but slower Diffie-Hellman algorithm which generates session keys in such a way that only the two parties involved in the communication can obtain them. No one else can, even if they have access to the server's private key. After the session is complete, and both parties destroy the session keys, the only way to decrypt the communication is to break the session keys themselves. This protocol feature is known as Forward Secrecy. Learn more about Diffie-Hellman parameters environment - An ISLE environment can be a production, development or staging environment. However ISLE is flexible and can be named anything using any convention of the end user's desire, one is not forced to do the following. Following a recommended workflow of \"code up, data down\" for Islandora development typically: a production ISLE environment is a separate ISLE instance running all production (final and tested) potentially public facing code, themes, databases and a full amount of collection data or objects. a staging ISLE environment is a separate ISLE instance running all running all pre-production (final and tested) private (non-public) facing code, themes, databases and a full amount of collection data or objects. staging should be an exact mirror of production (RAM, CPU, storage etc) with the exception of new code to be reviewed and tested internally prior to pushing to production. a development ISLE environment is a separate ISLE instance running all development (experimental and untested) private (non-public) facing code, themes, databases and a limited amount of collection data or objects. development should not be a mirror of production and can be greatly limited and underpowered in its resource footprint e.g. less RAM, CPU, HD, etc. personal computer - a personal computer represents a personal laptop or desk computer (workstation). Root User - the user name or account that by default has access to all commands and files on a Linux or other Unix-like operating system. It is also referred to as the root account, root, root user and the superuser. Learn more about root user SSH - is a cryptographic network protocol for operating network services securely over an unsecured network. The best known example application is for remote login to computer systems by users. Learn more about SSH SSL certificates - files that digitally bind a cryptographic key to an organization's web domain (URL). To enable HTTPS on your website, you need to get a certificate (a type of file) from a Certificate Authority (CA). When installed on a web server, the browser will display a padlock icon and https will appear as the prefix to the URL to indicate a secure connection between the web server and user's browser. SSL certificates are used to secure credit card transactions, data transfer, logins, and more. Generate SSL certificates by using ONE of the following methods: Ask your IT department to provision a complete SSL Certificate Chain . On your remote server ISLE Installation you will place the SSL certificates into the ./ISLE/config/proxy/ssl-certs directory. These SSL certificates are used by the apache & proxy Docker containers. Use Let's Encrypt , a free, automated, and open Certificate Authority for generating SSL certificates for your ISLE environment. In order to get a certificate for your website's domain from Let's Encrypt, you have to demonstrate control over the domain. With Let's Encrypt, you do this using software that uses the ACME protocol, which typically runs on your web host. To begin, visit the Let's Encrypt: Free SSL Certificates ISLE guide. Additional resources: Why SSL? The Purpose of using SSL Certificates How to Configure Nginx SSL Certificate Chain The SSLCertificateChainFile Directive directive sets the optional all-in-one file where you can assemble the certificates of Certification Authorities (CA) which form the certificate chain of the server certificate. (e.g. /certs/sample-interm.pem used as an example in later documentation. This file may be optional in some setups but is generally recommended for use by the apache container when available.) The SSLCertificateFile Directive directive points to a file with certificate data in PEM format. At a minimum, the file must include an end-entity (leaf) certificate. (e.g. /certs/sample.pem used as an example in later documentation. This file is required in all setups.) The SSLCertificateKeyFile Directive directive points to the PEM-encoded private key file for the server. If the contained private key is encrypted, the pass phrase dialog is forced at startup time. (e.g. /certs/sample-key.pem used as an example in later documentation. This file is required in all setups.) sudo - short for \"substitute user do\" and it allows the user to have root permissions when entered in front of a command. Learn more about sudo","title":"Systems"},{"location":"appendices/glossary/#virtualization","text":"Vagrant : Vagrant provides easy to configure, reproducible, and portable work environments. Vagrant works on Mac, Linux, Windows, and more. Within the ISLE project there is a vagrant folder. Vagrantfile : Vagrantfile used to describe the type of virtual machine required for the ISLE project, and how to configure and provision these virtual machines. Vagrantfiles are called Vagrantfiles because the actual literal filename for the file is Vagrantfile. Vagrant is meant to run with one Vagrantfile per project which allows end users to check out the code, run vagrant up, and be on their way. Vagrantfiles are used primarily for use on personal computers running a Ubuntu or CentOS ISLE Host server. Virtualbox : VirtualBox is a general-purpose full virtualizer for x86 hardware, targeted at server, desktop and embedded use. VM : Virtual Machine - A virtual machine is a software computer that, similar to a physical computer, runs an operating system and applications comprised of specification and configuration files backed by the resources of a host (the physical computer).","title":"Virtualization"},{"location":"appendices/install-troubleshooting/","text":"This is a basic guide / area that includes some general troubleshooting tips, techniques, thoughts towards helping ISLE users. This section is to grow over time. Docker Service and Firewalls While it is best practice to run the Docker service with a firewall like iptables , some cases, issues can arise depending on which service has been restarted and configured. Ensure that all ports exposed on containers and hosts (see your docker-compose.yml for these ports) are added to the iptables rules and persistent. Do note that only ports 80 & 443 should ever be open to the public Internet. Suggested service start order: The firewall be started / restart first The Docker service started / restarted second ISLE containers started / restart third Some errors like \"Failed to find document http://www.loc.gov/standards/mods/v3/mods-3-4.xsd\" are an indication of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues. On occasion, being unable to import an object, or edit a mods datastream are indications of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues.","title":"Troubleshooting"},{"location":"appendices/install-troubleshooting/#docker-service-and-firewalls","text":"While it is best practice to run the Docker service with a firewall like iptables , some cases, issues can arise depending on which service has been restarted and configured. Ensure that all ports exposed on containers and hosts (see your docker-compose.yml for these ports) are added to the iptables rules and persistent. Do note that only ports 80 & 443 should ever be open to the public Internet. Suggested service start order: The firewall be started / restart first The Docker service started / restarted second ISLE containers started / restart third Some errors like \"Failed to find document http://www.loc.gov/standards/mods/v3/mods-3-4.xsd\" are an indication of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues. On occasion, being unable to import an object, or edit a mods datastream are indications of materials being blocked improperly. Try following the Suggested service start order: above to resolve these type of issues.","title":"Docker Service and Firewalls"},{"location":"appendices/installing-module-with-composer/","text":"Installing a Module with Composer Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Composer. Composer is a PHP package/dependency manager employed in Drupal 8 and many other PHP-based applications. Some Drupal 7, and subsequently Islandora 7.x, modules may also employ Composer to assist with installation and module management. Composer is included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions for opening a terminal in a container to use it. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, Composer should not be run as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Composer is installed and accessible by entering composer --version , and you should see something like this in response: Composer version 1.6.3 2018-01-31 16:28:17 . Example: Islandora Multi-Importer (IMI) The Islandora Multi-Importer (https://github.com/mnylc/islandora_multi_importer) module uses Composer for installation. The remainder of this guide will demonstrate how to install and enable the Islandora Multi-Importer or IMI . The installation instructions for the IMI module tell us to do the following in the container shell: cd /var/www/html/sites/all/modules git clone https://github.com/mnylc/islandora_multi_importer cd islandora_multi_importer/ composer install If all goes as planned your container now has the Islandora_Multi-Importer installed, but not enabled. To enable the module use Drush like so: drush en islandora_multi_importer -y It's also a good idea to flush Drupal's cache after installing and enabling new modules. You can also do this using Drush like so: drush cc all Other modules which use Composer for installation can be obtained in a similar manner. Persistent Changes Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. IMI's compose specification builds all of the module's components in subdirectories below /var/www/html , and the effect is that IMI will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Installing a Drupal Module with Composer"},{"location":"appendices/installing-module-with-composer/#installing-a-module-with-composer","text":"Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Composer. Composer is a PHP package/dependency manager employed in Drupal 8 and many other PHP-based applications. Some Drupal 7, and subsequently Islandora 7.x, modules may also employ Composer to assist with installation and module management. Composer is included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions for opening a terminal in a container to use it. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, Composer should not be run as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Composer is installed and accessible by entering composer --version , and you should see something like this in response: Composer version 1.6.3 2018-01-31 16:28:17 .","title":"Installing a Module with Composer"},{"location":"appendices/installing-module-with-composer/#example-islandora-multi-importer-imi","text":"The Islandora Multi-Importer (https://github.com/mnylc/islandora_multi_importer) module uses Composer for installation. The remainder of this guide will demonstrate how to install and enable the Islandora Multi-Importer or IMI . The installation instructions for the IMI module tell us to do the following in the container shell: cd /var/www/html/sites/all/modules git clone https://github.com/mnylc/islandora_multi_importer cd islandora_multi_importer/ composer install If all goes as planned your container now has the Islandora_Multi-Importer installed, but not enabled. To enable the module use Drush like so: drush en islandora_multi_importer -y It's also a good idea to flush Drupal's cache after installing and enabling new modules. You can also do this using Drush like so: drush cc all Other modules which use Composer for installation can be obtained in a similar manner.","title":"Example: Islandora Multi-Importer (IMI)"},{"location":"appendices/installing-module-with-composer/#persistent-changes","text":"Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. IMI's compose specification builds all of the module's components in subdirectories below /var/www/html , and the effect is that IMI will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Persistent Changes"},{"location":"appendices/installing-module-with-drush/","text":"Installing a Module with Drush (and Git) Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Drush, and in some cases, Git. This technique works, in Islandora version 7.x, for most Drupal and Islandora modules. Drush , a \"Command Line Shell for Drupal\", provides convenient means of installing, configuring, and maintaining a Drupal site (like Islandora). Please see http://www.drush.org/ for much more detail regarding Drush. Git is a version control tool that I hope all readers of this document are already familiar with. If you are not, please consider studying up on it at https://git-scm.com/. Drush and Git are included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions ) to use them. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, most Drush and Git operations should not be performed as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Drush is installed and accessible by entering drush --version , and you should see something like this in response: Drush Version : 7.4.0 . Likewise, you can confirm that Git is installed and working by entering git --version , and you should see something like this in response: git version 1.9.1 . Two Kinds of Drush Module Installations There may be many kinds of modules that can be installed and configured using Drush, but the most popular are: Drupal Contributed Modules - These are modules developed specifically for Drupal and made available from a repository maintained by Drupal.org. Documentation for all such Drupal 7.x modules can be found at https://www.drupal.org/docs/7/modules. Note that all modules are version-specific, so you can find Drupal 8.x module documentation at https://www.drupal.org/docs/8/modules. Non-Contributed Modules - Modules that are not offered to, or accepted by, Drupal.org may reside in repositories maintained by the module's author and/or maintainer. Most Islandora-specific modules take this form. These two kinds of modules generally employ different techniques for installation and maintenance. One example of each is presented in the sections that follow. Example: Devel - A Drupal Contributed Module Devel is a Drupal contributed module maintained and distributed by Drupal.org. Its stated purpose, taken directly from the module's README file is: \"...contains helper functions and pages for Drupal developers and inquisitive admins...\". The installation instructions for Devel simply tell us to \"install as usual\", that is generally true of most Drupal.org contributed modules, and the process is extremely simple using Drush. From a terminal in the container shell: cd /var/www/html/web/sites/default drush dl devel drush en devel drush cc all In this command sequence, the cd /var/www/html/sites/default command sets our working directory to correspond with the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The drush dl devel command instructs our container to download, dl is Drush shorthand for 'download', the module identified as devel . Drush will automatically determine where to put the downloaded module, but it may prompt you for confirmation of location depending on your circumstances. The third command, drush en devel , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as devel . This command, as specified, must be run from a particular working directory so that Drush can determine in which Islandora Drupal site the module should be applied. Like the dl command, drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Example: Oral Histories Solution Pack - A Non-Contrib Islandora Module According to its README.md file, the Oral Histories Solution Pack \"Provides a content model for Oral Histories and a viewer for displaying timed text content (XML or WebVTT) alongside video and audio files.\" The remainder of this guide will demonstrate how to install and enable the Oral Histories Solution Pack inside your running Apache container using Git and Drush. The full installation instructions for the Oral Histories Solution Pack are relatively complex since there are a number of dependencies, and some necessary Solr configuration in order to be fully functional. Please see the README for complete details. To begin the process of downloading, installing and configuring the Oral History Solution Pack do the following at the terminal inside your container: cd /var/www/html/sites/all/modules/contrib git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git cd /var/www/html/sites/default drush en islandora_oralhistories -y drush cc all In this command sequence, the cd /var/www/html/sites/all/modules/contrib command sets our working directory to correspond with the location where we want our module to reside. The git clone... command downloads the Oral History solution pack code from its repository on GitHub. If all goes smoothly this step will create a new islandora_solution_pack_oralhistories directory. The cd /var/www/html/sites/default command sets our working directory to the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The command, drush en islandora_oralhistories -y , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as islandora_oralhistories . This command, as specified, must be run from a particular working directory so that Drush can determine in which Islandora Drupal site the module should be applied. Note that drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Other modules which use Git and Drush for installation can be obtained in a similar manner. Persistent Changes Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. Devel and Islandora_Oral_History_Solution_Pack , like most modules, build all of the module's components and dependencies in subdirectories below /var/www/html , and the effect is that these modules will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Installing a Drupal Module with Drush"},{"location":"appendices/installing-module-with-drush/#installing-a-module-with-drush-and-git","text":"Note: There is always more than one way to do things, like installing a module, with Docker. This is just one of many approaches for installing a module using Drush, and in some cases, Git. This technique works, in Islandora version 7.x, for most Drupal and Islandora modules. Drush , a \"Command Line Shell for Drupal\", provides convenient means of installing, configuring, and maintaining a Drupal site (like Islandora). Please see http://www.drush.org/ for much more detail regarding Drush. Git is a version control tool that I hope all readers of this document are already familiar with. If you are not, please consider studying up on it at https://git-scm.com/. Drush and Git are included, or 'baked in', to ISLE's Apache container image. You can open a shell inside a running ISLE Apache container ( see these instructions ) to use them. When you open a shell inside the Apache container you'll initially be logged in as 'root'; however, most Drush and Git operations should not be performed as 'root' so once the shell is open you should switch to the islandora user. Do this by entering sudo su islandora , and your prompt should change to something like this: islandora@dd9ee02aa718:/$ . You can confirm that Drush is installed and accessible by entering drush --version , and you should see something like this in response: Drush Version : 7.4.0 . Likewise, you can confirm that Git is installed and working by entering git --version , and you should see something like this in response: git version 1.9.1 .","title":"Installing a Module with Drush (and Git)"},{"location":"appendices/installing-module-with-drush/#two-kinds-of-drush-module-installations","text":"There may be many kinds of modules that can be installed and configured using Drush, but the most popular are: Drupal Contributed Modules - These are modules developed specifically for Drupal and made available from a repository maintained by Drupal.org. Documentation for all such Drupal 7.x modules can be found at https://www.drupal.org/docs/7/modules. Note that all modules are version-specific, so you can find Drupal 8.x module documentation at https://www.drupal.org/docs/8/modules. Non-Contributed Modules - Modules that are not offered to, or accepted by, Drupal.org may reside in repositories maintained by the module's author and/or maintainer. Most Islandora-specific modules take this form. These two kinds of modules generally employ different techniques for installation and maintenance. One example of each is presented in the sections that follow.","title":"Two Kinds of Drush Module Installations"},{"location":"appendices/installing-module-with-drush/#example-devel-a-drupal-contributed-module","text":"Devel is a Drupal contributed module maintained and distributed by Drupal.org. Its stated purpose, taken directly from the module's README file is: \"...contains helper functions and pages for Drupal developers and inquisitive admins...\". The installation instructions for Devel simply tell us to \"install as usual\", that is generally true of most Drupal.org contributed modules, and the process is extremely simple using Drush. From a terminal in the container shell: cd /var/www/html/web/sites/default drush dl devel drush en devel drush cc all In this command sequence, the cd /var/www/html/sites/default command sets our working directory to correspond with the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The drush dl devel command instructs our container to download, dl is Drush shorthand for 'download', the module identified as devel . Drush will automatically determine where to put the downloaded module, but it may prompt you for confirmation of location depending on your circumstances. The third command, drush en devel , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as devel . This command, as specified, must be run from a particular working directory so that Drush can determine in which Islandora Drupal site the module should be applied. Like the dl command, drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more.","title":"Example: Devel - A Drupal Contributed Module"},{"location":"appendices/installing-module-with-drush/#example-oral-histories-solution-pack-a-non-contrib-islandora-module","text":"According to its README.md file, the Oral Histories Solution Pack \"Provides a content model for Oral Histories and a viewer for displaying timed text content (XML or WebVTT) alongside video and audio files.\" The remainder of this guide will demonstrate how to install and enable the Oral Histories Solution Pack inside your running Apache container using Git and Drush. The full installation instructions for the Oral Histories Solution Pack are relatively complex since there are a number of dependencies, and some necessary Solr configuration in order to be fully functional. Please see the README for complete details. To begin the process of downloading, installing and configuring the Oral History Solution Pack do the following at the terminal inside your container: cd /var/www/html/sites/all/modules/contrib git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git cd /var/www/html/sites/default drush en islandora_oralhistories -y drush cc all In this command sequence, the cd /var/www/html/sites/all/modules/contrib command sets our working directory to correspond with the location where we want our module to reside. The git clone... command downloads the Oral History solution pack code from its repository on GitHub. If all goes smoothly this step will create a new islandora_solution_pack_oralhistories directory. The cd /var/www/html/sites/default command sets our working directory to the location of our site's settings.php file. This directory, and file, hold key information about our site, and working from this directory makes subsequent commands easier to use. The command, drush en islandora_oralhistories -y , instructs our container to 'enable', en is Drush shorthand for 'enable', the module identified as islandora_oralhistories . This command, as specified, must be run from a particular working directory so that Drush can determine in which Islandora Drupal site the module should be applied. Note that drush en may prompt you to confirm certain operations as it attempts to resolve any dependencies that the module may have. The final command, drush cc all , instructs our container to 'clear all caches', cc is Drush shorthand for 'clear cache. This command is not required, but it is highly recommended, since Drupal and Islandora typically cache a great deal of module information, and failing to clear caches may cause temporary, but unexpected results after a new module is installed. That's it. Your new module is installed and ready to be configured and used. You can visit 'https://isle.localdomain/admin/modules' in your browser to manage the module's configuration, permissions, and more. Other modules which use Git and Drush for installation can be obtained in a similar manner.","title":"Example: Oral Histories Solution Pack - A Non-Contrib Islandora Module"},{"location":"appendices/installing-module-with-drush/#persistent-changes","text":"Modules installed in this manner essentially become part of the container they're installed in. If the container is deleted the installation may not persist. However, in most ISLE configurations, like isle.localdomain, the Apache portion of the governing docker-compose.yml file reads something like this: apache: image: islandoracollabgroup/isle-apache:latest container_name: isle-apache-ld networks: isle-internal: aliases: - isle.localdomain tty: true depends_on: - mysql - fedora - solr volumes: - apache-data-ld:/var/www/html - ./data/apache/log/apache:/var/log/apache2 The first volumes definition in this portion of the file instructs Docker to map the host's apache-data-ld directory to be reflected inside the container as /var/www/html . This means that any changes made inside the container's /var/www/html directory will also persist in the host's apache-data-ld subdirectory. Devel and Islandora_Oral_History_Solution_Pack , like most modules, build all of the module's components and dependencies in subdirectories below /var/www/html , and the effect is that these modules will persist in ISLE as long as the host's apache-data-ld folder is maintained.","title":"Persistent Changes"},{"location":"appendices/open-terminal-in-running-container/","text":"Opening a Terminal/Shell Inside a Running Container At times you may find it necessary to open a terminal window or 'shell' inside a running container. In ISLE this will usually involve the 'Apache' container. In a terminal window on your host , enter docker ps to show a list of all running containers. Each container's NAME should appear in the right-most column of the output. In an isle.localdomain environment the name of the Apache container will be isle-apache-ld . In other configurations the container name may be different. Use docker exec -it isle-apache-ld bash , where 'isle-apache-ld' represents the name of the target container, to open a bash shell inside the isle-apache-ld container. No password will be required. If successful, your terminal prompt will look something like this: root@dd9ee02aa718:/# .","title":"Opening a Terminal in a Running Container"},{"location":"appendices/open-terminal-in-running-container/#opening-a-terminalshell-inside-a-running-container","text":"At times you may find it necessary to open a terminal window or 'shell' inside a running container. In ISLE this will usually involve the 'Apache' container. In a terminal window on your host , enter docker ps to show a list of all running containers. Each container's NAME should appear in the right-most column of the output. In an isle.localdomain environment the name of the Apache container will be isle-apache-ld . In other configurations the container name may be different. Use docker exec -it isle-apache-ld bash , where 'isle-apache-ld' represents the name of the target container, to open a bash shell inside the isle-apache-ld container. No password will be required. If successful, your terminal prompt will look something like this: root@dd9ee02aa718:/# .","title":"Opening a Terminal/Shell Inside a Running Container"},{"location":"appendices/redhat/","text":"The ISLE Maintainers do not recommend using Red Hat at this time for the following reason: Red Hat Enterprise Linux (RHEL) seems to not support the free Docker Community Edition (CE), although RHEL does seem to support Docker Enterprise Edition (Docker EE) although the latter must be purchased. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. Additional information: https://docs.docker.com/install/ https://www.docker.com/products/docker-engine https://www.docker.com/enterprise-edition https://docs.docker.com/engine/release-notes/ https://access.redhat.com/articles/2317361","title":"Warning about Red Hat Install"},{"location":"appendices/sample-it-department-request/","text":"Sample IT Department Request Letter Dear IT Dept, Our digital collections team will be testing a Docker implementation of the Islandora digital repository system called ISLE . We require access to a server meeting the following Hardware Requirements : Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (w/1-4 cores each) Sufficient hard drive or attached storage to hold your collection 30-50GB for the server OS and overhead 16-32 GB of RAM Our team will either need root access, or a user called \"islandora\" that has sudo privileges. We will need the above hardware so that the automated ISLE installation process can install the following Software Dependencies : Git, Docker, Docker-Compose, openssl, git, htop, ntp, curl Thank you,","title":"Sample IT Department Request Letter"},{"location":"appendices/sample-it-department-request/#sample-it-department-request-letter","text":"Dear IT Dept, Our digital collections team will be testing a Docker implementation of the Islandora digital repository system called ISLE . We require access to a server meeting the following Hardware Requirements : Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (w/1-4 cores each) Sufficient hard drive or attached storage to hold your collection 30-50GB for the server OS and overhead 16-32 GB of RAM Our team will either need root access, or a user called \"islandora\" that has sudo privileges. We will need the above hardware so that the automated ISLE installation process can install the following Software Dependencies : Git, Docker, Docker-Compose, openssl, git, htop, ntp, curl Thank you,","title":"Sample IT Department Request Letter"},{"location":"appendices/server-setups/","text":"Example Server Implementations This is a place to share details about individual institutions' ISLE implementations. Colgate University's Digital Collections Collection Size: Approx. 5 TB, over 115,000 objects. Hosted on AWS EC2 Production server: m4.xlarge instance type: 4 cores 16 GB RAM 75 GB EBS type gp2 storage for OS and docker images 8 TB EBS type st1 storage for fedorastore 300 GB EBS type gp2 storage for temporary ingest files Staging server: m4.large instance type: 2 cores 8 GB RAM 75 GB EBS type gp2 storage for OS and docker images 8 TB EBS type st1 storage for fedorastore Performance: The production environment performs adequately for public users viewing the collection. Ingest speed is acceptable, but we are only adding to the collections on a very small scale. Staging performs fine as a testing platform for ISLE updates, etc, before pushing to production, but is noticeably slower. I would not suggest m4.large for instutions planning to ingest a lot into staging after initial set-up. Amazon's newer m5.large may be better for that, but should be tested. Note: Step by step instructions for provisioning the 300 GB ingest storage in the AWS console and configuring docker to mount it for Islandora are available in this cookbook recipe. If you are using ISLE in production, please consider sharing your institution's set up to help others assess their options and plan for their own implementation. To add your ISLE information here, either issue a PR or put the information in an Issue and the documentation team will add it.","title":"Sample Server Setups"},{"location":"appendices/server-setups/#example-server-implementations","text":"This is a place to share details about individual institutions' ISLE implementations.","title":"Example Server Implementations"},{"location":"appendices/server-setups/#colgate-universitys-digital-collections","text":"Collection Size: Approx. 5 TB, over 115,000 objects. Hosted on AWS EC2 Production server: m4.xlarge instance type: 4 cores 16 GB RAM 75 GB EBS type gp2 storage for OS and docker images 8 TB EBS type st1 storage for fedorastore 300 GB EBS type gp2 storage for temporary ingest files Staging server: m4.large instance type: 2 cores 8 GB RAM 75 GB EBS type gp2 storage for OS and docker images 8 TB EBS type st1 storage for fedorastore Performance: The production environment performs adequately for public users viewing the collection. Ingest speed is acceptable, but we are only adding to the collections on a very small scale. Staging performs fine as a testing platform for ISLE updates, etc, before pushing to production, but is noticeably slower. I would not suggest m4.large for instutions planning to ingest a lot into staging after initial set-up. Amazon's newer m5.large may be better for that, but should be tested. Note: Step by step instructions for provisioning the 300 GB ingest storage in the AWS console and configuring docker to mount it for Islandora are available in this cookbook recipe. If you are using ISLE in production, please consider sharing your institution's set up to help others assess their options and plan for their own implementation. To add your ISLE information here, either issue a PR or put the information in an Issue and the documentation team will add it.","title":"Colgate University's Digital Collections"},{"location":"contributor-docs/editing-local/","text":"Overview Run the mkdocs software Edit documentation files locally Commit changes to git Push committed changes to the online ISLE github.com git repository Create pull request for review on ISLE github.com Assumptions / Prerequisites mkdocs and mkdocs-material theme are installed following the Installing Mkdocs documentation. The ISLE project directory has been cloned to the end user's personal computer in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Familiarity or comfortability with git and CLI commands. End user has a web browser opened to this URL: http://127.0.0.1:8000/ End user has a terminal open with mkdocs serve running. Create a New Git Branch As there is a review process of any new changes to the ISLE code or documentation projects by the Committers, using git pull requests are ideal to avoid issues of missing materials, inappropriately edited files or incorrect overwrites of critical data. While mkdocs serve is running in the terminal, open up a new terminal or terminal tab and cd to pathto/ISLE project directory You will now create a new git branch which will allow you to make changes without fear of losing the original code / file versions kept in main . The new branch name can be anything you like but we suggest that you use a convention that identifies you clearly e.g. githubusername-docs-fix2 or janedoe-doc-fixes1 git checkout -b githubusername-docs-fix2 Proceed to edit or create new files as necessary using a text editor of your choice. Adding New Pages If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE project directory in order for the page to show up in the documentation. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Create a new empty file in the docs/contributor-docs directory e.g. building_giant_robots.md Open the mkdocs.yml file in a text editor. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' The end user can now review the contents of this new page at http://127.0.0.1:8000/contributor-docs/building_giant_robots/ Edit the contents of building_giant_robots.md and save the file each time. The associated webpage will refresh with the new changes. Commit Changes to Git Once finished with adding all new pages and editing files, it is time to add everything to git and then push to the remote ISLE github.com repository for review by ISLE Committers. Git Status Within the open terminal, enter git status The example git status output below displays that several files have been modified (edited or changed) and that there is a new file called building_giant_robots.md has been created. git status On branch githubusername-docs-fix2 Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: docs/specifications/diagram-network.md modified: docs/glossary.md modified: mkdocs.yml Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/contributor-docs/building_giant_robots.md no changes added to commit (use \"git add\" and/or \"git commit -a\") Git Add Files You now need to add these changed / new files to git. git add docs/specifications/diagram-network.md git add docs/glossary.md git add mkdocs.yml git add docs/contributor-docs/building_giant_robots.md Git Commit with Message Now it is time to package up all these additions with a git commit command. Please ensure that you commit with a descriptive message of changes, etc. git commit -m \"Tweaked some specs in diagram-network.md. Updated the Glossary with more terms. Made new Building Giant Robots page. I love big robots. Added new files and titles to mkdocs.yml \" Git Push to ISLE GitHub Repository git push origin githubusername-docs-fix2 Create a Pull Request on ISLE github.com Repository In order for the ISLE Committers to review suggested changes a \"pull request\" will need to be created. This process is a way for Committers to see a summary of the suggested changes to be made with any helpful comments and a catalog of potential differences between the original files and the new ones. If you run into trouble, this github.com support page may be of use: https://help.github.com/articles/creating-a-pull-request/ On GitHub, navigate to the main page of the ISLE repository. In the \"Branch\" menu, choose the branch that contains your commits e.g. githubusername-docs-fix2 To the right of the Branch menu, click New pull request . Use the base branch dropdown menu to select the branch you'd like to merge your changes into ( main ), then use the compare branch drop-down menu to choose the topic branch you made your changes in.( githubusername-docs-fix2 ) base:main <--- compare:githubusername-docs-fix2 Type a title and description for your pull request. Click the green Create pull request button at the bottom. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Editing local"},{"location":"contributor-docs/editing-local/#overview","text":"Run the mkdocs software Edit documentation files locally Commit changes to git Push committed changes to the online ISLE github.com git repository Create pull request for review on ISLE github.com","title":"Overview"},{"location":"contributor-docs/editing-local/#assumptions-prerequisites","text":"mkdocs and mkdocs-material theme are installed following the Installing Mkdocs documentation. The ISLE project directory has been cloned to the end user's personal computer in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Familiarity or comfortability with git and CLI commands. End user has a web browser opened to this URL: http://127.0.0.1:8000/ End user has a terminal open with mkdocs serve running.","title":"Assumptions / Prerequisites"},{"location":"contributor-docs/editing-local/#create-a-new-git-branch","text":"As there is a review process of any new changes to the ISLE code or documentation projects by the Committers, using git pull requests are ideal to avoid issues of missing materials, inappropriately edited files or incorrect overwrites of critical data. While mkdocs serve is running in the terminal, open up a new terminal or terminal tab and cd to pathto/ISLE project directory You will now create a new git branch which will allow you to make changes without fear of losing the original code / file versions kept in main . The new branch name can be anything you like but we suggest that you use a convention that identifies you clearly e.g. githubusername-docs-fix2 or janedoe-doc-fixes1 git checkout -b githubusername-docs-fix2 Proceed to edit or create new files as necessary using a text editor of your choice.","title":"Create a New Git Branch"},{"location":"contributor-docs/editing-local/#adding-new-pages","text":"If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE project directory in order for the page to show up in the documentation. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Create a new empty file in the docs/contributor-docs directory e.g. building_giant_robots.md Open the mkdocs.yml file in a text editor. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' The end user can now review the contents of this new page at http://127.0.0.1:8000/contributor-docs/building_giant_robots/ Edit the contents of building_giant_robots.md and save the file each time. The associated webpage will refresh with the new changes.","title":"Adding New Pages"},{"location":"contributor-docs/editing-local/#commit-changes-to-git","text":"Once finished with adding all new pages and editing files, it is time to add everything to git and then push to the remote ISLE github.com repository for review by ISLE Committers.","title":"Commit Changes to Git"},{"location":"contributor-docs/editing-local/#git-status","text":"Within the open terminal, enter git status The example git status output below displays that several files have been modified (edited or changed) and that there is a new file called building_giant_robots.md has been created. git status On branch githubusername-docs-fix2 Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: docs/specifications/diagram-network.md modified: docs/glossary.md modified: mkdocs.yml Untracked files: (use \"git add <file>...\" to include in what will be committed) docs/contributor-docs/building_giant_robots.md no changes added to commit (use \"git add\" and/or \"git commit -a\")","title":"Git Status"},{"location":"contributor-docs/editing-local/#git-add-files","text":"You now need to add these changed / new files to git. git add docs/specifications/diagram-network.md git add docs/glossary.md git add mkdocs.yml git add docs/contributor-docs/building_giant_robots.md","title":"Git Add Files"},{"location":"contributor-docs/editing-local/#git-commit-with-message","text":"Now it is time to package up all these additions with a git commit command. Please ensure that you commit with a descriptive message of changes, etc. git commit -m \"Tweaked some specs in diagram-network.md. Updated the Glossary with more terms. Made new Building Giant Robots page. I love big robots. Added new files and titles to mkdocs.yml \"","title":"Git Commit with Message"},{"location":"contributor-docs/editing-local/#git-push-to-isle-github-repository","text":"git push origin githubusername-docs-fix2","title":"Git Push to ISLE GitHub Repository"},{"location":"contributor-docs/editing-local/#create-a-pull-request-on-isle-githubcom-repository","text":"In order for the ISLE Committers to review suggested changes a \"pull request\" will need to be created. This process is a way for Committers to see a summary of the suggested changes to be made with any helpful comments and a catalog of potential differences between the original files and the new ones. If you run into trouble, this github.com support page may be of use: https://help.github.com/articles/creating-a-pull-request/ On GitHub, navigate to the main page of the ISLE repository. In the \"Branch\" menu, choose the branch that contains your commits e.g. githubusername-docs-fix2 To the right of the Branch menu, click New pull request . Use the base branch dropdown menu to select the branch you'd like to merge your changes into ( main ), then use the compare branch drop-down menu to choose the topic branch you made your changes in.( githubusername-docs-fix2 ) base:main <--- compare:githubusername-docs-fix2 Type a title and description for your pull request. Click the green Create pull request button at the bottom. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Create a Pull Request on ISLE github.com Repository"},{"location":"contributor-docs/editing-online/","text":"Overview Navigate to online ISLE repository Edit existing pages Adding new pages Updating mkdocs.yml Commit changes using a new branch Create pull request for review Note: You'll need to create separate pull requests for each type of change whether editing or adding new pages with a mkdocs.yml file update. Using the online editor means you can only do one thing at a time. If you need to edit more than one file or want to create more than one new page of content, it is recommended to instead follow the steps contained within the Documentation Editing - Local Guide. Navigate to Online ISLE Repository In a web browser navigate to https://github.com/Islandora-Collaboration-Group/ISLE Edit Existing Pages Click into the docs directory and navigate to the appropriate .md file you would like to edit. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Adding New Pages Note: If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE project directory in order for the page to show up in the documentation after adding the new page. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Click into the docs/contributor-docs directory On the right hand side of the page, a navigation bar that will display Create new file | Upload files | Find File History , click the Create new file button. In the empty Name your file... field at the top of the page, enter building_giant_robots.md Enter the appropriate content to the page. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Updating mkdocs If you have added a new page to the Documentation, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE project directory in order for the page to show up in the documentation. Click into the mkdocs.yml file. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below. Commit Changes When finished editing, adding or updating, scroll down to the Commit changes section. In the first empty field, enter a short description of the file edited e.g. Update glossary.md In the second larger empty field, enter a larger description of the edits made to the file. Two to five sentences should suffice. Once finished, select the second radio button at the bottom Its label displays: Create a new branch for this commit and start a pull request Change the branch name as needed or leave as the default. Click the green Propose File Change DO NOT SELECT THE 1ST RADIO BUTTON - Commit directly to the main branch as this will cause issues though it is selected by default. Create Pull Request for Review The \"Open a pull request\" page should now appear along with text like The change you just made was written to a new branch named githubusername-docs-fix2. Create a pull request below to propose these changes. The first and second text fields may contain part of the short description. Either keep the default text or change accordingly. Click the green Create pull request button. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Editing online"},{"location":"contributor-docs/editing-online/#overview","text":"Navigate to online ISLE repository Edit existing pages Adding new pages Updating mkdocs.yml Commit changes using a new branch Create pull request for review Note: You'll need to create separate pull requests for each type of change whether editing or adding new pages with a mkdocs.yml file update. Using the online editor means you can only do one thing at a time. If you need to edit more than one file or want to create more than one new page of content, it is recommended to instead follow the steps contained within the Documentation Editing - Local Guide.","title":"Overview"},{"location":"contributor-docs/editing-online/#navigate-to-online-isle-repository","text":"In a web browser navigate to https://github.com/Islandora-Collaboration-Group/ISLE","title":"Navigate to Online ISLE Repository"},{"location":"contributor-docs/editing-online/#edit-existing-pages","text":"Click into the docs directory and navigate to the appropriate .md file you would like to edit. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Edit Existing Pages"},{"location":"contributor-docs/editing-online/#adding-new-pages","text":"Note: If you are adding new pages to the Documentation, in addition to creating the new page, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE project directory in order for the page to show up in the documentation after adding the new page. The example used below is how to create a new documentation page that will be about building giant ISLE robots with the title of \"Building Giant ISLE Robots\" and be located in the Development section. Click into the docs/contributor-docs directory On the right hand side of the page, a navigation bar that will display Create new file | Upload files | Find File History , click the Create new file button. In the empty Name your file... field at the top of the page, enter building_giant_robots.md Enter the appropriate content to the page. When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Adding New Pages"},{"location":"contributor-docs/editing-online/#updating-mkdocs","text":"If you have added a new page to the Documentation, you'll need to edit the mkdocs.yml (YAML) file at the root (base) of the ISLE project directory in order for the page to show up in the documentation. Click into the mkdocs.yml file. Once the file has been selected, you should see on the right hand side of the page, a navigation bar that will display Raw | Blame | History , computer monitor icon, a pen / pencil icon and a trashcan icon. Click the pen / pencil icon to edit the file. The page should change indicating that it can now be edited. Make the appropriate edits as needed. In order for mkdocs to understand that there is a new page and page title to display in the rendered documentation, one must use the YAML code convention (syntax) to enter. YAML Code Convention Breakdown: 'Page Title': '/section/filename.md' Within the Contributor Docs section of the open mkdocs.yml file, add this new line in the appropriate order. - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributor Docs': - 'Building Giant ISLE Robots': 'contributor-docs/building_giant_robots.md' - 'Contributing to Project': 'contributor-docs/contributing_to_project.md' - 'Documentation Overview': 'contributor-docs/overview.md' When finished and ready to \"save\" the changes, follow the instructions immediately in the Commit changes section below.","title":"Updating mkdocs"},{"location":"contributor-docs/editing-online/#commit-changes","text":"When finished editing, adding or updating, scroll down to the Commit changes section. In the first empty field, enter a short description of the file edited e.g. Update glossary.md In the second larger empty field, enter a larger description of the edits made to the file. Two to five sentences should suffice. Once finished, select the second radio button at the bottom Its label displays: Create a new branch for this commit and start a pull request Change the branch name as needed or leave as the default. Click the green Propose File Change DO NOT SELECT THE 1ST RADIO BUTTON - Commit directly to the main branch as this will cause issues though it is selected by default.","title":"Commit Changes"},{"location":"contributor-docs/editing-online/#create-pull-request-for-review","text":"The \"Open a pull request\" page should now appear along with text like The change you just made was written to a new branch named githubusername-docs-fix2. Create a pull request below to propose these changes. The first and second text fields may contain part of the short description. Either keep the default text or change accordingly. Click the green Create pull request button. This pull request should now appear in the Pull Requests section of the ISLE repository, ready for review, commentary or inclusion by the ISLE Committers.","title":"Create Pull Request for Review"},{"location":"contributor-docs/making-pr-guide/","text":"How to Submit Code/Documentation to the ISLE Project The ISLE project uses git, GitHub and Pull Requests (PRs) as part of our development and documentation processes. To submit a PR, please use the process described below. PR's that do not follow this process will not be accepted into the project. Please keep PRs small, focused and frequent. Prerequisites: You'll need a github.com account Git installed on your local development machine * CLA on file with ISLE Steps to Setup your Forked ISLE Repository Log into github.com and fork the ISLE repository into your github.com account. Navigate to https://github.com/Islandora-Collaboration-Group/ISLE and then click the \"Fork\" box (upper right corner of screen) to make a copy of this repository in your own github.com account that you can then clone down to your local development environment: Next open a terminal: $ git clone https://github.com/your-user-name/ISLE.git You will now have a local copy of the ISLE project. Got into the ISLE projects directory: $ cd ISLE Create a link back to the main ISLE code base by adding a remote reference: $ git remote add upstream https://github.com/Islandora-Collaboration-Group/ISLE.git Your setup should now look like this: $ git remote -v origin https://github.com/your-user-name/ISLE.git (fetch) origin https://github.com/your-user-name/ISLE.git (push) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) 'origin' and 'upstream' are arbitrary, but common names. They can be anything you want. For this document, 'origin' will mean your forked repository and 'upstream' will be the main ISLE repository. It's good to create a consistent paradigm for yourself when working with these names. Now you're ready to collaborate on the project! Staying Up to Date It's always good to make sure you're forked repository is up to date with the main ISLE repository. If you just set up your repository (via the fork and clone directions above) your repository will already be up to date and you don't need to do this. When you've had a local repository setup and haven't worked in it for a while, then it's good to follow these instructions below to make sure you have the latest changes before you start your work. First, make sure you're on your main branch in your fork: $ git checkout main $ git status # On branch main nothing to commit (working directory clean) Ensure that your git remote information is setup correctly: $ git remote -v origin https://github.com/your-user-name/ISLE.git (fetch) origin https://github.com/your-user-name/ISLE.git (push) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) It never hurts to double check that information. Now do this to get any recent updates to the main ISLE repository: $ git pull upstream main Your local repository is now in sync with the main (remote) ISLE one. Push that up to your GitHub fork: $ git push origin main Enumerating objects: 40, done. Counting objects: 100% (40/40), done. Delta compression using up to 4 threads Compressing objects: 100% (35/35), done. Writing objects: 100% (37/37), 10.65 KiB | 5.33 MiB/s, done. Total 37 (delta 19), reused 0 (delta 0) remote: Resolving deltas: 100% (19/19), completed with 3 local objects. To https://github.com/your-user-name/ISLE.git afe1a83..48ade81 main -> main Now your fork is up to date with any changes in the main ISLE repository. If you look at the git log for your repository, or up on github.com, you'll see that your forked repository commit log information is inline with the main ISLE repository. Submitting Code First make sure your up to date by going through Staying Up to Date section above. For many reasons it's good practice to fix issues and add features on a branch within your repository. In your forked repository, you can create and switch to a new branch with this command: $ git checkout -b issue_1234_fix Switched to a new branch issue_1234_fix That created the branch and checked you out into it, which you can verify through a git status: $ git status On branch issue_1234_fix nothing to commit, working tree clean Complete your work on the branch and when done, add it to your fork on GitHub. If you are working on a change to an ISLE docker container, please read the Changing a Docker Container section below on additional steps to do when submitting a PR. To do this, first commit your changes on that branch: $ git add git add docker-compose.yml $ git commit -m \"Putting MySQL logs into a volume to avoid issues with permissions and the container crashing\" If you do not include -m you will be taken into a text editor where you can craft a message there. Simply write your message, save and then exit in the editor. That will commit the change. Please make sure the message in the commit is clear and descriptive about the change. `This makes it easier for understandability into the future. Your work is now committed locally. Document your work by editing the appropriate .md files in the /docs directory. If the new code changes how ISLE is installed or managed, you must include updates to the documentation to ensure it continues to be accurate. This includes updating dependencies, version number changes, etc. Once the documentation files are updated, commit them to the branch in their own commit, rather than with the code changes: $ git add docs/migrate/install-migration.md $ git commit -m \"Updated instructions for editing files\" If your changes do not require any updates to documentation, please indicate so in the comment when you submit your PR request (below). The next step is to make sure your branch is up to date with any changes that happened while you were making your changes. $ git checkout main Switched to the 'main' branch Next, pull any new updates from upstream/main and merge onto your local main branch. This helps avoid/resolve conflicts when you create your Pull Request. $ git pull upstream main From https://github.com/Islandora-Collaboration-Group/ISLE * branch main -> FETCH_HEAD Already up to date. $ git push origin main Now switch to your branch that contains your work: $ git checkout issue_1234_fix Switched to branch 'issue_1234_fix' Bring any changes to the main branch into your branch: $ git rebase origin/main First, rewinding head to replay your work on top of it... Fast-forwarded main to upstream/main. Rebase , like pull, is another way to integrate changes from one branch to another. Rebasing is a common way to integrate upstream changes into your local repository. Rebasing is like saying, \"I want to base my changes on what everybody has already done.\" A Git rebase will take the work on the branch you specify and apply them over the branch you're currently checked out on. So the above command will take what's new on origin/main and bring that into your currently checked out branch (origin/issue_1234_fix). This brings your branch up to date with anything new that happened on origin/main while you were making you're changes. This is important because it helps resolve any conflicts that might have arisen while you were working on your changes. For example, if another person submitted a Pull Request that was accepted while you were working on your branch, this will bring in their changes to your branch. Then when you create your Pull Request for this branch, you are up to date with whatever changes happened in the upstream repository. If two people make a change on the same piece of code or documentation it's known as a conflict and this step will give you the opportunity to sort out the conflict. Now you're ready to push your local branch up to your fork of ISLE on github.com: $ git push origin issue_1234_fix In a browser, navigate to your fork of ISLE in github.com. Across the top it will ask if you want to make a PR on the main ISLE repository, based on your most recent changes. If you're ready, then start the PR by clicking on \"Compare & pull request\". You'll be taken to a screen that looks like this: In the banner above, the \"base repository\" should be the repository you want the changes to end up in. In this case it's: \"Islandora-Collaboration-Group/ISLE\" on branch \"main\". The \"head repository\" should be your repository and branch information containing the new changes. Most of the time GitHub fills this in correctly for you and you just need to double check it. Also, it should say Able to merge , which means there are no conflicts between your branch and the branch you are trying to merge your changes into. If it doesn't say that, then you'll need to fix the conflicts on your branch before creating the PR. See Staying Up to Date section above for how to get the latest changes to see what the conflicts are. The name and description in the PR will be initially populated from the text in your commit comment, so edit those fields as necessary to make sure someone can understand what this PR is about and what issue it's fixing. Generally it's good to add more information here about what you changed and a good way to test it, so whoever reviews it knows what to do. When ready, click Create pull request . From there, a committer will review your PR and ask questions or give feedback about it. If the feedback you get requests changes, you'll need to make the updates on your branch (locally), then push them back up to your fork again - like above. You don't need to re-submit the PR. GitHub will notice you changed the branch and will show those changes in the PR automatically. Changing a Docker Container One more tool you'll need if you're working with containers is an account on DockerHub.com. Accounts are free and you can sign up for one here: https://hub.docker.com/signup. If you're only making changes to the main ISLE repository, you do not need to do this. While testing your change locally, you should have created a docker image of the new container. By making that container available via your own space on Dockerhub.com you'll enable whomever is testing the PR to use that image. A docker push looks like this: $ docker push your-user-name/isle-fedora:issue_23_fix Please provide a link to the container location on Dockerhub.com in the PR. It will make testing of the PR both easier and quicker.","title":"How to Submit Code/Documentation to the ISLE Project"},{"location":"contributor-docs/making-pr-guide/#how-to-submit-codedocumentation-to-the-isle-project","text":"The ISLE project uses git, GitHub and Pull Requests (PRs) as part of our development and documentation processes. To submit a PR, please use the process described below. PR's that do not follow this process will not be accepted into the project. Please keep PRs small, focused and frequent. Prerequisites: You'll need a github.com account Git installed on your local development machine * CLA on file with ISLE","title":"How to Submit Code/Documentation to the ISLE Project"},{"location":"contributor-docs/making-pr-guide/#steps-to-setup-your-forked-isle-repository","text":"Log into github.com and fork the ISLE repository into your github.com account. Navigate to https://github.com/Islandora-Collaboration-Group/ISLE and then click the \"Fork\" box (upper right corner of screen) to make a copy of this repository in your own github.com account that you can then clone down to your local development environment: Next open a terminal: $ git clone https://github.com/your-user-name/ISLE.git You will now have a local copy of the ISLE project. Got into the ISLE projects directory: $ cd ISLE Create a link back to the main ISLE code base by adding a remote reference: $ git remote add upstream https://github.com/Islandora-Collaboration-Group/ISLE.git Your setup should now look like this: $ git remote -v origin https://github.com/your-user-name/ISLE.git (fetch) origin https://github.com/your-user-name/ISLE.git (push) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) 'origin' and 'upstream' are arbitrary, but common names. They can be anything you want. For this document, 'origin' will mean your forked repository and 'upstream' will be the main ISLE repository. It's good to create a consistent paradigm for yourself when working with these names. Now you're ready to collaborate on the project!","title":"Steps to Setup your Forked ISLE Repository"},{"location":"contributor-docs/making-pr-guide/#staying-up-to-date","text":"It's always good to make sure you're forked repository is up to date with the main ISLE repository. If you just set up your repository (via the fork and clone directions above) your repository will already be up to date and you don't need to do this. When you've had a local repository setup and haven't worked in it for a while, then it's good to follow these instructions below to make sure you have the latest changes before you start your work. First, make sure you're on your main branch in your fork: $ git checkout main $ git status # On branch main nothing to commit (working directory clean) Ensure that your git remote information is setup correctly: $ git remote -v origin https://github.com/your-user-name/ISLE.git (fetch) origin https://github.com/your-user-name/ISLE.git (push) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) It never hurts to double check that information. Now do this to get any recent updates to the main ISLE repository: $ git pull upstream main Your local repository is now in sync with the main (remote) ISLE one. Push that up to your GitHub fork: $ git push origin main Enumerating objects: 40, done. Counting objects: 100% (40/40), done. Delta compression using up to 4 threads Compressing objects: 100% (35/35), done. Writing objects: 100% (37/37), 10.65 KiB | 5.33 MiB/s, done. Total 37 (delta 19), reused 0 (delta 0) remote: Resolving deltas: 100% (19/19), completed with 3 local objects. To https://github.com/your-user-name/ISLE.git afe1a83..48ade81 main -> main Now your fork is up to date with any changes in the main ISLE repository. If you look at the git log for your repository, or up on github.com, you'll see that your forked repository commit log information is inline with the main ISLE repository.","title":"Staying Up to Date"},{"location":"contributor-docs/making-pr-guide/#submitting-code","text":"First make sure your up to date by going through Staying Up to Date section above. For many reasons it's good practice to fix issues and add features on a branch within your repository. In your forked repository, you can create and switch to a new branch with this command: $ git checkout -b issue_1234_fix Switched to a new branch issue_1234_fix That created the branch and checked you out into it, which you can verify through a git status: $ git status On branch issue_1234_fix nothing to commit, working tree clean Complete your work on the branch and when done, add it to your fork on GitHub. If you are working on a change to an ISLE docker container, please read the Changing a Docker Container section below on additional steps to do when submitting a PR. To do this, first commit your changes on that branch: $ git add git add docker-compose.yml $ git commit -m \"Putting MySQL logs into a volume to avoid issues with permissions and the container crashing\" If you do not include -m you will be taken into a text editor where you can craft a message there. Simply write your message, save and then exit in the editor. That will commit the change. Please make sure the message in the commit is clear and descriptive about the change. `This makes it easier for understandability into the future. Your work is now committed locally. Document your work by editing the appropriate .md files in the /docs directory. If the new code changes how ISLE is installed or managed, you must include updates to the documentation to ensure it continues to be accurate. This includes updating dependencies, version number changes, etc. Once the documentation files are updated, commit them to the branch in their own commit, rather than with the code changes: $ git add docs/migrate/install-migration.md $ git commit -m \"Updated instructions for editing files\" If your changes do not require any updates to documentation, please indicate so in the comment when you submit your PR request (below). The next step is to make sure your branch is up to date with any changes that happened while you were making your changes. $ git checkout main Switched to the 'main' branch Next, pull any new updates from upstream/main and merge onto your local main branch. This helps avoid/resolve conflicts when you create your Pull Request. $ git pull upstream main From https://github.com/Islandora-Collaboration-Group/ISLE * branch main -> FETCH_HEAD Already up to date. $ git push origin main Now switch to your branch that contains your work: $ git checkout issue_1234_fix Switched to branch 'issue_1234_fix' Bring any changes to the main branch into your branch: $ git rebase origin/main First, rewinding head to replay your work on top of it... Fast-forwarded main to upstream/main. Rebase , like pull, is another way to integrate changes from one branch to another. Rebasing is a common way to integrate upstream changes into your local repository. Rebasing is like saying, \"I want to base my changes on what everybody has already done.\" A Git rebase will take the work on the branch you specify and apply them over the branch you're currently checked out on. So the above command will take what's new on origin/main and bring that into your currently checked out branch (origin/issue_1234_fix). This brings your branch up to date with anything new that happened on origin/main while you were making you're changes. This is important because it helps resolve any conflicts that might have arisen while you were working on your changes. For example, if another person submitted a Pull Request that was accepted while you were working on your branch, this will bring in their changes to your branch. Then when you create your Pull Request for this branch, you are up to date with whatever changes happened in the upstream repository. If two people make a change on the same piece of code or documentation it's known as a conflict and this step will give you the opportunity to sort out the conflict. Now you're ready to push your local branch up to your fork of ISLE on github.com: $ git push origin issue_1234_fix In a browser, navigate to your fork of ISLE in github.com. Across the top it will ask if you want to make a PR on the main ISLE repository, based on your most recent changes. If you're ready, then start the PR by clicking on \"Compare & pull request\". You'll be taken to a screen that looks like this: In the banner above, the \"base repository\" should be the repository you want the changes to end up in. In this case it's: \"Islandora-Collaboration-Group/ISLE\" on branch \"main\". The \"head repository\" should be your repository and branch information containing the new changes. Most of the time GitHub fills this in correctly for you and you just need to double check it. Also, it should say Able to merge , which means there are no conflicts between your branch and the branch you are trying to merge your changes into. If it doesn't say that, then you'll need to fix the conflicts on your branch before creating the PR. See Staying Up to Date section above for how to get the latest changes to see what the conflicts are. The name and description in the PR will be initially populated from the text in your commit comment, so edit those fields as necessary to make sure someone can understand what this PR is about and what issue it's fixing. Generally it's good to add more information here about what you changed and a good way to test it, so whoever reviews it knows what to do. When ready, click Create pull request . From there, a committer will review your PR and ask questions or give feedback about it. If the feedback you get requests changes, you'll need to make the updates on your branch (locally), then push them back up to your fork again - like above. You don't need to re-submit the PR. GitHub will notice you changed the branch and will show those changes in the PR automatically.","title":"Submitting Code"},{"location":"contributor-docs/making-pr-guide/#changing-a-docker-container","text":"One more tool you'll need if you're working with containers is an account on DockerHub.com. Accounts are free and you can sign up for one here: https://hub.docker.com/signup. If you're only making changes to the main ISLE repository, you do not need to do this. While testing your change locally, you should have created a docker image of the new container. By making that container available via your own space on Dockerhub.com you'll enable whomever is testing the PR to use that image. A docker push looks like this: $ docker push your-user-name/isle-fedora:issue_23_fix Please provide a link to the container location on Dockerhub.com in the PR. It will make testing of the PR both easier and quicker.","title":"Changing a Docker Container"},{"location":"contributor-docs/mkdocs/","text":"Documentation: MkDocs Assumptions / Prerequisites Python 2.7+ or higher is installed on the end user's personal computer The ISLE project directory has been cloned to the end user's personal computer in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Familiarity or comfortability with git and CLI commands. Step 1. Install mkdocs Please follow the instructions found here: http://www.mkdocs.org/#installation Mac/Unix: sudo -H pip install mkdocs Windows: pip install mkdocs (PowerShell: Run as administrator) Step 2. Install the mkdocs-material Theme The ISLE Documentation Theme can be found here: https://github.com/squidfunk/mkdocs-material Mac/Unix: sudo -H pip install mkdocs-material Windows OS: pip install mkdocs-material (PowerShell: Run as administrator) Step 3. Run the mkdocs Software Open a terminal and cd to pathto/ISLE project directory mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 180310 15:50:39 server:283] Serving on http://127.0.0.1:8000 [I 180310 15:50:39 handlers:60] Start watching changes [I 180310 15:50:39 handlers:62] Start detecting changes [I 180310 15:50:42 handlers:133] Browser Connected: http://127.0.0.1:8000/ Open up a browser and navigate to http://127.0.0.1:8000/ It is critical for this terminal to keep running as mkdocs will report file changes and any potential issues. To review changes in real time via the browser Use the terminal output for debugging issues or missing files, links, etc. To stop mkdocs , click the Cntrl and c key at the same time. (Cntrl-C) How to Upgrade mkdocs version MkDocs Release Notes To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version","title":"Docs: MkDocs"},{"location":"contributor-docs/mkdocs/#documentation-mkdocs","text":"","title":"Documentation: MkDocs"},{"location":"contributor-docs/mkdocs/#assumptions-prerequisites","text":"Python 2.7+ or higher is installed on the end user's personal computer The ISLE project directory has been cloned to the end user's personal computer in an appropriate Code or Project Directory. git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Familiarity or comfortability with git and CLI commands.","title":"Assumptions / Prerequisites"},{"location":"contributor-docs/mkdocs/#step-1-install-mkdocs","text":"Please follow the instructions found here: http://www.mkdocs.org/#installation Mac/Unix: sudo -H pip install mkdocs Windows: pip install mkdocs (PowerShell: Run as administrator)","title":"Step 1. Install mkdocs"},{"location":"contributor-docs/mkdocs/#step-2-install-the-mkdocs-material-theme","text":"The ISLE Documentation Theme can be found here: https://github.com/squidfunk/mkdocs-material Mac/Unix: sudo -H pip install mkdocs-material Windows OS: pip install mkdocs-material (PowerShell: Run as administrator)","title":"Step 2. Install the mkdocs-material Theme"},{"location":"contributor-docs/mkdocs/#step-3-run-the-mkdocs-software","text":"Open a terminal and cd to pathto/ISLE project directory mkdocs serve INFO - Building documentation... INFO - Cleaning site directory [I 180310 15:50:39 server:283] Serving on http://127.0.0.1:8000 [I 180310 15:50:39 handlers:60] Start watching changes [I 180310 15:50:39 handlers:62] Start detecting changes [I 180310 15:50:42 handlers:133] Browser Connected: http://127.0.0.1:8000/ Open up a browser and navigate to http://127.0.0.1:8000/ It is critical for this terminal to keep running as mkdocs will report file changes and any potential issues. To review changes in real time via the browser Use the terminal output for debugging issues or missing files, links, etc. To stop mkdocs , click the Cntrl and c key at the same time. (Cntrl-C)","title":"Step 3. Run the mkdocs Software"},{"location":"contributor-docs/mkdocs/#how-to-upgrade-mkdocs-version","text":"MkDocs Release Notes To upgrade MkDocs to the latest version, use pip: pip install -U mkdocs You can determine your currently installed version using mkdocs --version","title":"How to Upgrade mkdocs version"},{"location":"contributor-docs/overview/","text":"The ISLE project uses mkdocs a static site generator designed for building project documentation. Documentation source files are written in Markdown , and configured with a single YAML configuration file. The mkdocs software then creates static HTML pages for hosting on GitHub Pages. This software can also be used locally on an end user's personal computer for review and editing of materials. Please note there are two key elements to the ISLE Documentation. ISLE Documentation github.com Pages (static HTML): Used by end users for Documentation Clean, crisp nicely formatted hosted ISLE Documentation with navigation. https://islandora-collaboration-group.github.io/ISLE/ ISLE Documentation github.com Repository (Markdown files): Used by ISLE Committers to create and manage ISLE Documentation Markdown files ( .md ) stored in an online git repository that when rendered by the mkdocs software produce the above mentioned nicely formatted static HTML pages. https://github.com/Islandora-Collaboration-Group/ISLE Please refer to the Documentation section of the Glossary if terms used are not clear. A very handy primer for writing documentation using MkDocs has been written here: http://www.mkdocs.org/user-guide/writing-your-docs/ Project Directory Structure \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 appendices \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 contributor-docs \u2502 \u251c\u2500\u2500 cookbook-recipes \u2502 \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 migrate \u2502 \u251c\u2500\u2500 release-notes \u2502 \u251c\u2500\u2500 specifications \u2502 \u251c\u2500\u2500 update \u2502 \u251c\u2500\u2500 extra.css \u2502 \u251c\u2500\u2500 extra.js \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 /.aspell.en.pws \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md Directory or file Description README.md Description of the documentation project contents and how to use them docs where all documentation sections and topical pages are kept about-isle.md Description of the ISLE project, its contributors and this documentation repository assets Image or logo files used in documentation glossary.md A list of terms used in documentation index.md The homepage (first page of the documentation mkdocs.yml YAML file that acts as the section and page directory Sections and Pages Within the docs directory, there are 6 major topical sections. All sections are have numbered prefixes e.g. 01_ , 02_ to indicate order of documentation progression or narrative. Sections contain relevant topics and pages. All pages have relevant prefixes to their sections. Page file names may differ from their Page titles in the mkdocs.yml file. All topic of the page short and concise to one or two keywords Please keep all filenames lowercase Please ensure that all files are Markdown ( .md ) files otherwise the documentation system will fail.","title":"Overview"},{"location":"contributor-docs/overview/#project-directory-structure","text":"\u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 about \u2502 \u251c\u2500\u2500 appendices \u2502 \u251c\u2500\u2500 assets \u2502 \u251c\u2500\u2500 contributor-docs \u2502 \u251c\u2500\u2500 cookbook-recipes \u2502 \u251c\u2500\u2500 install \u2502 \u251c\u2500\u2500 migrate \u2502 \u251c\u2500\u2500 release-notes \u2502 \u251c\u2500\u2500 specifications \u2502 \u251c\u2500\u2500 update \u2502 \u251c\u2500\u2500 extra.css \u2502 \u251c\u2500\u2500 extra.js \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 /.aspell.en.pws \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 README.md Directory or file Description README.md Description of the documentation project contents and how to use them docs where all documentation sections and topical pages are kept about-isle.md Description of the ISLE project, its contributors and this documentation repository assets Image or logo files used in documentation glossary.md A list of terms used in documentation index.md The homepage (first page of the documentation mkdocs.yml YAML file that acts as the section and page directory","title":"Project Directory Structure"},{"location":"contributor-docs/overview/#sections-and-pages","text":"Within the docs directory, there are 6 major topical sections. All sections are have numbered prefixes e.g. 01_ , 02_ to indicate order of documentation progression or narrative. Sections contain relevant topics and pages. All pages have relevant prefixes to their sections. Page file names may differ from their Page titles in the mkdocs.yml file. All topic of the page short and concise to one or two keywords Please keep all filenames lowercase Please ensure that all files are Markdown ( .md ) files otherwise the documentation system will fail.","title":"Sections and Pages"},{"location":"contributor-docs/policies/","text":"This page left intentionally blank, pending full community documentation for this process.","title":"Policies"},{"location":"contributor-docs/release-process/","text":"ISLE Release Process Please see the ISLE Release Process document for more details.","title":"Release Process"},{"location":"contributor-docs/release-process/#isle-release-process","text":"Please see the ISLE Release Process document for more details.","title":"ISLE Release Process"},{"location":"contributor-docs/spell-checker/","text":"How to Spell-Check the Documentation Installing Aspell GNU Aspell is available in the default repositories of most Linux and Unix distributions, so installation should be easy. To install Aspell on Unix/Linux systems use a package manager on your OS. For example... Ubuntu * apt-get install aspell OS X * Using Homebrew * brew install aspell Setting up Aspell \"word list\" for Islandora & ISLE Check if you already have an existing Aspell \"word list\" called \".aspell.en.pws\" in your home directory. Note: that this file starts with a \"period\" and my be hidden by default in your OS. Back up existing \"~/.aspell.en.pws\" file if you want to preserve data, or skip this step if you are OK with overwriting existing data. Go to the ISLE documentation repository. Copy the current Aspell \"word list\" (.aspell.en.pws) that was created for the ISLE/Islandora project from the docs directory into your home directory. Note: Make sure to back up any existing \".aspell.en.pws\" before copying if you want to avoid losing your previous word list data. Running Aspell Manually running Aspell on a single file aspell check --dont-backup example.md Batch running Aspell on all .md files for f in $(find . -iname '*.md'); do aspell check --dont-backup $f; done; Verifying changes Since we are using the Aspell --dont-backup flag, Aspell will make changes to the files themselves. We can then use git status and git diff file_name to verify what was changed by Aspell before committing changes back to the repository. Interactive commands Common interactive commands used: i = Ignore a word. I = Ignore all occurrences of a word in the current file. a = add word to Aspell \"word list\" (~/.aspell.en.pws). 1 to 10 = Used to select a suggested word to replace selected word. Updating Aspell \"word list\" after checking spellings Copy the existing \"~/.aspell.en.pws\" file in your home directory to the ISLE documentation repository. Commit the change(s) to the Aspell word list file. Submit a pull request with your changes to be considered by the project committers.","title":"Docs: Spell Checker"},{"location":"contributor-docs/spell-checker/#how-to-spell-check-the-documentation","text":"","title":"How to Spell-Check the Documentation"},{"location":"contributor-docs/spell-checker/#installing-aspell","text":"GNU Aspell is available in the default repositories of most Linux and Unix distributions, so installation should be easy. To install Aspell on Unix/Linux systems use a package manager on your OS. For example... Ubuntu * apt-get install aspell OS X * Using Homebrew * brew install aspell","title":"Installing Aspell"},{"location":"contributor-docs/spell-checker/#setting-up-aspell-word-list-for-islandora-isle","text":"Check if you already have an existing Aspell \"word list\" called \".aspell.en.pws\" in your home directory. Note: that this file starts with a \"period\" and my be hidden by default in your OS. Back up existing \"~/.aspell.en.pws\" file if you want to preserve data, or skip this step if you are OK with overwriting existing data. Go to the ISLE documentation repository. Copy the current Aspell \"word list\" (.aspell.en.pws) that was created for the ISLE/Islandora project from the docs directory into your home directory. Note: Make sure to back up any existing \".aspell.en.pws\" before copying if you want to avoid losing your previous word list data.","title":"Setting up Aspell \"word list\" for Islandora &amp; ISLE"},{"location":"contributor-docs/spell-checker/#running-aspell","text":"","title":"Running Aspell"},{"location":"contributor-docs/spell-checker/#manually-running-aspell-on-a-single-file","text":"aspell check --dont-backup example.md","title":"Manually running Aspell on a single file"},{"location":"contributor-docs/spell-checker/#batch-running-aspell-on-all-md-files","text":"for f in $(find . -iname '*.md'); do aspell check --dont-backup $f; done;","title":"Batch running Aspell on all .md files"},{"location":"contributor-docs/spell-checker/#verifying-changes","text":"Since we are using the Aspell --dont-backup flag, Aspell will make changes to the files themselves. We can then use git status and git diff file_name to verify what was changed by Aspell before committing changes back to the repository.","title":"Verifying changes"},{"location":"contributor-docs/spell-checker/#interactive-commands","text":"Common interactive commands used: i = Ignore a word. I = Ignore all occurrences of a word in the current file. a = add word to Aspell \"word list\" (~/.aspell.en.pws). 1 to 10 = Used to select a suggested word to replace selected word.","title":"Interactive commands"},{"location":"contributor-docs/spell-checker/#updating-aspell-word-list-after-checking-spellings","text":"Copy the existing \"~/.aspell.en.pws\" file in your home directory to the ISLE documentation repository. Commit the change(s) to the Aspell word list file. Submit a pull request with your changes to be considered by the project committers.","title":"Updating Aspell \"word list\" after checking spellings"},{"location":"contributor-docs/style-guide/","text":"ISLE Documentation: Style Guide MkDocs Configurations Site Theme: MdDocs Themes CSS Overrides: The extra.css file overrides some basic CSS styles. JavaScript Overrides: The extra.js file (could) override some basic JS styles. Files Files use dashes, not underscores, and are lowercase. Example: host-hardware-requirements.md URLs Hyperlinks use the title of their destination page as the text of the URL. Example: Hardware Requirements Tables Sections within a section that is specific to a certain type of circumstance should be put in a table: Example Subheader Instructions here: - We use this dash since mkdocs cannot accommodate true bullets inside tables. - Another dash and another line. Headers: Follow the APA Style Guide for Capitalization of All Important Words. Solution: Sublime Text 3, install and use this package: Smart Title Case.sublime-package Example: H1: Page Title H2: Main Subheaders H3: Copy Production Data to Your Local Bullets and Indentations Example: Mkdocs is finicky and requires double indentations to create properly indented sub-bullets. Item A Item B Item C Terms We Use allowlist/denylist ( we avoid using \"whitelist\" and \"blacklist\" due to stigma and racial stereotyping surrounding those terms ) personal computer ( we use a generic term and NOT specific variants like: laptop, workstation, desktop computer, or tablet, etc.) repository (not \"repo\") end users (not \"endusers\") Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Staging ISLE Installation: New Site Staging ISLE Installation: Migrate Existing Islandora Site Production ISLE Installation: New Site Production ISLE Installation: Migrate Existing Islandora Site Update ISLE","title":"Docs: Style Guide"},{"location":"contributor-docs/style-guide/#isle-documentation-style-guide","text":"","title":"ISLE Documentation: Style Guide"},{"location":"contributor-docs/style-guide/#mkdocs-configurations","text":"Site Theme: MdDocs Themes CSS Overrides: The extra.css file overrides some basic CSS styles. JavaScript Overrides: The extra.js file (could) override some basic JS styles.","title":"MkDocs Configurations"},{"location":"contributor-docs/style-guide/#files","text":"Files use dashes, not underscores, and are lowercase. Example: host-hardware-requirements.md","title":"Files"},{"location":"contributor-docs/style-guide/#urls","text":"Hyperlinks use the title of their destination page as the text of the URL. Example: Hardware Requirements","title":"URLs"},{"location":"contributor-docs/style-guide/#tables","text":"Sections within a section that is specific to a certain type of circumstance should be put in a table: Example Subheader Instructions here: - We use this dash since mkdocs cannot accommodate true bullets inside tables. - Another dash and another line.","title":"Tables"},{"location":"contributor-docs/style-guide/#headers-follow-the-apa-style-guide-for-capitalization-of-all-important-words","text":"Solution: Sublime Text 3, install and use this package: Smart Title Case.sublime-package","title":"Headers: Follow the APA Style Guide for Capitalization of All Important Words."},{"location":"contributor-docs/style-guide/#example","text":"H1: Page Title H2: Main Subheaders H3: Copy Production Data to Your Local","title":"Example:"},{"location":"contributor-docs/style-guide/#bullets-and-indentations","text":"","title":"Bullets and Indentations"},{"location":"contributor-docs/style-guide/#example_1","text":"Mkdocs is finicky and requires double indentations to create properly indented sub-bullets. Item A Item B Item C","title":"Example:"},{"location":"contributor-docs/style-guide/#terms-we-use","text":"allowlist/denylist ( we avoid using \"whitelist\" and \"blacklist\" due to stigma and racial stereotyping surrounding those terms ) personal computer ( we use a generic term and NOT specific variants like: laptop, workstation, desktop computer, or tablet, etc.) repository (not \"repo\") end users (not \"endusers\") Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Staging ISLE Installation: New Site Staging ISLE Installation: Migrate Existing Islandora Site Production ISLE Installation: New Site Production ISLE Installation: Migrate Existing Islandora Site Update ISLE","title":"Terms We Use"},{"location":"contributor-docs/testing-guide/","text":"The ISLE project is seeking volunteers to test our next Release Candidate. This includes testing the following scenarios: Installing a remote server ISLE Installation on Ubuntu 18.04 Installing a remote server ISLE Installation on CentOS 7.x Updating an existing ISLE site to the latest Release Candidate Installing a Demo and Local version of ISLE on Windows 10 using Docker Installing a Demo and Local version of ISLE on Mac OSX High Sierra using Docker If you want to be involved as a tester, please see the following documents: ISLE 1.1 RC Testing Instructions and Details ISLE 1.1 RC Testing Matrix","title":"Testing Guide"},{"location":"cookbook-recipes/boot-from-external-drive/","text":"How to Boot From External Drive for New Local Installation (by Lynna Jackson, Williams College) Hardware In all cases it is best to use the fastest external drives you can get. I use Samsung T3 - 256 GB SSD drives or the newer Samsung T5 drives Instructions These drives have the read/write speeds that a modern Operating System expects. Install Linux on an external drive Once you install and boot linux on an external drive, it will be tied to that hardware and isn't \"portable\" to other hardware the way windows and mac can be. It is perhaps possible to install/preload the need boot drivers for other hardware but I haven't experimented with that yet. Install Windows To Go on an external disk Install Mac on an external drive... There are just about a zillion sites on the inter-webs that describe how to create a Mac external boot drive! Notes When attempting to boot to an external drive from a Mac: Restart while holding down steady the \"Option\" key When attempting to boot to an external drive on a windows computer: Restart and press multiple times the F12 key Both of these should bring up the \"Boot\" menu with a list of drives the the firmware of the computer \"thinks\" are bootable on that system. This should get people started. Any additional questions please point them my way.","title":"How to Boot From External Drive"},{"location":"cookbook-recipes/boot-from-external-drive/#how-to-boot-from-external-drive-for-new-local-installation","text":"(by Lynna Jackson, Williams College)","title":"How to Boot From External Drive for New Local Installation"},{"location":"cookbook-recipes/boot-from-external-drive/#hardware","text":"In all cases it is best to use the fastest external drives you can get. I use Samsung T3 - 256 GB SSD drives or the newer Samsung T5 drives","title":"Hardware"},{"location":"cookbook-recipes/boot-from-external-drive/#instructions","text":"These drives have the read/write speeds that a modern Operating System expects. Install Linux on an external drive Once you install and boot linux on an external drive, it will be tied to that hardware and isn't \"portable\" to other hardware the way windows and mac can be. It is perhaps possible to install/preload the need boot drivers for other hardware but I haven't experimented with that yet. Install Windows To Go on an external disk Install Mac on an external drive... There are just about a zillion sites on the inter-webs that describe how to create a Mac external boot drive!","title":"Instructions"},{"location":"cookbook-recipes/boot-from-external-drive/#notes","text":"When attempting to boot to an external drive from a Mac: Restart while holding down steady the \"Option\" key When attempting to boot to an external drive on a windows computer: Restart and press multiple times the F12 key Both of these should bring up the \"Boot\" menu with a list of drives the the firmware of the computer \"thinks\" are bootable on that system. This should get people started. Any additional questions please point them my way.","title":"Notes"},{"location":"cookbook-recipes/example-aws-configuration/","text":"Example AWS configuration This is the current (as of October 2019) configuration used by Colgate University on AWS. It's purpose is to provide one example of a working ISLE environment, or as a starting point for institutions with similar needs. Overview Colgate University Libraries' Digital Collections currently holds over 115000 individual objects/pages. The collection uses just under 5 Tb of storage, which includes high resolution TIFFs for the majority of the objects. AWS Configuration Production: m4.xlarge EC2 Reserved Instance Note : We have a 3 year contract for the m4.xlarge. Amazon offers newer m5 instances for this tier which would be preferred. 75 GB EBS storage, type gp2, for the operating system, docker images, etc. 8 TB EBS storage, type st1, for the Fedora datastore. This is where all digital objects, derivatives, and metadata are stored. 300 GB EBS storage, type gp2, used as a temporary holding location for objects to be ingested. After successful ingest, the objects are deleted from this volume. Staging: Staging differs from Production in 2 ways: m4.large instance rather than xlarge, as performance is less of a concern on staging. The system works, but can be sluggish compared to production. No 300 GB holding location permanently attached. This can be added fairly easily if a need to test a large ingest arose (see below). Rather than a separate 300 EBS volume, it would be possible to simply increase the size of the OS disk from 75 GB to something greater to allow room for object prior to ingestion. However, having it separate provides a few advantages: - Volumes cannot be resized on the fly. If temporary storage needs exceed what is available, the server would need to be shut down, a new volume created, and the existing volume copied over to it. - If we are not ingesting anything for a period of time, we can easily turn off the 300 GB volume. Because all data on it is meant to be temporary, we could delete it entirely to avoid being charged for storage we are not using. A new volume could be quickly and easily re-attached as needed at a later date with minimal interruption to the production site. AWS Setup Adding volumes in AWS is a fairly simple process, and is well documented on their site Be sure to check the AWS site for current pricing. EBS volumes are billed based on the size allotted, not used. Colgate's ISLE host server's fstab has the following entry: UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt/tempstorage xfs defaults,nofail 0 2 which mounts the 300 GB volume at /mnt/tempstorage In order for the Apache docker container to be able to access /mnt/tempstorage, it must be added as a bind mount. If ISLE is currently running, issue docker-compose down to shut it down before making changes to the configuration file. Colgate's docker-compose.production.yml contains the following line under the \"apache\" \"volumes\" section: - /mnt/tempstorage:/mnt/ingest Note that either of these paths can point to any location as long as it is not otherwise in use (e.g do not bind this to /var/www/ on the docker container, as that directory already contains the Drupal files). /mnt is commonly used as the default directory for mounting volumes in Linux. It is also possible to mount them in the same place, eg \"/mnt/ingest:/mnt/ingest\" but that may make it difficult to tell them apart later on. Any files or directories added to /mnt/tempstorage/ on the host server will be immediately available to the Apache docker container after bringing ISLE back up with docker-compose up -d . Workflow Colgate primarily uses the Islandora Multi Importer (IMI) module for ingesting new objects. The basic workflow is as follows: An archivist has a directory of recently scanned student newspapers in a directory on their computer TIFFs are uploaded via SFTP to /mnt/tempstorage/studentnews The metadata spreadsheet has a column for object location called \"filepath\" that refers to where Islandora will find it within the Docker container, e.g. /mnt/ingest/studentnews/page1.tif In the IMI GUI, the \"local\" location is selected, and object is mapped to the spreadsheet column \"filepath\" Files are ingested. Upon completion and verification that the ingest was successful, the archivist deletes /studentnews subdirectory. This can be done at any time after ingest so long as there is still capacity on the volume. Because AWS charges for the GB allocated rather than used, there is no cost savings for deleting the files quickly. Only deleting the volume entirely via the AWS console would avoid charges. Accessing the Server The above workflow assumes the archivist has access to the AWS server - AWS block all ports by default. A static IP address for anyone moving files to the server would be ideal. Barring that, limiting the range to a library staff vlan would be better than opening the SSH port to all of campus. - SSH keys are required to connect to the AWS server. There are various tools to generate these for Windows and Mac. Amazon has documentation on this process. - At Colgate, provisions were made for a remote worker without a static IP address by setting up an rsync script to move files from a server on campus that the worker did have access to, to the AWS server. This was preferred over allowlisting the entire VPN IP range, but setting that up is outside the scope of this document. Removing or Resizing the Ingest Volume Note : These instructions assume that the only data stored in the temporary volume is meant to be ephemeral and everything on it can be safely deleted. If no ingests are planned, the ingest volume can easily be removed to avoid unnecessary charges. As always, bring the docker containers down with docker-compose down before editing docker-compose.production.yml If you plan on provisioning the volume again later, comment out the lines added to /etc/fstab and docker-compose.production.yml by adding a # to the front. ex: #UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt/tempstorage xfs defaults,nofail 0 2 And #- /mnt/tempstorage:/mnt/ingest - Or delete both lines if you are sure you will not need them again. - Unmount the drive from the host server: - sudo umount -d /mnt/tempstorage replacing /mnt/tempstorage with the path you used on the host server. - See the AWS site for further instructions for detaching then deleting volumes. - To resize the volume, create a new EBS volume of the desired size and add it to your AWS instance and fstab as described above. Note you will need to change the UUID in /etc/fstab to match the newly created volume. If you mount it to the same directory as the previous volume, you should not need to change the docker-compose.production.yml entry.","title":"Example AWS Storage Configuration"},{"location":"cookbook-recipes/example-aws-configuration/#example-aws-configuration","text":"This is the current (as of October 2019) configuration used by Colgate University on AWS. It's purpose is to provide one example of a working ISLE environment, or as a starting point for institutions with similar needs.","title":"Example AWS configuration"},{"location":"cookbook-recipes/example-aws-configuration/#overview","text":"Colgate University Libraries' Digital Collections currently holds over 115000 individual objects/pages. The collection uses just under 5 Tb of storage, which includes high resolution TIFFs for the majority of the objects.","title":"Overview"},{"location":"cookbook-recipes/example-aws-configuration/#aws-configuration","text":"Production: m4.xlarge EC2 Reserved Instance Note : We have a 3 year contract for the m4.xlarge. Amazon offers newer m5 instances for this tier which would be preferred. 75 GB EBS storage, type gp2, for the operating system, docker images, etc. 8 TB EBS storage, type st1, for the Fedora datastore. This is where all digital objects, derivatives, and metadata are stored. 300 GB EBS storage, type gp2, used as a temporary holding location for objects to be ingested. After successful ingest, the objects are deleted from this volume. Staging: Staging differs from Production in 2 ways: m4.large instance rather than xlarge, as performance is less of a concern on staging. The system works, but can be sluggish compared to production. No 300 GB holding location permanently attached. This can be added fairly easily if a need to test a large ingest arose (see below). Rather than a separate 300 EBS volume, it would be possible to simply increase the size of the OS disk from 75 GB to something greater to allow room for object prior to ingestion. However, having it separate provides a few advantages: - Volumes cannot be resized on the fly. If temporary storage needs exceed what is available, the server would need to be shut down, a new volume created, and the existing volume copied over to it. - If we are not ingesting anything for a period of time, we can easily turn off the 300 GB volume. Because all data on it is meant to be temporary, we could delete it entirely to avoid being charged for storage we are not using. A new volume could be quickly and easily re-attached as needed at a later date with minimal interruption to the production site.","title":"AWS Configuration"},{"location":"cookbook-recipes/example-aws-configuration/#aws-setup","text":"Adding volumes in AWS is a fairly simple process, and is well documented on their site Be sure to check the AWS site for current pricing. EBS volumes are billed based on the size allotted, not used. Colgate's ISLE host server's fstab has the following entry: UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt/tempstorage xfs defaults,nofail 0 2 which mounts the 300 GB volume at /mnt/tempstorage In order for the Apache docker container to be able to access /mnt/tempstorage, it must be added as a bind mount. If ISLE is currently running, issue docker-compose down to shut it down before making changes to the configuration file. Colgate's docker-compose.production.yml contains the following line under the \"apache\" \"volumes\" section: - /mnt/tempstorage:/mnt/ingest Note that either of these paths can point to any location as long as it is not otherwise in use (e.g do not bind this to /var/www/ on the docker container, as that directory already contains the Drupal files). /mnt is commonly used as the default directory for mounting volumes in Linux. It is also possible to mount them in the same place, eg \"/mnt/ingest:/mnt/ingest\" but that may make it difficult to tell them apart later on. Any files or directories added to /mnt/tempstorage/ on the host server will be immediately available to the Apache docker container after bringing ISLE back up with docker-compose up -d .","title":"AWS Setup"},{"location":"cookbook-recipes/example-aws-configuration/#workflow","text":"Colgate primarily uses the Islandora Multi Importer (IMI) module for ingesting new objects. The basic workflow is as follows: An archivist has a directory of recently scanned student newspapers in a directory on their computer TIFFs are uploaded via SFTP to /mnt/tempstorage/studentnews The metadata spreadsheet has a column for object location called \"filepath\" that refers to where Islandora will find it within the Docker container, e.g. /mnt/ingest/studentnews/page1.tif In the IMI GUI, the \"local\" location is selected, and object is mapped to the spreadsheet column \"filepath\" Files are ingested. Upon completion and verification that the ingest was successful, the archivist deletes /studentnews subdirectory. This can be done at any time after ingest so long as there is still capacity on the volume. Because AWS charges for the GB allocated rather than used, there is no cost savings for deleting the files quickly. Only deleting the volume entirely via the AWS console would avoid charges.","title":"Workflow"},{"location":"cookbook-recipes/example-aws-configuration/#accessing-the-server","text":"The above workflow assumes the archivist has access to the AWS server - AWS block all ports by default. A static IP address for anyone moving files to the server would be ideal. Barring that, limiting the range to a library staff vlan would be better than opening the SSH port to all of campus. - SSH keys are required to connect to the AWS server. There are various tools to generate these for Windows and Mac. Amazon has documentation on this process. - At Colgate, provisions were made for a remote worker without a static IP address by setting up an rsync script to move files from a server on campus that the worker did have access to, to the AWS server. This was preferred over allowlisting the entire VPN IP range, but setting that up is outside the scope of this document.","title":"Accessing the Server"},{"location":"cookbook-recipes/example-aws-configuration/#removing-or-resizing-the-ingest-volume","text":"Note : These instructions assume that the only data stored in the temporary volume is meant to be ephemeral and everything on it can be safely deleted. If no ingests are planned, the ingest volume can easily be removed to avoid unnecessary charges. As always, bring the docker containers down with docker-compose down before editing docker-compose.production.yml If you plan on provisioning the volume again later, comment out the lines added to /etc/fstab and docker-compose.production.yml by adding a # to the front. ex: #UUID=xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx /mnt/tempstorage xfs defaults,nofail 0 2 And #- /mnt/tempstorage:/mnt/ingest - Or delete both lines if you are sure you will not need them again. - Unmount the drive from the host server: - sudo umount -d /mnt/tempstorage replacing /mnt/tempstorage with the path you used on the host server. - See the AWS site for further instructions for detaching then deleting volumes. - To resize the volume, create a new EBS volume of the desired size and add it to your AWS instance and fstab as described above. Note you will need to change the UUID in /etc/fstab to match the newly created volume. If you mount it to the same directory as the previous volume, you should not need to change the docker-compose.production.yml entry.","title":"Removing or Resizing the Ingest Volume"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/","text":"ISLE Cheat Sheet: Docker Commands Docker commands that are useful to installing or updating ISLE. Docker Containers List Containers docker ps # Show all running containers docker ps -a # Show all running and stopped containers List Volumes docker volume ls # List all volumes Start Containers docker-compose start # Starts existing containers for a service docker start $(docker ps -a -q) # Start all running and stopped containers Stop Containers docker-compose stop # Stops running containers without removing them docker stop [CONTAINER_NAME(S)] # Stop one or more named containers Example: docker stop isle-tomcat isle-solr docker stop $(docker ps -a -q) # WARNING! This will stop ALL containers running on the machine. Stop and Remove Containers docker-compose down # Stops containers and removes containers and networks for services defined in the Compose file Pull Containers docker-compose pull # Pull down all images from Docker Hub docker pull [GROUP]/[REPOSITORY] # Pull one specific image from Docker Hub Example: docker pull islandoracollabgroup/isle-fedora:latest Up Containers docker-compose up -d # Launch all containers for this service Remove Volumes docker volume rm [VOLUME_NAME] # Remove one or more volumes. You cannot remove a volume that is in use by a container. Example: docker volume rm isle_fed-data Remove Containers docker rm [CONTAINER_NAME(S)] # Remove one or more containers Example: docker rm isle_fed-data Shell Into Docker Container docker exec -it [CONTAINER_NAME] bash # Shell Into Docker Container Example: docker exec -it isle-apache-ld bash docker exec -it [CONTAINER_NAME] [FILE_NAME] # Shell Into Docker Container and Run Script Example: docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh Docker Service sudo service docker status # Show Docker Status sudo /bin/systemctl restart docker.service # Restart Docker Service sudo service docker restart # Restart Docker Service (alternate) Watching Docker Logs docker logs -f --tail 10 [CONTAINER_NAME] # Show the last 10 lines ( --tail 10 ) of a container's logs; -f means continuous/live feed Example: docker logs -f --tail 10 isle-apache-ld Locate Docker Volume docker volume inspect [VOLUME_NAME] # Locate Docker Volume Example: docker volume inspect isle_fed-data resultant display is a JSON array that contains a location like this: \"Mountpoint\": \"/var/lib/docker/volumes/isle_fed-data/_data\" Port Lookups docker port [CONTAINER_NAME] # List port mappings or a specific mapping for the container docker ps | grep 8381 # Query what is using a specific port number lsof -i :8381 # Query what is using a specific port number Docker Version docker version # This will render all version information in an easy to read layout Docker: WARNING: BE CAREFUL WITH THESE COMMANDS Delete All Containers, Networks, Volumes and Images docker-compose down -v # WARNING! NEVER run this command in production. ONLY consider doing this on your Demo Local machine. This command will delete all Docker containers, networks, volumes, and images created by up . (This command will not delete your git repository or the paths or contents of your bind mounts.) Remove Unused Data docker system prune --all # WARNING! Remove all unused containers, networks, images and volumes. (Translation: This will remove all stopped containers, all networks not used by a container, all images that lack an associated container, and all build cache.) Remove All Containers docker rm $(docker ps -a -q) # WARNING! This will remove ALL containers on the machine! UNIX Commands Quickly View a File, Using cat usage: cat [FILE_NAME] Example: cat /etc/hosts Ping to Test Connectivity usage: ping [DOMAIN] Example: ping www.google.com Example: ping isle.localdomain DNS Lookup and Querying Tool usage: dig [DOMAIN] Example: dig www.google.com Example: dig isle.localdomain EXTREME CAUTION: Remove Directory: Recursively and with Force usage: sudo rm -rf [DIRECTORY_NAME] Example: sudo rm -rf /var/tmp/scrap/ CAREFUL! BELOW THERE BE DRAGONS How to Remove All Docker Containers and Then Pull Down Fresh Images Stop all current containers docker-compose stop WARNING! This will remove: all stopped containers;, etc. docker system prune --all Delete \"data\" folder in ISLE-Developer folder so logs are fresh and clean sudo rm -rf data Pull down the images from Docker Hub docker-compose pull Launch all containers (creates volumes and starts containers) docker-compose up -d How Testers Can Maintain a Nice Clean Environment Show Currently Running and All Past Containers docker ps -a Let's Say You Discover You Have Two Older Containers (named isle-web , isle-db ) and You Want to Remove Them: Example to stop these 2 containers docker stop isle-web isle-db Example to remove these 2 containers docker rm isle-web isle-db","title":"ISLE Cheat Sheet: Docker Commands"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#isle-cheat-sheet-docker-commands","text":"Docker commands that are useful to installing or updating ISLE.","title":"ISLE Cheat Sheet: Docker Commands"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-containers","text":"","title":"Docker Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#list-containers","text":"docker ps # Show all running containers docker ps -a # Show all running and stopped containers","title":"List Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#list-volumes","text":"docker volume ls # List all volumes","title":"List Volumes"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#start-containers","text":"docker-compose start # Starts existing containers for a service docker start $(docker ps -a -q) # Start all running and stopped containers","title":"Start Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#stop-containers","text":"docker-compose stop # Stops running containers without removing them docker stop [CONTAINER_NAME(S)] # Stop one or more named containers Example: docker stop isle-tomcat isle-solr docker stop $(docker ps -a -q) # WARNING! This will stop ALL containers running on the machine.","title":"Stop Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#stop-and-remove-containers","text":"docker-compose down # Stops containers and removes containers and networks for services defined in the Compose file","title":"Stop and Remove Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#pull-containers","text":"docker-compose pull # Pull down all images from Docker Hub docker pull [GROUP]/[REPOSITORY] # Pull one specific image from Docker Hub Example: docker pull islandoracollabgroup/isle-fedora:latest","title":"Pull Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#up-containers","text":"docker-compose up -d # Launch all containers for this service","title":"Up Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-volumes","text":"docker volume rm [VOLUME_NAME] # Remove one or more volumes. You cannot remove a volume that is in use by a container. Example: docker volume rm isle_fed-data","title":"Remove Volumes"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-containers","text":"docker rm [CONTAINER_NAME(S)] # Remove one or more containers Example: docker rm isle_fed-data","title":"Remove Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#shell-into-docker-container","text":"docker exec -it [CONTAINER_NAME] bash # Shell Into Docker Container Example: docker exec -it isle-apache-ld bash docker exec -it [CONTAINER_NAME] [FILE_NAME] # Shell Into Docker Container and Run Script Example: docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh","title":"Shell Into Docker Container"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-service","text":"sudo service docker status # Show Docker Status sudo /bin/systemctl restart docker.service # Restart Docker Service sudo service docker restart # Restart Docker Service (alternate)","title":"Docker Service"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#watching-docker-logs","text":"docker logs -f --tail 10 [CONTAINER_NAME] # Show the last 10 lines ( --tail 10 ) of a container's logs; -f means continuous/live feed Example: docker logs -f --tail 10 isle-apache-ld","title":"Watching Docker Logs"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#locate-docker-volume","text":"docker volume inspect [VOLUME_NAME] # Locate Docker Volume Example: docker volume inspect isle_fed-data resultant display is a JSON array that contains a location like this: \"Mountpoint\": \"/var/lib/docker/volumes/isle_fed-data/_data\"","title":"Locate Docker Volume"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#port-lookups","text":"docker port [CONTAINER_NAME] # List port mappings or a specific mapping for the container docker ps | grep 8381 # Query what is using a specific port number lsof -i :8381 # Query what is using a specific port number","title":"Port Lookups"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-version","text":"docker version # This will render all version information in an easy to read layout","title":"Docker Version"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#docker-warning-be-careful-with-these-commands","text":"","title":"Docker: WARNING: BE CAREFUL WITH THESE COMMANDS"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#delete-all-containers-networks-volumes-and-images","text":"docker-compose down -v # WARNING! NEVER run this command in production. ONLY consider doing this on your Demo Local machine. This command will delete all Docker containers, networks, volumes, and images created by up . (This command will not delete your git repository or the paths or contents of your bind mounts.)","title":"Delete All Containers, Networks, Volumes and Images"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-unused-data","text":"docker system prune --all # WARNING! Remove all unused containers, networks, images and volumes. (Translation: This will remove all stopped containers, all networks not used by a container, all images that lack an associated container, and all build cache.)","title":"Remove Unused Data"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#remove-all-containers","text":"docker rm $(docker ps -a -q) # WARNING! This will remove ALL containers on the machine!","title":"Remove All Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#unix-commands","text":"","title":"UNIX Commands"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#quickly-view-a-file-using-cat","text":"usage: cat [FILE_NAME] Example: cat /etc/hosts","title":"Quickly View a File, Using cat"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#ping-to-test-connectivity","text":"usage: ping [DOMAIN] Example: ping www.google.com Example: ping isle.localdomain","title":"Ping to Test Connectivity"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#dns-lookup-and-querying-tool","text":"usage: dig [DOMAIN] Example: dig www.google.com Example: dig isle.localdomain","title":"DNS Lookup and Querying Tool"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#extreme-caution-remove-directory-recursively-and-with-force","text":"usage: sudo rm -rf [DIRECTORY_NAME] Example: sudo rm -rf /var/tmp/scrap/","title":"EXTREME CAUTION: Remove Directory: Recursively and with Force"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#careful-below-there-be-dragons","text":"","title":"CAREFUL! BELOW THERE BE DRAGONS"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#how-to-remove-all-docker-containers-and-then-pull-down-fresh-images","text":"Stop all current containers docker-compose stop WARNING! This will remove: all stopped containers;, etc. docker system prune --all Delete \"data\" folder in ISLE-Developer folder so logs are fresh and clean sudo rm -rf data Pull down the images from Docker Hub docker-compose pull Launch all containers (creates volumes and starts containers) docker-compose up -d","title":"How to Remove All Docker Containers and Then Pull Down Fresh Images"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#how-testers-can-maintain-a-nice-clean-environment","text":"","title":"How Testers Can Maintain a Nice Clean Environment"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#show-currently-running-and-all-past-containers","text":"docker ps -a","title":"Show Currently Running and All Past Containers"},{"location":"cookbook-recipes/isle-cheatsheet-docker-commands/#lets-say-you-discover-you-have-two-older-containers-named-isle-web-isle-db-and-you-want-to-remove-them","text":"Example to stop these 2 containers docker stop isle-web isle-db Example to remove these 2 containers docker rm isle-web isle-db","title":"Let's Say You Discover You Have Two Older Containers (named isle-web, isle-db) and You Want to Remove Them:"},{"location":"cookbook-recipes/isle-v140-git-cleanup/","text":"As a result of the ISLE Phase II Sprint F - Optimize Docker Images in Fall 2019, the ISLE repository has had several changes: Original ISLE git repo size was ~182 MB and would take a minimum of 10 -15 seconds or more to clone ( depending on one's Internet connection ) The cleaned up ISLE git repo size is now 6.6 MB and should take a minimum of less than 3 seconds to clone ( depending on one's Internet connection ) a new clean up script called isle-v140-git-cleanup-script.sh has been added along with this documentation created for end users to run on their ISLE repository. Any new pull request will have to be created from a forked or cloned ISLE repository that has had this cleanup process performed on it. AS OF THE ISLE v.1.4.0 release in November 2019 (MANDATORY) Due to removal of older files and folders and git changes in the ISLE git repository as of November 25, 2019 , please review the following: If you are a new ISLE user and are cloning or forking this project for the first time after November 25, 2019 , then you can ignore this documentation and move on to the Quick Start section within the README.md as needed. If you have previously forked or cloned the ISLE project prior to November 25, 2019 , then you do need to follow the instructions given in this documentation. If you still feel like you're not sure or cannot tell if you need to do this, then please refer to the instructions given in the Identification Tools section below within this documentation. If you intend to submit pull requests (PRs) of any kind (documentation, code etc) to the ISLE project, ISLE maintainers will NOT accept PRs from repos that haven't had the script run on them as using an uncleaned forked repo will cause the removed files to return. Please run this script and process PRIOR to attempting to follow the normal ISLE update procedure for version 1.4.0 . There is a brief description of what the script actually does found below in the Script commands - explained section. Git cleanup process Git cleanup process - Overview The steps below in the section Git cleanup process will have you perform the following: Open up a terminal and perform steps as directed Make a directory called ISLE_140_GIT_CLEANUP on your laptop or workstation to perform all of these steps and collect all materials Download the git cleanup script ( isle-v140-git-cleanup-script.sh )and move it to the ISLE_140_GIT_CLEANUP directory git clone --mirror your forked or cloned ISLE project directory to the ISLE_140_GIT_CLEANUP directory Run the git cleanup script. It will prompt you to only enter the name of your forked or cloned ISLE project directory. git push back the changes to your remote forked or cloned ISLE project directory. Clone down your newly changed and smaller forked or cloned ISLE project directory again to ensure that the repositiory is smaller to a location of your choice. Remove all previous larger size versions of your forked or cloned ISLE project directory. You can now delete the ISLE_140_GIT_CLEANUP directory and its contents. Work from the newly resized and smaller forked or cloned ISLE project directory. As needed re-clone and redeploy projects on locals, staging and production servers. Git cleanup process - Steps Open up a terminal Change directory to a location of your choice cd your_path_here Make a new temporary direcotory called ISLE_140_GIT_CLEANUP mkdir ISLE_140_GIT_CLEANUP Download the script found and save it to the ISLE_140_GIT_CLEANUP directory and fix the permissions. wget https://raw.githubusercontent.com/Islandora-Collaboration-Group/ISLE/master/docs/assets/isle-v140-git-cleanup-script.sh chmod 755 isle-v140-git-cleanup-script.sh Run this git command to clone your forked or cloned ISLE project directory. This is not the usual git clone command, note the --mirror flag. git clone --mirror git project url Example: git clone --mirror git@github.com:username/ISLE.git ( as a fork using the same project name or title ) git clone --mirror git@github.com:username/yourprojectnamehere-isle.git ( as a fork or cloned repo using a different project name or title ) This will create a new directory called ISLE.git or yourprojectnamehere-isle.git which is not typical clone or fork output. Run the cleanup script ./isle-v140-git-cleanup-script.sh At the start of the script, there will be an interactive input prompt asking you to: \"Type in the name of your git repo only e.g. ISLE (do not include .git) and then press the [ENTER] or [RETURN] key to continue\"` Enter the name here: Enter the name of your forked or cloned ISLE git repository without the .git extension e.g ISLE or yourprojectnamehere-isle etc. The script will continue and the process takes about 30 - 45 seconds depending on the speed of your system with minimal output. Your final step is to push this local smaller repo back to the remote repository cd ISLE.git or cd yourprojectnamehere-isle.git git push Clone down your newly changed and smaller forked or cloned ISLE project directory again to ensure that the repositiory is smaller to a location of your choice. Remove all previous versions of your cloned ISLE project directory. You can now delete the ISLE_140_GIT_CLEANUP directory and its contents. Work from a newly cloned ISLE or yourprojectnamehere-isle project directory and continue with the ISLE update process to 1.4.0 ( if/as needed ) Git cleanup process - Example redeploy process To re-deploy on your local Assumptions: - You'll have already run the git cleanup steps and script on your forked ISLE git project. cd into your the parent directory that contains your yourprojectnamehere-isle directory e.g. ~/Code/ , Documents , Projects , or Sites . This will be the directory you chose to locate your yourprojectnamehere-isle directory. sudo mkdir isle-archive mv yourprojectnamehere-isle isle-archive/ git clone yourprojectnamehere-isle project If you had any untracked files, you'll need to copy them back into place from isle-archive/yourprojectnamehere-isle to the new yourprojectnamehere-isle docker-compose pull ( just incase you didn't have any of the new images ) If upgrading to ISLE 1.4.0 , then follow the usual ISLE update steps To re-deploy on your staging & production server(s) Assumptions: You'll have already run the git cleanup steps and script on your forked ISLE git project. You have already re-cloned your local You have already followed the usual ISLE update steps for version 1.4.0 Start with Staging first ssh into your Staging ISLE host server cd /opt/ sudo mkdir isle-archive cd /opt/yourprojectnamehere-isle docker-compose down sudo chown -Rv islandora:islandora isle-archive sudo mv /opt/yourprojectnamehere-isle /opt/isle-archive/ git clone yourprojectnamehere-isle project to /opt/ If you had any untracked files like acme.json , you'll need to copy them back into place from /opt/isle-archive/yourprojectnamehere-isle For example: cp /opt/isle-archive/yourprojectnamehere-isle/config/proxy/acme.json /opt/yourprojectnamehere-isle/config/proxy/acme.json Edit your .env for the correct environment and commit the change but do not push back. docker-compose pull ( just incase you didn't have any of the new images ) docker-compose up -d to start up the containers Repeat these steps above on the Production server Identification tools Please note: In some of the examples given below, the title and/or names of the git repository examples use ISLE; your forked or cloned repo may be using a different project name or title, so please replace the ISLE for the name of your forked or cloned ISLE project git repository instead e.g. yourprojectnamehere-isle . If you would like to check if the files have been removed or are still present: Clone this repo to pinpoint offending files and folders to the parent directory of where your local forked or cloned ISLE git repository is located. Do not clone this tool into your local forked or cloned ISLE git repository. git clone https://github.com/ivantikal/git-tools.git Your parent directory should now look like this example below: ( again please note your local forked or cloned ISLE git repository might not use the ISLE as the title ) directory/ \u251c\u2500\u2500 git-tools \u2514\u2500\u2500 ISLE Run the tools against your existing local forked or cloned ISLE git repository. Example usage for finding the 50 biggest files or folders in your local forked or cloned ISLE git repository. You can swap out the ISLE for the name of your forked or cloned ISLE project git repository e.g. yourprojectnamehere-isle ./git-tools/clean-binaries/get_biggest_files_in_history.sh -r ./ISLE/ -n 50 Review the resulting file to see if any of the files and folders listed in the Files & Folder removed section appear. cat ./git-tools/clean-binaries/get_biggest_files_in_history.sh.tmp/bigtosmall.txt If none of the files appear, you don't need to run the script. If any of the files or folders appear, you have to run the script. Scroll back up to the top of this document and follow the steps as provided. More information can be found here on to use this tool Files & Folder removed Over 176 MB of errant blobs, binaries and code were identified and removed. Files removed: dg.localdomain.key dg.localdomain.pem docker-compose.DG-FEDORA.yml fcrepo-drupalauthfilter-3.8.1.jar fcrepo-installer-3.8.1.jar fedoragsearch-2.8.1.zip log4j-over-slf4j-1.6.6.jar search_index.json sitemap.xml sitemap.xml.gz slf4j-jdk14-1.6.6.jar Folders (and files within) removed: drupal solr-4.10.4 Script commands - explained You are welcome to open up the isle-v140-git-cleanup-script.sh in a text editor to review its contents prior to running. Essentially isle-v140-git-cleanup-script.sh will perform the following: Download the BFG-repo-cleaner jar file bfg-1.113.0.jar Run the appropriate BFG java commands to delete files and folders Run these git commands on your forked or cloned ISLE git repo git reflog expire --expire=now --all && git gc --prune=now --aggressive Please note: This script will not push back to your source repo. That you need to do manually.","title":"Cleanup ISLE git repository for Release v.1.4.0"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#as-of-the-isle-v140-release-in-november-2019-mandatory","text":"Due to removal of older files and folders and git changes in the ISLE git repository as of November 25, 2019 , please review the following: If you are a new ISLE user and are cloning or forking this project for the first time after November 25, 2019 , then you can ignore this documentation and move on to the Quick Start section within the README.md as needed. If you have previously forked or cloned the ISLE project prior to November 25, 2019 , then you do need to follow the instructions given in this documentation. If you still feel like you're not sure or cannot tell if you need to do this, then please refer to the instructions given in the Identification Tools section below within this documentation. If you intend to submit pull requests (PRs) of any kind (documentation, code etc) to the ISLE project, ISLE maintainers will NOT accept PRs from repos that haven't had the script run on them as using an uncleaned forked repo will cause the removed files to return. Please run this script and process PRIOR to attempting to follow the normal ISLE update procedure for version 1.4.0 . There is a brief description of what the script actually does found below in the Script commands - explained section.","title":"AS OF THE ISLE v.1.4.0 release in November 2019 (MANDATORY)"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#git-cleanup-process","text":"","title":"Git cleanup process"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#git-cleanup-process-overview","text":"The steps below in the section Git cleanup process will have you perform the following: Open up a terminal and perform steps as directed Make a directory called ISLE_140_GIT_CLEANUP on your laptop or workstation to perform all of these steps and collect all materials Download the git cleanup script ( isle-v140-git-cleanup-script.sh )and move it to the ISLE_140_GIT_CLEANUP directory git clone --mirror your forked or cloned ISLE project directory to the ISLE_140_GIT_CLEANUP directory Run the git cleanup script. It will prompt you to only enter the name of your forked or cloned ISLE project directory. git push back the changes to your remote forked or cloned ISLE project directory. Clone down your newly changed and smaller forked or cloned ISLE project directory again to ensure that the repositiory is smaller to a location of your choice. Remove all previous larger size versions of your forked or cloned ISLE project directory. You can now delete the ISLE_140_GIT_CLEANUP directory and its contents. Work from the newly resized and smaller forked or cloned ISLE project directory. As needed re-clone and redeploy projects on locals, staging and production servers.","title":"Git cleanup process - Overview"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#git-cleanup-process-steps","text":"Open up a terminal Change directory to a location of your choice cd your_path_here Make a new temporary direcotory called ISLE_140_GIT_CLEANUP mkdir ISLE_140_GIT_CLEANUP Download the script found and save it to the ISLE_140_GIT_CLEANUP directory and fix the permissions. wget https://raw.githubusercontent.com/Islandora-Collaboration-Group/ISLE/master/docs/assets/isle-v140-git-cleanup-script.sh chmod 755 isle-v140-git-cleanup-script.sh Run this git command to clone your forked or cloned ISLE project directory. This is not the usual git clone command, note the --mirror flag. git clone --mirror git project url Example: git clone --mirror git@github.com:username/ISLE.git ( as a fork using the same project name or title ) git clone --mirror git@github.com:username/yourprojectnamehere-isle.git ( as a fork or cloned repo using a different project name or title ) This will create a new directory called ISLE.git or yourprojectnamehere-isle.git which is not typical clone or fork output. Run the cleanup script ./isle-v140-git-cleanup-script.sh At the start of the script, there will be an interactive input prompt asking you to: \"Type in the name of your git repo only e.g. ISLE (do not include .git) and then press the [ENTER] or [RETURN] key to continue\"` Enter the name here: Enter the name of your forked or cloned ISLE git repository without the .git extension e.g ISLE or yourprojectnamehere-isle etc. The script will continue and the process takes about 30 - 45 seconds depending on the speed of your system with minimal output. Your final step is to push this local smaller repo back to the remote repository cd ISLE.git or cd yourprojectnamehere-isle.git git push Clone down your newly changed and smaller forked or cloned ISLE project directory again to ensure that the repositiory is smaller to a location of your choice. Remove all previous versions of your cloned ISLE project directory. You can now delete the ISLE_140_GIT_CLEANUP directory and its contents. Work from a newly cloned ISLE or yourprojectnamehere-isle project directory and continue with the ISLE update process to 1.4.0 ( if/as needed )","title":"Git cleanup process - Steps"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#git-cleanup-process-example-redeploy-process","text":"To re-deploy on your local Assumptions: - You'll have already run the git cleanup steps and script on your forked ISLE git project. cd into your the parent directory that contains your yourprojectnamehere-isle directory e.g. ~/Code/ , Documents , Projects , or Sites . This will be the directory you chose to locate your yourprojectnamehere-isle directory. sudo mkdir isle-archive mv yourprojectnamehere-isle isle-archive/ git clone yourprojectnamehere-isle project If you had any untracked files, you'll need to copy them back into place from isle-archive/yourprojectnamehere-isle to the new yourprojectnamehere-isle docker-compose pull ( just incase you didn't have any of the new images ) If upgrading to ISLE 1.4.0 , then follow the usual ISLE update steps To re-deploy on your staging & production server(s) Assumptions: You'll have already run the git cleanup steps and script on your forked ISLE git project. You have already re-cloned your local You have already followed the usual ISLE update steps for version 1.4.0 Start with Staging first ssh into your Staging ISLE host server cd /opt/ sudo mkdir isle-archive cd /opt/yourprojectnamehere-isle docker-compose down sudo chown -Rv islandora:islandora isle-archive sudo mv /opt/yourprojectnamehere-isle /opt/isle-archive/ git clone yourprojectnamehere-isle project to /opt/ If you had any untracked files like acme.json , you'll need to copy them back into place from /opt/isle-archive/yourprojectnamehere-isle For example: cp /opt/isle-archive/yourprojectnamehere-isle/config/proxy/acme.json /opt/yourprojectnamehere-isle/config/proxy/acme.json Edit your .env for the correct environment and commit the change but do not push back. docker-compose pull ( just incase you didn't have any of the new images ) docker-compose up -d to start up the containers Repeat these steps above on the Production server","title":"Git cleanup process - Example redeploy process"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#identification-tools","text":"Please note: In some of the examples given below, the title and/or names of the git repository examples use ISLE; your forked or cloned repo may be using a different project name or title, so please replace the ISLE for the name of your forked or cloned ISLE project git repository instead e.g. yourprojectnamehere-isle . If you would like to check if the files have been removed or are still present: Clone this repo to pinpoint offending files and folders to the parent directory of where your local forked or cloned ISLE git repository is located. Do not clone this tool into your local forked or cloned ISLE git repository. git clone https://github.com/ivantikal/git-tools.git Your parent directory should now look like this example below: ( again please note your local forked or cloned ISLE git repository might not use the ISLE as the title ) directory/ \u251c\u2500\u2500 git-tools \u2514\u2500\u2500 ISLE Run the tools against your existing local forked or cloned ISLE git repository. Example usage for finding the 50 biggest files or folders in your local forked or cloned ISLE git repository. You can swap out the ISLE for the name of your forked or cloned ISLE project git repository e.g. yourprojectnamehere-isle ./git-tools/clean-binaries/get_biggest_files_in_history.sh -r ./ISLE/ -n 50 Review the resulting file to see if any of the files and folders listed in the Files & Folder removed section appear. cat ./git-tools/clean-binaries/get_biggest_files_in_history.sh.tmp/bigtosmall.txt If none of the files appear, you don't need to run the script. If any of the files or folders appear, you have to run the script. Scroll back up to the top of this document and follow the steps as provided. More information can be found here on to use this tool","title":"Identification tools"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#files-folder-removed","text":"Over 176 MB of errant blobs, binaries and code were identified and removed. Files removed: dg.localdomain.key dg.localdomain.pem docker-compose.DG-FEDORA.yml fcrepo-drupalauthfilter-3.8.1.jar fcrepo-installer-3.8.1.jar fedoragsearch-2.8.1.zip log4j-over-slf4j-1.6.6.jar search_index.json sitemap.xml sitemap.xml.gz slf4j-jdk14-1.6.6.jar Folders (and files within) removed: drupal solr-4.10.4","title":"Files &amp; Folder removed"},{"location":"cookbook-recipes/isle-v140-git-cleanup/#script-commands-explained","text":"You are welcome to open up the isle-v140-git-cleanup-script.sh in a text editor to review its contents prior to running. Essentially isle-v140-git-cleanup-script.sh will perform the following: Download the BFG-repo-cleaner jar file bfg-1.113.0.jar Run the appropriate BFG java commands to delete files and folders Run these git commands on your forked or cloned ISLE git repo git reflog expire --expire=now --all && git gc --prune=now --aggressive Please note: This script will not push back to your source repo. That you need to do manually.","title":"Script commands - explained"},{"location":"cookbook-recipes/migrate-dbs-utf8/","text":"Migrate your MySQL databases to UTF8 format Within the ISLE/scripts/apache/ directory there is now a db_utf8_migration.sh script that can be run to migrate your site's MySQL databases to UTF8 format. More information can be found here To use this script: cp scripts/apache/db_utf8_migration.sh isle-apache-ld:/var/www/html docker exec -it isle-apache-ld bash chmod 755 /var/www/html/db_utf8_migration.sh docker exec -it isle-apache-ld bash /var/www/html/db_utf8_migration.sh Please note this process can take a minimum of 10-15 mins or more depending on your site size etc.","title":"Migrate your MySQL databases to UTF8 format"},{"location":"cookbook-recipes/migrate-dbs-utf8/#migrate-your-mysql-databases-to-utf8-format","text":"Within the ISLE/scripts/apache/ directory there is now a db_utf8_migration.sh script that can be run to migrate your site's MySQL databases to UTF8 format. More information can be found here To use this script: cp scripts/apache/db_utf8_migration.sh isle-apache-ld:/var/www/html docker exec -it isle-apache-ld bash chmod 755 /var/www/html/db_utf8_migration.sh docker exec -it isle-apache-ld bash /var/www/html/db_utf8_migration.sh Please note this process can take a minimum of 10-15 mins or more depending on your site size etc.","title":"Migrate your MySQL databases to UTF8 format"},{"location":"cookbook-recipes/multi_importer_installation/","text":"IMI Ingest: Setup and Use with ISLE These instructions will walk users through the installation of the Islandora Multi-Importer (IMI) Module and a test batch ingest of sample items. They assume you have followed the instructions for Local ISLE Installation: New Site . Staging and Production servers may require a different entry in the docker-compose.yml volume section. Docker Down, Add New Volume in the Apache Section for Staging Server Side Ingest, Docker Up In a terminal, cd to directory containing your local ISLE repository. If you have just completed installing the local ISLE site, your are likely already in that directory. Otherwise: cd {yourprojectnamehere}-isle Run docker-compose down Create an ingest data directory on the host computer, to be shared with the Docker container: mkdir ./ingest_data In a text editor, edit docker-compose.yml - add \"./ingest_data:/mnt/ingest\" into the Apache > Volumes section and save. apache: # build: # context: ../images/isle-apache image: islandoracollabgroup/isle-apache:1.1.1 container_name: isle-apache-${CONTAINER_SHORT_ID} env_file: .env networks: isle-internal: depends_on: mysql fedora solr traefik volumes: isle-apache-data:/var/www/hpl:cached ./ingest_data:/mnt/ingest run docker-compose up -d Set Up Batch Functionality and the IMI Module cd ingest_data Copy and paste the entire block of code below into the command line to create the installer script: echo 'cd /var/www/html && drush -y -u 1 en islandora_batch cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/mjordan/islandora_batch_with_derivs.git cd /var/www/html && drush -y -u 1 en islandora_batch_with_derivs cd /var/www/html && drush -y -u 1 en islandora_book_batch cd /var/www/html && drush -y -u 1 en islandora_newspaper_batch cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/MarcusBarnes/islandora_compound_batch.git cd /var/www/html && drush -y -u 1 en islandora_compound_batch cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/mnylc/islandora_multi_importer.git cd /var/www/html/sites/all/modules/islandora/islandora_multi_importer && composer install cd /var/www/html && drush en islandora_multi_importer -y cd /mnt/ingest && git clone https://github.com/Born-Digital-US/isle-ingest-samples.git unzip isle-ingest-samples/IMI/IMIasset_files.zip -d . chown -R islandora:www-data /mnt/ingest' > batch_installer.sh Update the script file permissions on the container: docker exec -it isle-apache-ld bash -c \"chmod 744 /mnt/ingest/batch_installer.sh\" Run batch_installer.sh on the container: docker exec -it isle-apache-ld bash -c \"/mnt/ingest/batch_installer.sh\" Islandora ingest overview and IMI demonstration The script will pack a set of sample files in the local ingest_data directory Drill down to the ./ingest_data/isle-ingest-samples/IMI directory and look for the following three files: mods_twig_base.txt testCol-tn.png.zip testCol.csv Visit one of these two pages: on your Demo site > https://isle.localdomain/multi_importer on your Local site > https://yourlocalnamehere.localdomain/multi_importer Use the data in mods_twig_base.txt to create and save an IMI metadata template In the Drupal site, in the Navigation section on the left, click the \"Multi Import Objects\" link In the \"Choose your Data source type\" drop down, select \"Spreadsheet File to be uploaded\" aka a \".csv file\" and click the \"Next\" button. Click the \"Choose File\" button and select the csv file: \"testCol.csv\" and then click the \"Upload\" button. Click the \"Preprocess\" button In the \"Your data\" tab, toggle / click the \"Preview submitted...\" drop-down to verify there's data in your rows Go to the \"Templating\" tab: If there is not yet a twig template: Delete the sample {% block content %} Hello {{ name }}{% endblock %} from the \"Twig Template Input\" field. Copy and paste the \"mods_twig_base.txt\" template text into the template text area. Within the \"Manage your templates\" section at the bottom, click the \"Save Template As\" Enter a new name e.g. \"bd_mods_template\" in the \"Name for your new template\" field and then click the \"Save Template\" button. A green check mark will indicate a successful save. Else if there is a preexisting twig template -select the previously saved template. Go to the \"CMODEL Mapping\" tab: Select from the drop-down list; \"cmodel\" and click the \"Check CMODELS\" button. A block of drop-downs should appear for each CModel you have in your input (.csv) DC - \"default XSLT\" TN - select \"tn\" Go to the \"Object Properties Tab\" and within the \"Source Field Mapping\" table: Set \"Object Pid\" to \"collection_pid\" and uncheck the checkbox for \"Check to let Islandora build PID...\" Set \"Parent Object\" to \"parent\" and leave checkbox checked for \"If value is not a well formed PID...\" Set \"Object Label\" to \"title\" Set \"Sequence and Ordering\" to \"collection_pid\" ( most likely default ) Set \"Remote DS sources\" to \"ZIP\" Leave the \"What Type of Batch Action\u2026\" as it is (\"ingest new objects\") ( most likely default ) Click on the \"Ingest\" button Click the \"Choose File\" button and select the zip file: \"testCol-tn.png.zip\" and the click the \"Upload\" button. Please note: There will be this warning \"For security reasons, your upload has been renamed to testCol-tn.png_.zip.\" Ignore it. Click the \"Ingest\" button Now you should see a green message box e.g. \"You are all set( id = 1)!\" with a set ID that is a link. Click on the \"id = \" link. The \"Set __ Batch Queue\" prompt / overlay should appear. Click on the link: \"Process Set\" Click on the \"Start Batch Processing\" button You should see \"Processing complete\" message. Click on the \"home\" icon at the top left hand of the site to get back to the homepage. Within the \"Navigation\" links, click on \"Islandora Repository\". Within the list of collections you should see your new \"Test Collection\" with a witty thumbnail icon. Click on the icon. To set the CMODELS for this collection, click on the \"Manage\" tab. Go to the \"Collection\" sub-tab, then to the \"Manage Collection Policy\" sub-tab ( should be there by default ) and then check ALL the check boxes within the \"About Collection Policies\" table to the right. Click the \"Update Collection Policy\" button. A green check mark message \"updated collection policy...\" should appear. Proceed to test a full IMI ingest using the local file system option. Objects will be ingested in to the test collection created above. In this section, we will use a Google sheet for our sample metadata In the Drupal site, Navigation section on the left, click the \"Multi Import Objects\" link In the \"Choose your Data source type\" drop down, select \"Google Sheet URL\" and click the \"Next\" button. In the \"ID of your Google sheet\" box, paste in: 1sZ0FY27nxkhM4lCrSZ9nY9mLbr-ljKaZdqTyiRmknTM Cell Range: Sheet1!A1:AF14 Click the \"Preprocess\" button In the \"Your data\" tab, toggle / click the \"Preview submitted...\" drop-down to verify there's data in your rows Go to the \"Templating\" tab and select the template created above. E.g. \"bd_mods_template\" Go to the \"CMODEL Mapping\" tab: Select from the drop-down list; \"cmodel\" and click the \"Check CMODELS\" button. A block of drop-downs should appear for each CModel you have in your input: islandora:sp_large_image_cmodel, islandora:sp-audioCModel, islandora:compoundCModel, islandora:bookCModel, islandora:pageCModel and islandora:sp_pdf For each Content Model, set the following: DC - \"default XSLT\" MODS - \"bd_mods_template\" OBJ - \"obj_file\" TN - select \"tn\" All others: \"Build Using islandora generated derivatives\" OR \"-- Don't Create --\", depending on how fully you want to test ingest. The more derivatives you create, the longer the ingest process will be. Go to the \"Object Properties Tab\" and within the \"Source Field Mapping\" table: Set \"Object Pid\" to \"collection_pid\" and uncheck the checkbox for \"Check to let Islandora build PID...\" Set \"Parent Object\" to \"parent\" and leave checkbox checked for \"If value is not a well formed PID...\" Set \"Object Label\" to \"title\" Set \"Sequence and Ordering\" to \"sequence\" Set \"Remote DS sources\" to \"local\" Leave the \"What Type of Batch Action\u2026\" as it is (\"ingest new objects\") ( most likely default ) Click on the \"Ingest\" button Now you should see a green message box e.g. \"You are all set( id = #)!\" with a set ID that is a link. Click on the \"id = \" link. The \"Set __ Batch Queue\" prompt / overlay should appear. Click on the link: \"Process Set\" Click on the \"Start Batch Processing\" button You should see \"Processing complete\" message. View the test objects Click on the \"home\" icon at the top left hand of the site to get back to the homepage. Within the \"Navigation\" links, click on \"Islandora Repository\". Click on the \"Test Collection\" Thumbnail The ingested objects should be listed. Other Useful links: ISLE Documentation Site More Sample Ingest Objects from Born Digital IMI Github Islandora Documentation - How to Add an Item to a Digital Collection Islandora Documentation - How to Batch Ingest Files","title":"Setting Up and Testing the Islandora Multi Importer (IMI) Module"},{"location":"cookbook-recipes/multi_importer_installation/#imi-ingest-setup-and-use-with-isle","text":"These instructions will walk users through the installation of the Islandora Multi-Importer (IMI) Module and a test batch ingest of sample items. They assume you have followed the instructions for Local ISLE Installation: New Site . Staging and Production servers may require a different entry in the docker-compose.yml volume section.","title":"IMI Ingest: Setup and Use with ISLE"},{"location":"cookbook-recipes/multi_importer_installation/#docker-down-add-new-volume-in-the-apache-section-for-staging-server-side-ingest-docker-up","text":"In a terminal, cd to directory containing your local ISLE repository. If you have just completed installing the local ISLE site, your are likely already in that directory. Otherwise: cd {yourprojectnamehere}-isle Run docker-compose down Create an ingest data directory on the host computer, to be shared with the Docker container: mkdir ./ingest_data In a text editor, edit docker-compose.yml - add \"./ingest_data:/mnt/ingest\" into the Apache > Volumes section and save. apache: # build: # context: ../images/isle-apache image: islandoracollabgroup/isle-apache:1.1.1 container_name: isle-apache-${CONTAINER_SHORT_ID} env_file: .env networks: isle-internal: depends_on: mysql fedora solr traefik volumes: isle-apache-data:/var/www/hpl:cached ./ingest_data:/mnt/ingest run docker-compose up -d","title":"Docker Down, Add New Volume in the Apache Section for Staging Server Side Ingest, Docker Up"},{"location":"cookbook-recipes/multi_importer_installation/#set-up-batch-functionality-and-the-imi-module","text":"cd ingest_data Copy and paste the entire block of code below into the command line to create the installer script: echo 'cd /var/www/html && drush -y -u 1 en islandora_batch cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/mjordan/islandora_batch_with_derivs.git cd /var/www/html && drush -y -u 1 en islandora_batch_with_derivs cd /var/www/html && drush -y -u 1 en islandora_book_batch cd /var/www/html && drush -y -u 1 en islandora_newspaper_batch cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/MarcusBarnes/islandora_compound_batch.git cd /var/www/html && drush -y -u 1 en islandora_compound_batch cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/mnylc/islandora_multi_importer.git cd /var/www/html/sites/all/modules/islandora/islandora_multi_importer && composer install cd /var/www/html && drush en islandora_multi_importer -y cd /mnt/ingest && git clone https://github.com/Born-Digital-US/isle-ingest-samples.git unzip isle-ingest-samples/IMI/IMIasset_files.zip -d . chown -R islandora:www-data /mnt/ingest' > batch_installer.sh Update the script file permissions on the container: docker exec -it isle-apache-ld bash -c \"chmod 744 /mnt/ingest/batch_installer.sh\" Run batch_installer.sh on the container: docker exec -it isle-apache-ld bash -c \"/mnt/ingest/batch_installer.sh\"","title":"Set Up Batch Functionality and the IMI Module"},{"location":"cookbook-recipes/multi_importer_installation/#islandora-ingest-overview-and-imi-demonstration","text":"The script will pack a set of sample files in the local ingest_data directory Drill down to the ./ingest_data/isle-ingest-samples/IMI directory and look for the following three files: mods_twig_base.txt testCol-tn.png.zip testCol.csv Visit one of these two pages: on your Demo site > https://isle.localdomain/multi_importer on your Local site > https://yourlocalnamehere.localdomain/multi_importer Use the data in mods_twig_base.txt to create and save an IMI metadata template In the Drupal site, in the Navigation section on the left, click the \"Multi Import Objects\" link In the \"Choose your Data source type\" drop down, select \"Spreadsheet File to be uploaded\" aka a \".csv file\" and click the \"Next\" button. Click the \"Choose File\" button and select the csv file: \"testCol.csv\" and then click the \"Upload\" button. Click the \"Preprocess\" button In the \"Your data\" tab, toggle / click the \"Preview submitted...\" drop-down to verify there's data in your rows Go to the \"Templating\" tab: If there is not yet a twig template: Delete the sample {% block content %} Hello {{ name }}{% endblock %} from the \"Twig Template Input\" field. Copy and paste the \"mods_twig_base.txt\" template text into the template text area. Within the \"Manage your templates\" section at the bottom, click the \"Save Template As\" Enter a new name e.g. \"bd_mods_template\" in the \"Name for your new template\" field and then click the \"Save Template\" button. A green check mark will indicate a successful save. Else if there is a preexisting twig template -select the previously saved template. Go to the \"CMODEL Mapping\" tab: Select from the drop-down list; \"cmodel\" and click the \"Check CMODELS\" button. A block of drop-downs should appear for each CModel you have in your input (.csv) DC - \"default XSLT\" TN - select \"tn\" Go to the \"Object Properties Tab\" and within the \"Source Field Mapping\" table: Set \"Object Pid\" to \"collection_pid\" and uncheck the checkbox for \"Check to let Islandora build PID...\" Set \"Parent Object\" to \"parent\" and leave checkbox checked for \"If value is not a well formed PID...\" Set \"Object Label\" to \"title\" Set \"Sequence and Ordering\" to \"collection_pid\" ( most likely default ) Set \"Remote DS sources\" to \"ZIP\" Leave the \"What Type of Batch Action\u2026\" as it is (\"ingest new objects\") ( most likely default ) Click on the \"Ingest\" button Click the \"Choose File\" button and select the zip file: \"testCol-tn.png.zip\" and the click the \"Upload\" button. Please note: There will be this warning \"For security reasons, your upload has been renamed to testCol-tn.png_.zip.\" Ignore it. Click the \"Ingest\" button Now you should see a green message box e.g. \"You are all set( id = 1)!\" with a set ID that is a link. Click on the \"id = \" link. The \"Set __ Batch Queue\" prompt / overlay should appear. Click on the link: \"Process Set\" Click on the \"Start Batch Processing\" button You should see \"Processing complete\" message. Click on the \"home\" icon at the top left hand of the site to get back to the homepage. Within the \"Navigation\" links, click on \"Islandora Repository\". Within the list of collections you should see your new \"Test Collection\" with a witty thumbnail icon. Click on the icon. To set the CMODELS for this collection, click on the \"Manage\" tab. Go to the \"Collection\" sub-tab, then to the \"Manage Collection Policy\" sub-tab ( should be there by default ) and then check ALL the check boxes within the \"About Collection Policies\" table to the right. Click the \"Update Collection Policy\" button. A green check mark message \"updated collection policy...\" should appear.","title":"Islandora ingest overview and IMI demonstration"},{"location":"cookbook-recipes/multi_importer_installation/#proceed-to-test-a-full-imi-ingest-using-the-local-file-system-option-objects-will-be-ingested-in-to-the-test-collection-created-above","text":"In this section, we will use a Google sheet for our sample metadata In the Drupal site, Navigation section on the left, click the \"Multi Import Objects\" link In the \"Choose your Data source type\" drop down, select \"Google Sheet URL\" and click the \"Next\" button. In the \"ID of your Google sheet\" box, paste in: 1sZ0FY27nxkhM4lCrSZ9nY9mLbr-ljKaZdqTyiRmknTM Cell Range: Sheet1!A1:AF14 Click the \"Preprocess\" button In the \"Your data\" tab, toggle / click the \"Preview submitted...\" drop-down to verify there's data in your rows Go to the \"Templating\" tab and select the template created above. E.g. \"bd_mods_template\" Go to the \"CMODEL Mapping\" tab: Select from the drop-down list; \"cmodel\" and click the \"Check CMODELS\" button. A block of drop-downs should appear for each CModel you have in your input: islandora:sp_large_image_cmodel, islandora:sp-audioCModel, islandora:compoundCModel, islandora:bookCModel, islandora:pageCModel and islandora:sp_pdf For each Content Model, set the following: DC - \"default XSLT\" MODS - \"bd_mods_template\" OBJ - \"obj_file\" TN - select \"tn\" All others: \"Build Using islandora generated derivatives\" OR \"-- Don't Create --\", depending on how fully you want to test ingest. The more derivatives you create, the longer the ingest process will be. Go to the \"Object Properties Tab\" and within the \"Source Field Mapping\" table: Set \"Object Pid\" to \"collection_pid\" and uncheck the checkbox for \"Check to let Islandora build PID...\" Set \"Parent Object\" to \"parent\" and leave checkbox checked for \"If value is not a well formed PID...\" Set \"Object Label\" to \"title\" Set \"Sequence and Ordering\" to \"sequence\" Set \"Remote DS sources\" to \"local\" Leave the \"What Type of Batch Action\u2026\" as it is (\"ingest new objects\") ( most likely default ) Click on the \"Ingest\" button Now you should see a green message box e.g. \"You are all set( id = #)!\" with a set ID that is a link. Click on the \"id = \" link. The \"Set __ Batch Queue\" prompt / overlay should appear. Click on the link: \"Process Set\" Click on the \"Start Batch Processing\" button You should see \"Processing complete\" message.","title":"Proceed to test a full IMI ingest using the local file system option.  Objects will be ingested in to the test collection created above."},{"location":"cookbook-recipes/multi_importer_installation/#view-the-test-objects","text":"Click on the \"home\" icon at the top left hand of the site to get back to the homepage. Within the \"Navigation\" links, click on \"Islandora Repository\". Click on the \"Test Collection\" Thumbnail The ingested objects should be listed.","title":"View the test objects"},{"location":"cookbook-recipes/multi_importer_installation/#other-useful-links","text":"ISLE Documentation Site More Sample Ingest Objects from Born Digital IMI Github Islandora Documentation - How to Add an Item to a Digital Collection Islandora Documentation - How to Batch Ingest Files","title":"Other Useful links:"},{"location":"cookbook-recipes/previous-release-docs/","text":"Using Documentation for an Earlier Release The documentation at https://islandora-collaboration-group.github.io/ISLE/ will always correspond to the latest release. While the ISLE maintainers suggest always running the latest release to ensure the most up-to-date production environment, some situations may require a user to need to review or follow the documentation for a prior release. When a previous release is checked out of git (ex: git checkout ISLE-1.2.0 ) the documentation for that release is included in the repository in the /docs directory. This page assumes you have already cloned the ISLE repository locally . Documentation can be viewed a few ways: The raw markdown text files can be viewed directly. Many text editors include a markdown viewer, or one can be installed as an add-on. This will interpret the markdown, so formatting will be correct and embedded links should work. This method is simple, but because the ISLE pages are compiled with MkDocs, some formatting will differ from the original, and the navigation menu will not be rendered at all. Preferred MkDocs can be installed and run locally. Documentation pages will appear exactly as they do on the GitHub.io site, and the navigation menu will function properly. Importantly, some obsolete pages may still be in the /docs directory but will not be linked to on the MkDocs version which can help avoid confusion. Read further for instructions for using MkDocs. About MkDocs MkDocs performs two basic functions: - It uses a theme template and YAML file to generate static HTML pages. - It functions as a local web server so the resulting HTML pages can be viewed in a browser. Prerequisites MkDocs requires Python. The MkDocs website has good documentation on how to set up Python and is a good place to start, especially Windows users as it contains useful advice necessary to make the commands below work smoothly. MkDocs generally runs well on Windows, MacOSX and Linux. Once MkDocs is installed and working properly, install the Material theme: pip install mkdocs-material or pip install mkdocs-material --user if you get permissions errors on Linux Running MkDocs In a terminal (PowerShell or Git Bash in Windows), cd to the directory you have cloned ISLE into: cd /path/to/ISLE Run the MkDocs server: mkdocs serve Windows users may need to run python -m mkdocs serve as described on the MkDocs website. If the command runs successfully, you will see something like the following: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - about/project-history.md - appendices/environment-files.md - contributor-docs/editing-local.md - contributor-docs/editing-online.md - contributor-docs/making-pr-guide.md - contributor-docs/overview.md - contributor-docs/policies.md - cookbook-recipes/preview-release-docs.md - install/install-demo-edit-hosts-file.md - install/install-demo-resources.md - install/install-local-resources.md - specifications/diagram-network.md - specifications/docker-containers-images.md - specifications/dockerfiles.md - specifications/resource-matrix.md - specifications/supported-drupal-modules-matrix.md - specifications/supported-software-matrix.md [I 191008 12:04:07 server:296] Serving on http://127.0.0.1:8000 [I 191008 12:04:07 handlers:62] Start watching changes [I 191008 12:04:07 handlers:64] Start detecting changes You can safely ignore the INFO about pages not in the \"nav\" configuration. The important piece of information here is the local web address for the site, usually http://127.0.0.1:8000 . Paste that into your browser to view the documentation.","title":"Finding and Using Documentation for a Previous Release"},{"location":"cookbook-recipes/previous-release-docs/#using-documentation-for-an-earlier-release","text":"The documentation at https://islandora-collaboration-group.github.io/ISLE/ will always correspond to the latest release. While the ISLE maintainers suggest always running the latest release to ensure the most up-to-date production environment, some situations may require a user to need to review or follow the documentation for a prior release. When a previous release is checked out of git (ex: git checkout ISLE-1.2.0 ) the documentation for that release is included in the repository in the /docs directory. This page assumes you have already cloned the ISLE repository locally . Documentation can be viewed a few ways: The raw markdown text files can be viewed directly. Many text editors include a markdown viewer, or one can be installed as an add-on. This will interpret the markdown, so formatting will be correct and embedded links should work. This method is simple, but because the ISLE pages are compiled with MkDocs, some formatting will differ from the original, and the navigation menu will not be rendered at all. Preferred MkDocs can be installed and run locally. Documentation pages will appear exactly as they do on the GitHub.io site, and the navigation menu will function properly. Importantly, some obsolete pages may still be in the /docs directory but will not be linked to on the MkDocs version which can help avoid confusion. Read further for instructions for using MkDocs.","title":"Using Documentation for an Earlier Release"},{"location":"cookbook-recipes/previous-release-docs/#about-mkdocs","text":"MkDocs performs two basic functions: - It uses a theme template and YAML file to generate static HTML pages. - It functions as a local web server so the resulting HTML pages can be viewed in a browser.","title":"About MkDocs"},{"location":"cookbook-recipes/previous-release-docs/#prerequisites","text":"MkDocs requires Python. The MkDocs website has good documentation on how to set up Python and is a good place to start, especially Windows users as it contains useful advice necessary to make the commands below work smoothly. MkDocs generally runs well on Windows, MacOSX and Linux. Once MkDocs is installed and working properly, install the Material theme: pip install mkdocs-material or pip install mkdocs-material --user if you get permissions errors on Linux","title":"Prerequisites"},{"location":"cookbook-recipes/previous-release-docs/#running-mkdocs","text":"In a terminal (PowerShell or Git Bash in Windows), cd to the directory you have cloned ISLE into: cd /path/to/ISLE Run the MkDocs server: mkdocs serve Windows users may need to run python -m mkdocs serve as described on the MkDocs website. If the command runs successfully, you will see something like the following: $ mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - about/project-history.md - appendices/environment-files.md - contributor-docs/editing-local.md - contributor-docs/editing-online.md - contributor-docs/making-pr-guide.md - contributor-docs/overview.md - contributor-docs/policies.md - cookbook-recipes/preview-release-docs.md - install/install-demo-edit-hosts-file.md - install/install-demo-resources.md - install/install-local-resources.md - specifications/diagram-network.md - specifications/docker-containers-images.md - specifications/dockerfiles.md - specifications/resource-matrix.md - specifications/supported-drupal-modules-matrix.md - specifications/supported-software-matrix.md [I 191008 12:04:07 server:296] Serving on http://127.0.0.1:8000 [I 191008 12:04:07 handlers:62] Start watching changes [I 191008 12:04:07 handlers:64] Start detecting changes You can safely ignore the INFO about pages not in the \"nav\" configuration. The important piece of information here is the local web address for the site, usually http://127.0.0.1:8000 . Paste that into your browser to view the documentation.","title":"Running MkDocs"},{"location":"install/host-hardware-requirements/","text":"Hardware Requirements The ISLE host server can be a personal computer, physical server, virtual machine (VM) or cloud service. An SSH connection with a user that has root or admin privileges is necessary. If you need help requesting a server environment, please see the Sample IT Department Request Letter . Known working operating systems and distributions: Ubuntu 18.04 LTS (also: Ubuntu 16.04 LTS) CentOS 7.x MacOS Windows 10 Professional or Enterprise (Read the Warning about Red Hat Install ) Please select your hardware environment: Production Server Staging Server Personal Computer (Demo or Local) Production Server Below are the recommended minimum specifications for a production server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1-4 cores each) 16-32 GB of RAM is recommended 30-50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection For Migrations only Please ensure you have enough storage space for your entire collection or that you can access those data via a network or other file-sharing protocol. Please continue by selecting: Software Dependencies . Staging Server Below are the recommended minimum specifications for a staging server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1-4 cores each) 8-16 GB of RAM is recommended 30-50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection Please continue by selecting: Software Dependencies . Personal Computer (Demo or Local) Below are the recommended specifications for a personal computer running a Demo ISLE Installation: Your own OS (Mac OSX, Windows 10, Linux, etc.) Minimum of 2 CPU cores 8-16 GB of RAM is recommended Sufficient hard drive or attached storage to hold a small test collection (depending on your testing ~5-10GB for objects and their derivatives) Please continue by selecting: Software Dependencies .","title":"1. Hardware Requirements"},{"location":"install/host-hardware-requirements/#hardware-requirements","text":"The ISLE host server can be a personal computer, physical server, virtual machine (VM) or cloud service. An SSH connection with a user that has root or admin privileges is necessary. If you need help requesting a server environment, please see the Sample IT Department Request Letter . Known working operating systems and distributions: Ubuntu 18.04 LTS (also: Ubuntu 16.04 LTS) CentOS 7.x MacOS Windows 10 Professional or Enterprise (Read the Warning about Red Hat Install ) Please select your hardware environment: Production Server Staging Server Personal Computer (Demo or Local)","title":"Hardware Requirements"},{"location":"install/host-hardware-requirements/#production-server","text":"Below are the recommended minimum specifications for a production server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1-4 cores each) 16-32 GB of RAM is recommended 30-50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection For Migrations only Please ensure you have enough storage space for your entire collection or that you can access those data via a network or other file-sharing protocol. Please continue by selecting: Software Dependencies .","title":"Production Server"},{"location":"install/host-hardware-requirements/#staging-server","text":"Below are the recommended minimum specifications for a staging server. The server can be a local or hosted physical server or virtual machine, or it can be a cloud hosted platform (AWS, GCP, etc.). Ubuntu 18.04 LTS or CentOS 7.x running on a server or virtual machine Minimum 2 CPU's (with 1-4 cores each) 8-16 GB of RAM is recommended 30-50GB for the server OS and overhead Sufficient hard drive or attached storage to hold your collection Please continue by selecting: Software Dependencies .","title":"Staging Server"},{"location":"install/host-hardware-requirements/#personal-computer-demo-or-local","text":"Below are the recommended specifications for a personal computer running a Demo ISLE Installation: Your own OS (Mac OSX, Windows 10, Linux, etc.) Minimum of 2 CPU cores 8-16 GB of RAM is recommended Sufficient hard drive or attached storage to hold a small test collection (depending on your testing ~5-10GB for objects and their derivatives) Please continue by selecting: Software Dependencies .","title":"Personal Computer (Demo or Local)"},{"location":"install/host-software-dependencies/","text":"Software Dependencies Please select your operating system: Ubuntu CentOS Mac Windows Ubuntu Step 1: Install Server Prerequisites and Git Open a terminal on your personal computer and ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Update and install the following required software: apt-get update && upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common Step 2: Install Docker Add the Docker Repository. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update package list. apt-get update Install Docker. apt-get install -y docker-ce Enable and start Docker. systemctl enable docker && systemctl start docker Step 3: Install Docker-Compose Find the latest Docker-Compose version here: https://docs.docker.com/compose/install/ Go to the \"Install Compose\" section, select your operating system, and complete the steps to install Docker-Compose. Test the Installation. docker-compose --version Example output: docker-compose version 1.27.4, build 40524192 Step 4: Add Your User to the docker Group Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update). Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site CentOS Step 1: Install Server Prerequisites and Git Open a terminal on your personal computer and ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Add the CentOS/RHEL epel-release package repository. yum install -y epel-release Install the following: yum install -y openssl git htop ntp wget curl nano yum install -y yum-utils device-mapper-persistent-data lvm2 Step 2: Install Docker Add the Docker Repository. yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo Install Docker. yum install -y docker-ce Step 3: Install Docker-Compose Find the latest Docker-Compose version here: https://docs.docker.com/compose/install/ Go to the \"Install Compose\" section, select your operating system, and complete the steps to install Docker-Compose. Test the Installation. docker-compose --version Example output: docker-compose version 1.27.4, build 40524192 Step 4: Add Your User to the docker Group Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update). Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Mac Step 1: Install Git Git must be installed to get a copy (called a clone ) of the current ISLE project. (Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people.) Open a terminal (launch Spotlight, type \"Terminal,\" double-click result \"Terminal\") Enter: git --version If git is already installed, the above command will output the installed version number. Example: \"git version 2.15.1\" If git is not installed, the above command may trigger the \"Install Command Line Developer Tools\" prompt to appear. If so: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button. If git is not installed and there is no prompt to \"Install Command Line Developer Tools\", then use this tutorial to Install Git on Mac OS X . Enter the following to fix a potential issue with long filenames: git config --system core.longpaths true Step 2: Install Docker for Mac Click Docker Desktop and follow these instructions to download and install: Click: Sign In (or Sign Up if you need an account) Click the button: Get Stable (or Download Docker Desktop ) Finish installing Docker Desktop Important Docker installation notes: If Docker prompts you to restart the personal computer, please do so. If Docker prompts you to install additional Docker updates, please do so. If Docker prompts you (with a popup dialogue) to Login with your Docker ID , you may do so with your Docker.com account information, or you may skip it and close the window as Docker is already running; you do not need to login to use it. If Docker prompts you for access to your computer's filesystem, please do so, then close the dialogue window. When the installation is finished: Launch the \"Docker Desktop\" application from the Applications directory This process should may take 2-5 minutes depending on the speed of your hard-drive. When \"Docker Desktop\" is fully started, a whale icon will appear at top of the screen. Clicking on this icon should show the message: \"Docker Desktop is running\". Step 3: Install Docker-Compose The Docker installation has installed the newest version of docker-compose . Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Windows Step 1: Install \"Git for Windows\" \"Git for Windows\" will install both \"Git\" and \"Git Bash\". Git must be installed so you may get a copy (called a \"clone\") of the current ISLE project. Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Git Bash is a useful command line interface that behaves similarly to LINUX and UNIX environments; you will use this to enter commands provided below. Let's begin by checking to see if you have \"Git Bash\" already installed. Press the Windows key. Type Git Bash Is \"Git Bash\" installed? If you see \"Git Bash\" listed, then it is installed. If \"Git Bash\" is not installed, please install \"Git for Windows\" now: Download: Git for Windows Click Download ; Save this file to your Desktop; double-click that file to install; then click Yes to the prompt. Click Next and accept ALL of the installer's default selections, with one exception: Choosing the default editor used by Git: Which editor would you like Git to use? Select your preferred text editor (we recommend \"Atom\"). If you select \"Atom\" and do not yet have it installed, the installer expects you to use the provided Atom link to download and install Atom. When that is completed, return to the Git for Windows installer, click Next and complete that installation. (If Next is greyed out, click Back then Next to continue...) Press the Windows key Type Git Bash RIGHT-CLICK the \"Git Bash\" app to open it; select Run as administrator ; then click Yes to the prompt. In the Git Bash terminal: Enter: git --version The above command will output the installed version number. This confirms that git is properly installed. Example: \"git version 2.23.0.windows.1\" Check for updates: Enter: git update-git-for-windows Enter the following to fix a potential issue with long filenames: git config --system core.longpaths true Step 2: Install \"Docker Desktop for Windows\" Important: Docker requires Windows Professional or Windows Enterprise Click Docker Desktop for Windows and follow these instructions to download and install: Click: Sign In (or Sign Up if you need an account) Click the button: Get Stable ) Save this file to your Desktop; double-click that file to install; then click Yes to the prompt. Click OK or Next and accept ALL of the installer's default selections. Important Docker installation notes: If Docker prompts you to restart the personal computer, please do so. If Docker prompts you to install additional Docker updates, please do so. If Docker prompts you to enable WSL 2 or Hyper-V and Containers features , click OK . If Docker prompts you (with a popup dialogue) to Login with your Docker ID , you may do so with your Docker.com account information, or you may skip it and close the window as Docker is already running; you do not need to login to use it. When the installation is finished: Press the Windows key Type Docker Desktop Click the \"Docker Desktop\" app to open it When \"Docker Desktop\" is fully started, a whale icon will appear in the Windows \"Notification Area\". Hovering over this icon should show the message: \"Docker Desktop is running\". If you chose Hyper-V, then Enable Docker Shared Drives (ignore this if you are running WSL 2) Right-click on the Docker whale icon Select \"Settings\" Select \"Shared Drives\" Check the box for your local \"C\" drive Click \"Apply\" If Docker prompts you for access to your computer's filesystem, please do so, then close the dialogue window. Step 3: Install Docker-Compose The Docker installation has installed the newest version of docker-compose . Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site","title":"2. Software Dependencies"},{"location":"install/host-software-dependencies/#software-dependencies","text":"Please select your operating system: Ubuntu CentOS Mac Windows","title":"Software Dependencies"},{"location":"install/host-software-dependencies/#ubuntu","text":"","title":"Ubuntu"},{"location":"install/host-software-dependencies/#step-1-install-server-prerequisites-and-git","text":"Open a terminal on your personal computer and ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Update and install the following required software: apt-get update && upgrade apt-get install -y openssl git htop ntp wget curl nano apt-transport-https ca-certificates software-properties-common","title":"Step 1: Install Server Prerequisites and Git"},{"location":"install/host-software-dependencies/#step-2-install-docker","text":"Add the Docker Repository. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" Update package list. apt-get update Install Docker. apt-get install -y docker-ce Enable and start Docker. systemctl enable docker && systemctl start docker","title":"Step 2: Install Docker"},{"location":"install/host-software-dependencies/#step-3-install-docker-compose","text":"Find the latest Docker-Compose version here: https://docs.docker.com/compose/install/ Go to the \"Install Compose\" section, select your operating system, and complete the steps to install Docker-Compose. Test the Installation. docker-compose --version Example output: docker-compose version 1.27.4, build 40524192","title":"Step 3: Install Docker-Compose"},{"location":"install/host-software-dependencies/#step-4-add-your-user-to-the-docker-group","text":"Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update). Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site","title":"Step 4: Add Your User to the docker Group"},{"location":"install/host-software-dependencies/#centos","text":"","title":"CentOS"},{"location":"install/host-software-dependencies/#step-1-install-server-prerequisites-and-git_1","text":"Open a terminal on your personal computer and ssh to the server or VM. You must have root level permissions. If you are not already root , enter either sudo -s or sudo su to become root. Add the CentOS/RHEL epel-release package repository. yum install -y epel-release Install the following: yum install -y openssl git htop ntp wget curl nano yum install -y yum-utils device-mapper-persistent-data lvm2","title":"Step 1: Install Server Prerequisites and Git"},{"location":"install/host-software-dependencies/#step-2-install-docker_1","text":"Add the Docker Repository. yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo Install Docker. yum install -y docker-ce","title":"Step 2: Install Docker"},{"location":"install/host-software-dependencies/#step-3-install-docker-compose_1","text":"Find the latest Docker-Compose version here: https://docs.docker.com/compose/install/ Go to the \"Install Compose\" section, select your operating system, and complete the steps to install Docker-Compose. Test the Installation. docker-compose --version Example output: docker-compose version 1.27.4, build 40524192","title":"Step 3: Install Docker-Compose"},{"location":"install/host-software-dependencies/#step-4-add-your-user-to-the-docker-group_1","text":"Allow your user to run Docker commands and to launch the entire ISLE stack. If you are still root ( whoami ), type exit to become your normal user. Add yourself to the docker group. sudo usermod -aG docker $USER Type exit and then reconnect (this allows your effective groups to update). Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site","title":"Step 4: Add Your User to the docker Group"},{"location":"install/host-software-dependencies/#mac","text":"","title":"Mac"},{"location":"install/host-software-dependencies/#step-1-install-git","text":"Git must be installed to get a copy (called a clone ) of the current ISLE project. (Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people.) Open a terminal (launch Spotlight, type \"Terminal,\" double-click result \"Terminal\") Enter: git --version If git is already installed, the above command will output the installed version number. Example: \"git version 2.15.1\" If git is not installed, the above command may trigger the \"Install Command Line Developer Tools\" prompt to appear. If so: Click on the blue Install button for the license agreement. Click the white Agree button. The package will take 1-2 minutes to download. Click the Done button. If git is not installed and there is no prompt to \"Install Command Line Developer Tools\", then use this tutorial to Install Git on Mac OS X . Enter the following to fix a potential issue with long filenames: git config --system core.longpaths true","title":"Step 1: Install Git"},{"location":"install/host-software-dependencies/#step-2-install-docker-for-mac","text":"Click Docker Desktop and follow these instructions to download and install: Click: Sign In (or Sign Up if you need an account) Click the button: Get Stable (or Download Docker Desktop ) Finish installing Docker Desktop Important Docker installation notes: If Docker prompts you to restart the personal computer, please do so. If Docker prompts you to install additional Docker updates, please do so. If Docker prompts you (with a popup dialogue) to Login with your Docker ID , you may do so with your Docker.com account information, or you may skip it and close the window as Docker is already running; you do not need to login to use it. If Docker prompts you for access to your computer's filesystem, please do so, then close the dialogue window. When the installation is finished: Launch the \"Docker Desktop\" application from the Applications directory This process should may take 2-5 minutes depending on the speed of your hard-drive. When \"Docker Desktop\" is fully started, a whale icon will appear at top of the screen. Clicking on this icon should show the message: \"Docker Desktop is running\".","title":"Step 2: Install Docker for Mac"},{"location":"install/host-software-dependencies/#step-3-install-docker-compose_2","text":"The Docker installation has installed the newest version of docker-compose . Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site","title":"Step 3: Install Docker-Compose"},{"location":"install/host-software-dependencies/#windows","text":"","title":"Windows"},{"location":"install/host-software-dependencies/#step-1-install-git-for-windows","text":"\"Git for Windows\" will install both \"Git\" and \"Git Bash\". Git must be installed so you may get a copy (called a \"clone\") of the current ISLE project. Git is a software version control system for tracking changes in computer files and coordinating work on those files among multiple people. Git Bash is a useful command line interface that behaves similarly to LINUX and UNIX environments; you will use this to enter commands provided below. Let's begin by checking to see if you have \"Git Bash\" already installed. Press the Windows key. Type Git Bash Is \"Git Bash\" installed? If you see \"Git Bash\" listed, then it is installed. If \"Git Bash\" is not installed, please install \"Git for Windows\" now: Download: Git for Windows Click Download ; Save this file to your Desktop; double-click that file to install; then click Yes to the prompt. Click Next and accept ALL of the installer's default selections, with one exception: Choosing the default editor used by Git: Which editor would you like Git to use? Select your preferred text editor (we recommend \"Atom\"). If you select \"Atom\" and do not yet have it installed, the installer expects you to use the provided Atom link to download and install Atom. When that is completed, return to the Git for Windows installer, click Next and complete that installation. (If Next is greyed out, click Back then Next to continue...) Press the Windows key Type Git Bash RIGHT-CLICK the \"Git Bash\" app to open it; select Run as administrator ; then click Yes to the prompt. In the Git Bash terminal: Enter: git --version The above command will output the installed version number. This confirms that git is properly installed. Example: \"git version 2.23.0.windows.1\" Check for updates: Enter: git update-git-for-windows Enter the following to fix a potential issue with long filenames: git config --system core.longpaths true","title":"Step 1: Install \"Git for Windows\""},{"location":"install/host-software-dependencies/#step-2-install-docker-desktop-for-windows","text":"Important: Docker requires Windows Professional or Windows Enterprise Click Docker Desktop for Windows and follow these instructions to download and install: Click: Sign In (or Sign Up if you need an account) Click the button: Get Stable ) Save this file to your Desktop; double-click that file to install; then click Yes to the prompt. Click OK or Next and accept ALL of the installer's default selections. Important Docker installation notes: If Docker prompts you to restart the personal computer, please do so. If Docker prompts you to install additional Docker updates, please do so. If Docker prompts you to enable WSL 2 or Hyper-V and Containers features , click OK . If Docker prompts you (with a popup dialogue) to Login with your Docker ID , you may do so with your Docker.com account information, or you may skip it and close the window as Docker is already running; you do not need to login to use it. When the installation is finished: Press the Windows key Type Docker Desktop Click the \"Docker Desktop\" app to open it When \"Docker Desktop\" is fully started, a whale icon will appear in the Windows \"Notification Area\". Hovering over this icon should show the message: \"Docker Desktop is running\". If you chose Hyper-V, then Enable Docker Shared Drives (ignore this if you are running WSL 2) Right-click on the Docker whale icon Select \"Settings\" Select \"Shared Drives\" Check the box for your local \"C\" drive Click \"Apply\" If Docker prompts you for access to your computer's filesystem, please do so, then close the dialogue window.","title":"Step 2: Install \"Docker Desktop for Windows\""},{"location":"install/host-software-dependencies/#step-3-install-docker-compose_3","text":"The Docker installation has installed the newest version of docker-compose . Your host server is now configured and ready to install ISLE. Please continue by selecting your type of installation: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site","title":"Step 3: Install Docker-Compose"},{"location":"install/install-demo-edit-hosts-file/","text":"Demo or Local: Edit the \"/etc/hosts\" File Edit the /etc/hosts file to view ISLE locally on a personal computer browser. Please select your operating system and software: Mac or Ubuntu Using Docker Windows Using Docker Mac or Ubuntu Using Docker Open a terminal on the personal computer. Enter: sudo nano /etc/hosts For end users familiar with editing files on the command line, vim, emacs or alternative tools can be used in lieu of nano Enter the personal computer end user password Select the appropriate installation scenario, below: For Demo ISLE Installations: Find the 127.0.0.1 localhost entry in the /etc/hosts file. Go to end of same line, add one space, and then paste the following: isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain For Local ISLE Installations: Find the 127.0.0.1 localhost entry in the /etc/hosts file. Go to end of same line, add one space, and then paste the following, substituting yourprojectnamehere with your preferred name: yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Note: While not required, it is perfectly okay to have multiple lines so as to define both the Demo and the Local ISLE installations, as shown in the example below: 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain 127.0.0.1 localhost yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Please return to the appropriate installation: Demo ISLE Installation and continue with Step 2 . Local ISLE Installation: New Site and continue with Step 2 . Local ISLE Installation: Migrate Existing Islandora Site and continue with Step 2 . Windows Using Docker For end users running Windows 10: Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open . In the File name: input box, paste this path C:\\Windows\\System32\\Drivers\\etc\\hosts . Click Open . Select the appropriate installation scenario, below: For Demo ISLE Installations: Find the 127.0.0.1 localhost entry and uncomment it (by deleting the preceding # character). Go to end of same line, add one space, and then paste the following: isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain For Local ISLE Installations: Find the 127.0.0.1 localhost entry and uncomment it (by deleting the preceding # character). Go to end of same line, add one space, and then paste the following, substituting yourprojectnamehere with your preferred name: yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Note: While not required, it is perfectly okay to have multiple lines so as to define both the Demo and the Local ISLE installations, as shown in the example below: 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain 127.0.0.1 localhost yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Click File > Save , and then File -> Exit . Please return to the appropriate installation: Demo ISLE Installation and continue with Step 2 . Local ISLE Installation: New Site and continue with Step 2 . Local ISLE Installation: Migrate Existing Islandora Site and continue with Step 2 .","title":"Demo or Local: Edit the \"/etc/hosts\" File"},{"location":"install/install-demo-edit-hosts-file/#demo-or-local-edit-the-etchosts-file","text":"Edit the /etc/hosts file to view ISLE locally on a personal computer browser. Please select your operating system and software: Mac or Ubuntu Using Docker Windows Using Docker","title":"Demo or Local: Edit the \"/etc/hosts\" File"},{"location":"install/install-demo-edit-hosts-file/#mac-or-ubuntu-using-docker","text":"Open a terminal on the personal computer. Enter: sudo nano /etc/hosts For end users familiar with editing files on the command line, vim, emacs or alternative tools can be used in lieu of nano Enter the personal computer end user password Select the appropriate installation scenario, below: For Demo ISLE Installations: Find the 127.0.0.1 localhost entry in the /etc/hosts file. Go to end of same line, add one space, and then paste the following: isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain For Local ISLE Installations: Find the 127.0.0.1 localhost entry in the /etc/hosts file. Go to end of same line, add one space, and then paste the following, substituting yourprojectnamehere with your preferred name: yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Note: While not required, it is perfectly okay to have multiple lines so as to define both the Demo and the Local ISLE installations, as shown in the example below: 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain 127.0.0.1 localhost yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Enter Cntrl and the letter o together to write the changes to the file. Enter Cntrl and the letter x together to exit the file. Please return to the appropriate installation: Demo ISLE Installation and continue with Step 2 . Local ISLE Installation: New Site and continue with Step 2 . Local ISLE Installation: Migrate Existing Islandora Site and continue with Step 2 .","title":"Mac or Ubuntu Using Docker"},{"location":"install/install-demo-edit-hosts-file/#windows-using-docker","text":"For end users running Windows 10: Press the Windows key. Type Notepad . In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open . In the File name: input box, paste this path C:\\Windows\\System32\\Drivers\\etc\\hosts . Click Open . Select the appropriate installation scenario, below: For Demo ISLE Installations: Find the 127.0.0.1 localhost entry and uncomment it (by deleting the preceding # character). Go to end of same line, add one space, and then paste the following: isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain For Local ISLE Installations: Find the 127.0.0.1 localhost entry and uncomment it (by deleting the preceding # character). Go to end of same line, add one space, and then paste the following, substituting yourprojectnamehere with your preferred name: yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Note: While not required, it is perfectly okay to have multiple lines so as to define both the Demo and the Local ISLE installations, as shown in the example below: 127.0.0.1 localhost isle.localdomain admin.isle.localdomain images.isle.localdomain portainer.isle.localdomain 127.0.0.1 localhost yourprojectnamehere.localdomain admin.yourprojectnamehere.localdomain images.yourprojectnamehere.localdomain portainer.yourprojectnamehere.localdomain Click File > Save , and then File -> Exit . Please return to the appropriate installation: Demo ISLE Installation and continue with Step 2 . Local ISLE Installation: New Site and continue with Step 2 . Local ISLE Installation: Migrate Existing Islandora Site and continue with Step 2 .","title":"Windows Using Docker"},{"location":"install/install-demo-resources/","text":"Demo ISLE Installation: Resources Local URL Always use the https://isle.localdomain domain to view and log in to a local site. (Do not use an IP address, such as https://10.10.10.130 or https://127.0.0.01 as some components may not function correctly.) Docker Containers: Passwords islandora user on the ISLE host server uses islandora as the password. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac 1. MySQL Container Compose Service Name Container Name Software Ports mysql isle-mysql-ld MySQL 5.7 3306 Account Password Database Perms root ild_mysqlrt_2018 ALL ALL fedora_admin ild_feddb_2018 fedora3 All except Grant option isle_ld_user isle_ld_db2018 isle_ld All except Grant option 2. Fedora Container Compose Service Name Container Name Software Ports fedora isle-fedora-ld see below 8080 mapped to 8081 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 7/2019 Tomcat 8.5.x Open JDK 8.x Account Password Service URL fedoraAdmin ild_fed_admin_2018 Fedora http://hostip:8081/fedora/describe fedoraIntCallUser ild_fed_IntCallUser_2018 Fedora http://hostip:8081/fedora/objects anonymous anonymous Fedora --- fgsAdmin ild_fgs_admin_2018 Gsearch http://hostip:8081/fedoragsearch/rest?operation=updateIndex admin isle_admin Tomcat http://hostip:8081/manager/html manager isle_manager Tomcat http://hostip:8081/manager/html 3. Solr Container Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8082 (on host) Software Version Solr 4.10.4 Tomcat 8.5.x OpenJDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html -- -- Solr http://hostip:8082/solr/ 4. Apache Container Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 OpenJDK 8.x Djatoka* 1.1 Drupal 7.57 PHP 7.1 Islandora 7.x * Djatoka is included because it bundles useful Kakadu binaries, but is not running as a service. Account Password Service URL isle isle Drupal site admin https://isle.localdomain 5. Proxy Container Compose Service Name Container Name Software Ports proxy isle-proxy Traefik 80, 443 Account Password Service URL None Required None Required Proxy UI https://admin.isle.localdomain OR http://hostip:8080 The Proxy Control Panel is available at admin.isle.localdomain . No username/password are required. This is unsafe for production environments. 6. Image Services Compose Service Name Container Name Software Ports image-services isle-images-ld see below 8080 (on container) mapped to 8083 (on host) Software Version Cantaloupe IIIF 4.x Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html admin isle_admin Cantaloupe http://hostip:8083/cantaloupe/admin 7. Portainer Portainer (a Docker control panel) is available at portainer.isle.localdomain . No username/password are required. This is unsafe for production environments. Return to Demo ISLE Installation .","title":"Demo ISLE Installation: Resources"},{"location":"install/install-demo-resources/#demo-isle-installation-resources","text":"","title":"Demo ISLE Installation: Resources"},{"location":"install/install-demo-resources/#local-url","text":"Always use the https://isle.localdomain domain to view and log in to a local site. (Do not use an IP address, such as https://10.10.10.130 or https://127.0.0.01 as some components may not function correctly.)","title":"Local URL"},{"location":"install/install-demo-resources/#docker-containers-passwords","text":"islandora user on the ISLE host server uses islandora as the password. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac","title":"Docker Containers: Passwords"},{"location":"install/install-demo-resources/#1-mysql-container","text":"Compose Service Name Container Name Software Ports mysql isle-mysql-ld MySQL 5.7 3306 Account Password Database Perms root ild_mysqlrt_2018 ALL ALL fedora_admin ild_feddb_2018 fedora3 All except Grant option isle_ld_user isle_ld_db2018 isle_ld All except Grant option","title":"1. MySQL Container"},{"location":"install/install-demo-resources/#2-fedora-container","text":"Compose Service Name Container Name Software Ports fedora isle-fedora-ld see below 8080 mapped to 8081 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 7/2019 Tomcat 8.5.x Open JDK 8.x Account Password Service URL fedoraAdmin ild_fed_admin_2018 Fedora http://hostip:8081/fedora/describe fedoraIntCallUser ild_fed_IntCallUser_2018 Fedora http://hostip:8081/fedora/objects anonymous anonymous Fedora --- fgsAdmin ild_fgs_admin_2018 Gsearch http://hostip:8081/fedoragsearch/rest?operation=updateIndex admin isle_admin Tomcat http://hostip:8081/manager/html manager isle_manager Tomcat http://hostip:8081/manager/html","title":"2. Fedora Container"},{"location":"install/install-demo-resources/#3-solr-container","text":"Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8082 (on host) Software Version Solr 4.10.4 Tomcat 8.5.x OpenJDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html -- -- Solr http://hostip:8082/solr/","title":"3. Solr Container"},{"location":"install/install-demo-resources/#4-apache-container","text":"Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 OpenJDK 8.x Djatoka* 1.1 Drupal 7.57 PHP 7.1 Islandora 7.x * Djatoka is included because it bundles useful Kakadu binaries, but is not running as a service. Account Password Service URL isle isle Drupal site admin https://isle.localdomain","title":"4. Apache Container"},{"location":"install/install-demo-resources/#5-proxy-container","text":"Compose Service Name Container Name Software Ports proxy isle-proxy Traefik 80, 443 Account Password Service URL None Required None Required Proxy UI https://admin.isle.localdomain OR http://hostip:8080 The Proxy Control Panel is available at admin.isle.localdomain . No username/password are required. This is unsafe for production environments.","title":"5. Proxy Container"},{"location":"install/install-demo-resources/#6-image-services","text":"Compose Service Name Container Name Software Ports image-services isle-images-ld see below 8080 (on container) mapped to 8083 (on host) Software Version Cantaloupe IIIF 4.x Account Password Service URL admin isle_admin Tomcat http://hostip:8082/manager/html manager isle_manager Tomcat http://hostip:8082/manager/html admin isle_admin Cantaloupe http://hostip:8083/cantaloupe/admin","title":"6. Image Services"},{"location":"install/install-demo-resources/#7-portainer","text":"Portainer (a Docker control panel) is available at portainer.isle.localdomain . No username/password are required. This is unsafe for production environments. Return to Demo ISLE Installation .","title":"7. Portainer"},{"location":"install/install-demo/","text":"Demo ISLE Installation Expectations: It takes an average of 45 minutes to read this documentation and complete this installation. This Demo ISLE Installation creates an Islandora environment on your personal computer that you can view locally in your browser as https://isle.localdomain . This process includes an un-themed Drupal website and an empty Fedora repository so you may ingest test objects, add or edit metadata, update fields in SOLR indexing, develop code, and otherwise \"kick the tires\" on ISLE. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Demo ISLE Installation is intended for a personal computer. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have already git cloned the ISLE Project to your personal computer. For Microsoft Windows: You have installed Git for Windows and will use its provided \"Git Bash\" as your command line interface; this behaves similarly to LINUX and UNIX environments. Step 1: Edit \"/etc/hosts\" File Enable the Demo ISLE Installation to be viewed locally on a personal computer browser as: https://isle.localdomain . Please use these instructions to Edit the \"/etc/hosts\" File . Step 2: Clone ISLE Repository Note: The location you select to clone the ISLE repository becomes your project directory. We recommend using the default user home directory. (You may choose a different location, but it must not be a protected folder such as system or root directory.) Open a terminal (Windows: open Git Bash ) Enter the following to change to the user's home directory: cd ~ Clone the repository: git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE: cd ISLE Enter the following command to display the present working directory (full path) of your ISLE project. pwd Please note the location of your ISLE project (from above command) as you will use that location path in subsequent steps. Example output (Mac): \"/Users/localmacaccount/ISLE\" Example output (Windows): \"/c/Users/somebody/ISLE\" For Microsoft Windows: Please follow the steps below to edit the \"demo.env\" file: Press the Windows key. Type Notepad In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open At top of dialog window, navigate to your ISLE project (refer to the output of the \"pwd\" command). At right side of dialog window, use the dropdown menu to change Text Documents (*.txt) to All Files (*.*) (Optional: see How to show hidden files ). Select the file: demo.env Click Open Find the following line: # COMPOSE_CONVERT_WINDOWS_PATHS=1 In the above line, delete the first two characters ( # ) so as to uncomment the line. It should now look like this: COMPOSE_CONVERT_WINDOWS_PATHS=1 Click File > Save , and then File -> Exit . Step 3: Download the ISLE Images Using the same open terminal: Navigate to your ISLE project directory. (You may already be in this directory.) Copy the sample.env to .env. By default, the Demo environment is setup. The .env is no longer tracked by git. ( ISLE versions =< 1.4.2 ) cp sample.env .env Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): docker-compose pull Step 4: Launch Process Using the same open terminal: Run the docker containers: docker-compose up -d Note: the \" -d\" argument stands for \"detached\" meaning the command will persist even if you close your terminal or your computer sleeps etc\u2026) Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use Demo ISLE Installation: Troubleshooting to solve before continuing below. Step 5: Run Islandora Drupal Site Install Script This process may take 10-20 minutes ( depending on system and internet speeds ) Run the install site script on the Apache container by copying and pasting the appropriate command: For Mac/Ubuntu/CentOS/etc: docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" For Microsoft Windows: winpty docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Proceed only after this message appears: \"Done. 'all' cache was cleared.\" Step 6: Test the Site In your web browser, enter this URL: https://isle.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site: Username: isle Password: isle Step 7: Ingest Sample Objects The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR Next Steps Once you are ready, you may progress to either: Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Additional Resources Demo ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Demo ISLE Installation","title":"3. Demo ISLE Installation"},{"location":"install/install-demo/#demo-isle-installation","text":"Expectations: It takes an average of 45 minutes to read this documentation and complete this installation. This Demo ISLE Installation creates an Islandora environment on your personal computer that you can view locally in your browser as https://isle.localdomain . This process includes an un-themed Drupal website and an empty Fedora repository so you may ingest test objects, add or edit metadata, update fields in SOLR indexing, develop code, and otherwise \"kick the tires\" on ISLE. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Demo ISLE Installation"},{"location":"install/install-demo/#assumptions-prerequisites","text":"This Demo ISLE Installation is intended for a personal computer. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have already git cloned the ISLE Project to your personal computer. For Microsoft Windows: You have installed Git for Windows and will use its provided \"Git Bash\" as your command line interface; this behaves similarly to LINUX and UNIX environments.","title":"Assumptions / Prerequisites"},{"location":"install/install-demo/#step-1-edit-etchosts-file","text":"Enable the Demo ISLE Installation to be viewed locally on a personal computer browser as: https://isle.localdomain . Please use these instructions to Edit the \"/etc/hosts\" File .","title":"Step 1: Edit \"/etc/hosts\" File"},{"location":"install/install-demo/#step-2-clone-isle-repository","text":"Note: The location you select to clone the ISLE repository becomes your project directory. We recommend using the default user home directory. (You may choose a different location, but it must not be a protected folder such as system or root directory.) Open a terminal (Windows: open Git Bash ) Enter the following to change to the user's home directory: cd ~ Clone the repository: git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Change to the directory containing ISLE: cd ISLE Enter the following command to display the present working directory (full path) of your ISLE project. pwd Please note the location of your ISLE project (from above command) as you will use that location path in subsequent steps. Example output (Mac): \"/Users/localmacaccount/ISLE\" Example output (Windows): \"/c/Users/somebody/ISLE\" For Microsoft Windows: Please follow the steps below to edit the \"demo.env\" file: Press the Windows key. Type Notepad In the search results, RIGHT-CLICK Notepad , select Run as administrator , and enter Yes to prompt. Select File -> Open At top of dialog window, navigate to your ISLE project (refer to the output of the \"pwd\" command). At right side of dialog window, use the dropdown menu to change Text Documents (*.txt) to All Files (*.*) (Optional: see How to show hidden files ). Select the file: demo.env Click Open Find the following line: # COMPOSE_CONVERT_WINDOWS_PATHS=1 In the above line, delete the first two characters ( # ) so as to uncomment the line. It should now look like this: COMPOSE_CONVERT_WINDOWS_PATHS=1 Click File > Save , and then File -> Exit .","title":"Step 2: Clone ISLE Repository"},{"location":"install/install-demo/#step-3-download-the-isle-images","text":"Using the same open terminal: Navigate to your ISLE project directory. (You may already be in this directory.) Copy the sample.env to .env. By default, the Demo environment is setup. The .env is no longer tracked by git. ( ISLE versions =< 1.4.2 ) cp sample.env .env Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): docker-compose pull","title":"Step 3: Download the ISLE Images"},{"location":"install/install-demo/#step-4-launch-process","text":"Using the same open terminal: Run the docker containers: docker-compose up -d Note: the \" -d\" argument stands for \"detached\" meaning the command will persist even if you close your terminal or your computer sleeps etc\u2026) Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use Demo ISLE Installation: Troubleshooting to solve before continuing below.","title":"Step 4: Launch Process"},{"location":"install/install-demo/#step-5-run-islandora-drupal-site-install-script","text":"This process may take 10-20 minutes ( depending on system and internet speeds ) Run the install site script on the Apache container by copying and pasting the appropriate command: For Mac/Ubuntu/CentOS/etc: docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" For Microsoft Windows: winpty docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Proceed only after this message appears: \"Done. 'all' cache was cleared.\"","title":"Step 5: Run Islandora Drupal Site Install Script"},{"location":"install/install-demo/#step-6-test-the-site","text":"In your web browser, enter this URL: https://isle.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site: Username: isle Password: isle","title":"Step 6: Test the Site"},{"location":"install/install-demo/#step-7-ingest-sample-objects","text":"The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR","title":"Step 7: Ingest Sample Objects"},{"location":"install/install-demo/#next-steps","text":"Once you are ready, you may progress to either: Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site","title":"Next Steps"},{"location":"install/install-demo/#additional-resources","text":"Demo ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-demo/#end-of-demo-isle-installation","text":"","title":"End of Demo ISLE Installation"},{"location":"install/install-environments/","text":"Overview: ISLE Installation Environments As of the ISLE 1.2.0 release, ISLE has the option to use clearly defined but different environments based on end user's needs. Depending on the environment choice, additional configuration changes will need to be made to ISLE configuration files, domain names, etc. We recommend that you install ISLE using the workflow and suggested order below. Demo - Used for trying out ISLE for the first time, having a sandbox for tests or to \"kick the tires\" on ISLE. Local - Used for Drupal site development, more extensive metadata, Solr and Fedora development work on a Local personal computer Staging - Used for remote (non-local or cloud) hosting of a Staging site. Islandora Drupal site code here is almost finished but viewed privately prior to pushing to public Production. Fedora data might have tests collections. Production - Used for remote (non-local or cloud) hosting of a Production site. Site and collections are public and accessible to the world. Drupal site code is finished, functional and polished. Fedora data has full non test collections. Test collections are not recommended here. Test - Used by ISLE Maintainers for testing ISLE releases, pull releases and ISLE development, etc. ISLE Project Structure The ISLE project .env file enables you to be define and launch a variety of ISLE environments. On each ISLE environment, you will edit the .env file to point to a corresponding docker-compose.*.yml file configured for that environment. The root of the ISLE project (ISLE version 1.2.0+) comes with multiple, pre-configured examples of docker-compose and .env files to match the variety of environments shown below. The outline below lists the files that you may have to edit, change or add to support each ISLE environment. Please note: as of ISLE release 1.5, the .env file is no longer tracked by git. Please copy the sample.env to .env and edit for the appropriate environment you'd like to use. * Example: cp sample.env .env .env - Demo docker-compose.demo.yml demo.env config/apache/php_ini/php.demo.ini config/mysql/ISLE.cnf config/proxy/ssl-certs/isle.localdomain.cert config/proxy/ssl-certs/isle.localdomain.key config/proxy/traefik.demo.toml Local docker-compose.local.yml local.env config/apache/php_ini/php.local.ini config/apache/settings_php/settings.local.php config/mysql/ISLE.cnf config/proxy/ssl-certs/yourprojectnamehere.localdomain.cert config/proxy/ssl-certs/yourprojectnamehere.localdomain.key config/proxy/traefik.local.toml Staging docker-compose.staging.yml staging.env config/apache/php_ini/php.staging.ini config/apache/settings_php/settings.staging.php config/mysql/ISLE.cnf config/proxy/ssl-certs If using Let's Encrypt: acme.json If using Commercial SSL Certs: yourprojectnamehere.domain-staging.cert yourprojectnamehere.domain-staging.key config/proxy/traefik.staging.toml Production docker-compose.production.yml production.env config/apache/php_ini/php.production.ini config/apache/settings_php/settings.production.php config/mysql/ISLE.cnf config/proxy/ssl-certs If using Let's Encrypt: acme.json If using Commercial SSL Certs: yourprojectnamehere.domain-production.cert yourprojectnamehere.domain-production.key config/proxy/traefik.production.toml Test docker-compose.test.yml test.env config/apache/php_ini/php.test.ini config/apache/settings_php/settings.test.php config/mysql/ISLE.cnf config/proxy/ssl-certs/isle.localdomain.cert config/proxy/ssl-certs/isle.localdomain.key config/proxy/traefik.test.toml ISLE Environments \".env\" reference This reference includes a combination of suggestions and actual values. You may use these environment descriptions or settings in each of your corresponding ISLE project .env files. Demo Used for trying out ISLE for the first time, having a sandbox for tests, etc. The Demo environment is the \"default\" activated environment. COMPOSE_PROJECT_NAME=isle_demo BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=ld COMPOSE_FILE=docker-compose.demo.yml Local Used for Drupal site development, more extensive metadata, Solr and Fedora development work on a personal computer To use this environment, change the values in the Activated ISLE environment to match the values described below and save the file. Inline comments below are merely suggestions except for the mandatory COMPOSE_FILE value. Otherwise change however you see fit. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME= # (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_local BASE_DOMAIN= # (Suggested) This is not a real domain and can be anything, so add your institution name only e.g. acme.localdomain CONTAINER_SHORT_ID=ld # (Mandatory) COMPOSE_FILE=docker-compose.local.yml # (Mandatory) The docker-compose file used for configuring and launching the Local environment. Staging Used for remote (non-local or cloud) hosting of a Staging site. Code here is almost finished but viewed privately prior to pushing to public Production. Please read through the docker-compose.staging.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. To use this environment, change the values in the Activated ISLE environment lines to match the values described below and save the file. Inline comments below are merely suggestions except for the mandatory COMPOSE_FILE value. Otherwise change however you see fit. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME= # (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_stage BASE_DOMAIN= # (Suggested) Add the full production domain here e.g. digital-staging.institution.edu CONTAINER_SHORT_ID= # (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections staging) is acdcs COMPOSE_FILE=docker-compose.staging.yml # (Mandatory) The docker-compose file used for configuring and launching the Staging environment. Production Used for remote (non-local or cloud) hosting of a Production site. Site and collections are public and accessible to the world. Please read through the docker-compose.production.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. To use this environment, change the values in the Activated ISLE environment to match the values described below and save the file. Inline comments below are merely suggestions except for the mandatory COMPOSE_FILE value. Otherwise change however you see fit. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME= # (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_prod BASE_DOMAIN= # (Suggested) Add the full production domain here e.g. digital.institution.edu CONTAINER_SHORT_ID= # (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections prod) is acdcp COMPOSE_FILE=docker-compose.production.yml # (Mandatory) The docker-compose file used for configuring and launching the Production environment. Test Used by ISLE Maintainers for testing ISLE releases, pull releases and ISLE development, etc. To use this environment, change the values in the Activated ISLE environment to match the values described below and save the file. All values below are mandatory. Do not change. Simply fill them in as directed. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME=isle_test # (Mandatory) BASE_DOMAIN=isle.localdomain # (Mandatory) CONTAINER_SHORT_ID=td # (Mandatory) COMPOSE_FILE=docker-compose.test.yml # (Mandatory) The docker-compose file used for configuring and launching the Test environment.","title":"Overview: ISLE Environments"},{"location":"install/install-environments/#overview-isle-installation-environments","text":"As of the ISLE 1.2.0 release, ISLE has the option to use clearly defined but different environments based on end user's needs. Depending on the environment choice, additional configuration changes will need to be made to ISLE configuration files, domain names, etc. We recommend that you install ISLE using the workflow and suggested order below. Demo - Used for trying out ISLE for the first time, having a sandbox for tests or to \"kick the tires\" on ISLE. Local - Used for Drupal site development, more extensive metadata, Solr and Fedora development work on a Local personal computer Staging - Used for remote (non-local or cloud) hosting of a Staging site. Islandora Drupal site code here is almost finished but viewed privately prior to pushing to public Production. Fedora data might have tests collections. Production - Used for remote (non-local or cloud) hosting of a Production site. Site and collections are public and accessible to the world. Drupal site code is finished, functional and polished. Fedora data has full non test collections. Test collections are not recommended here. Test - Used by ISLE Maintainers for testing ISLE releases, pull releases and ISLE development, etc.","title":"Overview: ISLE Installation Environments"},{"location":"install/install-environments/#isle-project-structure","text":"The ISLE project .env file enables you to be define and launch a variety of ISLE environments. On each ISLE environment, you will edit the .env file to point to a corresponding docker-compose.*.yml file configured for that environment. The root of the ISLE project (ISLE version 1.2.0+) comes with multiple, pre-configured examples of docker-compose and .env files to match the variety of environments shown below. The outline below lists the files that you may have to edit, change or add to support each ISLE environment. Please note: as of ISLE release 1.5, the .env file is no longer tracked by git. Please copy the sample.env to .env and edit for the appropriate environment you'd like to use. * Example: cp sample.env .env .env - Demo docker-compose.demo.yml demo.env config/apache/php_ini/php.demo.ini config/mysql/ISLE.cnf config/proxy/ssl-certs/isle.localdomain.cert config/proxy/ssl-certs/isle.localdomain.key config/proxy/traefik.demo.toml Local docker-compose.local.yml local.env config/apache/php_ini/php.local.ini config/apache/settings_php/settings.local.php config/mysql/ISLE.cnf config/proxy/ssl-certs/yourprojectnamehere.localdomain.cert config/proxy/ssl-certs/yourprojectnamehere.localdomain.key config/proxy/traefik.local.toml Staging docker-compose.staging.yml staging.env config/apache/php_ini/php.staging.ini config/apache/settings_php/settings.staging.php config/mysql/ISLE.cnf config/proxy/ssl-certs If using Let's Encrypt: acme.json If using Commercial SSL Certs: yourprojectnamehere.domain-staging.cert yourprojectnamehere.domain-staging.key config/proxy/traefik.staging.toml Production docker-compose.production.yml production.env config/apache/php_ini/php.production.ini config/apache/settings_php/settings.production.php config/mysql/ISLE.cnf config/proxy/ssl-certs If using Let's Encrypt: acme.json If using Commercial SSL Certs: yourprojectnamehere.domain-production.cert yourprojectnamehere.domain-production.key config/proxy/traefik.production.toml Test docker-compose.test.yml test.env config/apache/php_ini/php.test.ini config/apache/settings_php/settings.test.php config/mysql/ISLE.cnf config/proxy/ssl-certs/isle.localdomain.cert config/proxy/ssl-certs/isle.localdomain.key config/proxy/traefik.test.toml","title":"ISLE Project Structure"},{"location":"install/install-environments/#isle-environments-env-reference","text":"This reference includes a combination of suggestions and actual values. You may use these environment descriptions or settings in each of your corresponding ISLE project .env files.","title":"ISLE Environments \".env\" reference"},{"location":"install/install-environments/#demo","text":"Used for trying out ISLE for the first time, having a sandbox for tests, etc. The Demo environment is the \"default\" activated environment. COMPOSE_PROJECT_NAME=isle_demo BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=ld COMPOSE_FILE=docker-compose.demo.yml","title":"Demo"},{"location":"install/install-environments/#local","text":"Used for Drupal site development, more extensive metadata, Solr and Fedora development work on a personal computer To use this environment, change the values in the Activated ISLE environment to match the values described below and save the file. Inline comments below are merely suggestions except for the mandatory COMPOSE_FILE value. Otherwise change however you see fit. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME= # (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_local BASE_DOMAIN= # (Suggested) This is not a real domain and can be anything, so add your institution name only e.g. acme.localdomain CONTAINER_SHORT_ID=ld # (Mandatory) COMPOSE_FILE=docker-compose.local.yml # (Mandatory) The docker-compose file used for configuring and launching the Local environment.","title":"Local"},{"location":"install/install-environments/#staging","text":"Used for remote (non-local or cloud) hosting of a Staging site. Code here is almost finished but viewed privately prior to pushing to public Production. Please read through the docker-compose.staging.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. To use this environment, change the values in the Activated ISLE environment lines to match the values described below and save the file. Inline comments below are merely suggestions except for the mandatory COMPOSE_FILE value. Otherwise change however you see fit. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME= # (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_stage BASE_DOMAIN= # (Suggested) Add the full production domain here e.g. digital-staging.institution.edu CONTAINER_SHORT_ID= # (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections staging) is acdcs COMPOSE_FILE=docker-compose.staging.yml # (Mandatory) The docker-compose file used for configuring and launching the Staging environment.","title":"Staging"},{"location":"install/install-environments/#production","text":"Used for remote (non-local or cloud) hosting of a Production site. Site and collections are public and accessible to the world. Please read through the docker-compose.production.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. To use this environment, change the values in the Activated ISLE environment to match the values described below and save the file. Inline comments below are merely suggestions except for the mandatory COMPOSE_FILE value. Otherwise change however you see fit. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME= # (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_prod BASE_DOMAIN= # (Suggested) Add the full production domain here e.g. digital.institution.edu CONTAINER_SHORT_ID= # (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections prod) is acdcp COMPOSE_FILE=docker-compose.production.yml # (Mandatory) The docker-compose file used for configuring and launching the Production environment.","title":"Production"},{"location":"install/install-environments/#test","text":"Used by ISLE Maintainers for testing ISLE releases, pull releases and ISLE development, etc. To use this environment, change the values in the Activated ISLE environment to match the values described below and save the file. All values below are mandatory. Do not change. Simply fill them in as directed. Do not copy the comments (#) below when editing the main .env , simply add the suggested or mandatory values as directed to the right of any = . COMPOSE_PROJECT_NAME=isle_test # (Mandatory) BASE_DOMAIN=isle.localdomain # (Mandatory) CONTAINER_SHORT_ID=td # (Mandatory) COMPOSE_FILE=docker-compose.test.yml # (Mandatory) The docker-compose file used for configuring and launching the Test environment.","title":"Test"},{"location":"install/install-local-migrate/","text":"Local ISLE Installation: Migrate Existing Islandora Site Expectations: It takes an average of 6+ hours to read this documentation and complete this installation. This Local ISLE Installation builds a local environment for the express purpose of migrating a previously existing Islandora site onto the ISLE platform. If you need to build a brand new local development site, please stop and use the Local ISLE Installation: New Site instead. This Local ISLE Installation will use a copy of a currently running Production Islandora Drupal website and an empty Fedora repository for end users to test migration to ISLE and do site development and design with the end goal of deploying to ISLE Staging and Production environments for public use. The final goal would be to cut over from the existing non-ISLE Production and Staging servers to their new ISLE counterparts. This Local ISLE Installation will allow you to locally view this site in your browser with the domain of your choice ( Example: \"https://yourprojectnamehere.localdomain\"), instead of being constrained to the Demo URL (\"https://isle.localdomain\"). This document has directions on how you can save newly created ISLE code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments documentation offers an overview of the ISLE structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. This document does not have directions on how you can save previously existing Islandora Drupal code into a git repository and assumes this step has already happened. The directions below will explain how to clone Islandora Drupal code from a previously existing Islandora Drupal git repository that should already be accessible to you. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Local ISLE installation expects that an existing Production Islandora Drupal site will be imported on a personal computer for further ISLE migration testing, Drupal theme development, ingest testing, etc. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer. You have a previously existing private Islandora Drupal git repository. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. For Microsoft Windows: You have installed Git for Windows and will use its provided \"Git Bash\" as your command line interface; this behaves similarly to LINUX and UNIX environments. Git for Windows also installs \"openssl.exe\" which will be needed to generate self-signed SSL certs. (Note: PowerShell is not recommended as it is unable to run UNIX commands or execute bash scripts without a moderate degree of customization.) Set your text editor to use UNIX style line endings for files. (Text files created on DOS/Windows machines have different line endings than files created on Unix/Linux. DOS uses carriage return and line feed (\"\\r\\n\") as a line ending, which Unix uses just line feed (\"\\n\").) Windows users may correct $'\\r': command not found errors by converting Windows-edited files to UNIX, by using the dos2unix application. Index of Instructions Step 0: Copy Production Data to Your Personal Computer Step 1: Choose a Project Name Step 1.5: Edit \"/etc/hosts\" File Step 2: Setup Git Project Repositories Step 3: Git Clone the Production Islandora Drupal Site Code Step 4: Edit the \".env\" File to Change to the Local Environment Step 5: Create New Users and Passwords by Editing \"local.env\" File Step 6: Create New Self-Signed Certs for Your Project Step 7: Download the ISLE Images Step 8: Launch Process Step 9: Import the Production MySQL Drupal Database Step 10: Run Islandora Drupal Site Scripts Step 11: Test the Site Step 12: Ingest Sample Objects Step 0: Copy Production Data to Your Personal Computer Be sure to run a backup of any current non-ISLE systems prior to copying or exporting any files. Drupal Site Files and Code Copy the /var/www/html/sites/default/files directory from your Production Apache server to an appropriate storage area on your personal computer. You'll move this directory in later steps. Locate and note the previously existing private Islandora Drupal git repository. You'll be cloning this into place once the ISLE project has been cloned in later steps. Drupal Site Database Prior to attempting this step, please consider the following: Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT departments for your institution's database naming conventions. Recommended that the production databases be exported using the \".sql\" /or \".gz\" file formats (e.g. \"prod_drupal_site_082019.sql.gz\") for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the \"fedora3\" database or any system tables (such as \"information_schema\", \"performance_schema\", \"mysql\") If possible, on the production Apache web server, run drush cc all from the command line on the production server in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than \"innodb_log_file_size\" allows Export the Production MySQL Islandora Drupal Database Export the MySQL database for the current Production Islandora Drupal site in use and copy it to your personal computer (local) in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your Production site. If you are not comfortable or familiar with performing these actions, we recommend that you instead work with your available IT resources to do so. To complete this process, you may use a MySQL GUI client or, if you have command line access to the MySQL database server, you may run the following command, substituting your actual user and database names: Example: mysqldump -u username -p database_name > prod_drupal_site_082019.sql Copy this file down to your personal computer. Fedora Hash Size (Conditional) Are you migrating an existing Islandora site that has greater than one million objects? If true, then please carefully read about the Fedora Hash Size (Conditional) . Solr Schema and Islandora Transforms This data can be challenging depending on the level of customizations to contend with and as such, ISLE maintainers recommends following one of the three (3), \"Easy\", \"Intermediate\", and \"Advanced\" strategies outlined below. Strategy 1: Easy - Run \"Stock\" ISLE Don't copy any existing production Solr schemas, GSearch .xslt files, etc., and opt instead to use ISLE's default versions. Import some objects from your existing Fedora repository and see if they display properly in searches. Strategy 2: Intermediate - Bind Mount in Existing Transforms and Schemas Bind mount in existing transforms and schemas to override ISLE settings with your current Production version. WARNING This approach assumes you are running Solr 4.10.x.; only attempt if you are running that version on Production. Copy these current Production files and directory to your personal computer in an appropriate location. Solr schema.xml (Location in Fedora: /usr/share/tomcat/webapps/solr/collection1/conf/ OR /usr/local/fedora/solr/conf OR /usr/local/fedora/solr/collection1/conf) GSearch foxmltoSolr.xslt (Location in Fedora: /usr/share/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/) GSearch islandora_transforms (Location in Fedora: /usr/share/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms) Keep the files you create during this process; you will need them again for Step 2a (below)! Note: You may need to further review paths in the files mentioned above, and edit them to match ISLE system paths. i.e. If foxmltoSolr.xslt and any transforms within islandora_transforms include xsl:include statements, make sure they match the paths noted in Step 2a (i.e. /usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms ). Strategy 3: Advanced - Diff and Merge Current Production Customization Edits Into ISLE Configs Copy these current production files and directory to your personal computer in an appropriate location. Solr schema.xml GSearch foxmltoSolr.xslt GSearch islandora_transforms Run the Demo ISLE briefly to pull files for modification and correct ISLE system paths. You can find these paths by running the Demo and copying these files out to an appropriate location. docker cp isle-solr-ld:/usr/local/solr/collection1/conf/schema.xml schema.xml docker cp isle-fedora-ld:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/foxmlToSolr.xslt foxmlToSolr.xslt docker cp isle-fedora-ld:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms islandora_transforms Using a \"diff\" tool ( software that allows one to compare and find the differences between two files ), compare: your Production Solr schema.xml file to the ISLE demo schema.xml file. your Production GSearch foxmltoSolr.xslt file to the ISLE demo foxmltoSolr.xslt file. your Production GSearch islandora_transforms directory to the ISLE demo islandora_transforms directory. Look for edits and comments that indicate specific customization and make note of the differences. Merge in the customizations into the ISLE versions. Keep the files you create during this merge process; you will need them again for Step 2a (below)! Step 1: Choose a Project Name Please choose a project name (concatenated, with no spaces) that describes your institution or your collection platform. You will substitute in your preferred project name whenever the documentation refers to \"yourprojectnamehere\" . (Be creative. Some real-life examples include: arminda, dhinitiative, digital, digitalcollections, digitallibrary, unbound, etc.) Step 1.5: Edit \"/etc/hosts\" File Enable the Local ISLE Installation to be viewed locally on a personal computer browser using \"yourprojectnamehere\" (e.g. \"https://yourprojectnamehere.localdomain\"). Please use these instructions to Edit the \"/etc/hosts\" File . Step 2: Setup Git Project Repositories You will create two new, empty, private git repositories (if they do not already exist) within your git repository hosting service (e.g Github , Bitbucket , Gitlab ). Below, we suggest a naming convention that will clearly distinguish your ISLE code from your Islandora code. It's very important to understand that these are two separate code repositories, and not to confuse them. Login to your git repository hosting service. Create a new private repository for ISLE . We suggest you name it: yourprojectnamehere-isle (This git repository will hold your ISLE code and your environment-specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Create a new private repository for Islandora Drupal . We suggest you name it: yourprojectnamehere-islandora (This git repository will hold your Islandora Drupal code and your site specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Note: This documentation will walk you through using git on the command line. You will open a terminal and use the command line to clone your newly created (and empty) yourprojectnamehere-isle repository from your git hosting service to create a local directory/copy on your personal computer: Open a terminal (Windows: open Git Bash ) Use the \"cd\" command to navigate to a directory where you want to locate your new yourprojectnamehere-isle directory. (We recommend using the default user home directory. You may choose a different location, but it must not be a protected folder such as system or root directory.) Example (Mac): cd ~ Example (Windows): cd /c/Users/somebody/ Clone your new yourprojectnamehere-isle repository to your personal computer: Example: git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git Note: It is OKAY if you see this warning message: \"Warning: You appear to have cloned an empty repository.\" Navigate to the new directory created by the above clone operation: Example: cd yourprojectnamehere-isle Add the ICG ISLE git repository as a git upstream: git remote add icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git View your connections to remote git repositories: git remote -v You should now see the following: icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (fetch) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (push) Run a \"git fetch\" from the icg-upstream repository: git fetch icg-upstream Pull down the ICG ISLE \"main\" branch into your yourprojectnamehere-isle local \"main\" branch: git pull icg-upstream main View the ISLE code you now have in this directory: ls -lha Push this code to your git hosting provider: git push -u origin main This will take 2-5 minutes depending on your internet speed. You now have the current ISLE project code checked into git as a foundation to make changes on specific to your local and project needs. You'll use this git \"icg-upstream\" process in the future to pull updates and new releases from the main ISLE project. Step 2a: Add Customizations from \"Step 0\" to the Git Workflow This step is intended for users who followed either the \" Intermediate \" or \" Advanced \" migration options in \"Step 0\" above. If you choose the Easy migration option you may safely skip Step 2a . Navigate to your local yourprojectnamehere-isle directory: cd /path/to/yourprojectnamehere-isle Create new directories under \"./config\" to hold the Solr and GSearch files you retrieved in \"Step 0\". Do the following:: mkdir -p ./config/solr mkdir -p ./config/fedora/gsearch Copy your \"schema.xml\" file from \"Step 0\" into the new \"./config/solr/\" directory. Copy your \"foxmltoSolr.xslt\" file and \"islandora_transforms\" directory from \"Step 0\" into the \"config/fedora/gsearch/\" directory. Add a new line in the Solr volumes section of your \"docker-compose.local.yml\" - ./config/solr/schema.xml:/usr/local/solr/collection1/conf/schema.xml Add new lines in the Fedora volumes section of your \"docker-compose.local.yml\" - ./config/fedora/gsearch/islandora_transforms:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms - ./config/fedora/gsearch/foxmlToSolr.xslt:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/foxmlToSolr.xslt Continue the local setup as directed below and ultimately import some objects from your existing Fedora repository and see if they display properly in searches. Step 3: Git Clone the Production Islandora Drupal Site Code This step assumes you have an existing Islandora Drupal site, like yourprojectnamehere-islandora , checked into a git repository. (If not, then you'll need to check your Drupal site into a git repository following the same commands from Local ISLE Installation: New Site documentation. Your git repository should be initialized at the Drupal root.) Note: If below you see a \"fatal: Could not read from remote repository.\" error, then please read Fatal: Could not read from remote repository . Using the same open terminal: Create a location outside of your /path/to/yourprojectnamehere-isle directory where your Islandora Drupal site code will be stored. While you may create this location anywhere, we suggest that you put it at the same level as your existing yourprojectnamehere-isle directory. From your /path/to/yourprojectnamehere-isle directory, go up one level: cd /path/to/yourprojectnamehere-isle cd .. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git Example: The above process created a folder named \"yourprojectnamehere-islandora\" Now update the \"docker-compose.local.yml\" in the yourprojectnamehere-isle directory to create a bind-mount to the Islandora Drupal site code: Search for \"apache:\" Find the sub-section called \"volumes:\" Find this line: \"- ./data/apache/html:/var/www/html:cached\" Edit the above line to be like this: - ../yourprojectnamehere-islandora:/var/www/html:cached Your Production Islandora site code is now configured to be used in this local setup. Step 4: Edit the \".env\" File to Change to the Local Environment Navigate to your local yourprojectnamehere-isle directory. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Open the \".env\" file in a text editor. Change only the following lines in the \".env\" file so that the resulting values look like the following: Please note: the following below is an example not actual values you should use. Use one word to describe your project and follow the conventions below accordingly COMPOSE_PROJECT_NAME=yourprojectnamehere_local BASE_DOMAIN=yourprojectnamehere.localdomain CONTAINER_SHORT_ID=ld leave default setting of ld as is. Do not change. COMPOSE_FILE=docker-compose.local.yml Save and close the file. Additionally, depending on your decision from \"Step 0\", you may need to make additional edits to docker-compose.local.yml and move files into place as directed from the ( Intermediate ) and ( Advanced ) sections. Note: We highly recommend that you also review the contents of the docker-compose.local.yml file as the Apache service volume section uses bind mounts for the intended Drupal Code instead of using default Docker volumes. This allows users to perform Local Islandora Drupal site development with an IDE. This line is a suggested path and users are free to change values to the left of the : to match their Apache data folder of choice. However we recommend starting out with the default setting below. Default: - ./data/apache/html:/var/www/html:cached Step 5: Create New Users and Passwords by Editing \"local.env\" File You can reuse some of the older Production settings in the \"local.env\" if you like (e.g. the database name \"DRUPAL_DB\", database user \"DRUPAL_DB_USER\" even the Drupal database user password \"DRUPAL_DB_PASS\" if that makes it easier). It is important to avoid repeating passwords in the ISLE Staging and Production environments. Open the \"local.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. For Microsoft Windows: Find the following line: # COMPOSE_CONVERT_WINDOWS_PATHS=1 In the above line, delete the first two characters ( # ) so as to uncomment the line. It should now look like this: COMPOSE_CONVERT_WINDOWS_PATHS=1 Once finished, save and close the file. Open the \"config/apache/settings_php/settings.local.php\" file in a text editor. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file. Step 6: Create New Self-Signed Certs for Your Project Open the appropriate file in a text editor: For Mac/Ubuntu/CentOS/etc: \"./scripts/proxy/ssl-certs/local.sh\" For Microsoft Windows: \"./scripts/proxy/ssl-certs/local-windows-only.sh\" Follow the in-line instructions to add your project's name to the appropriate areas. Once finished, save and close the file. Using the same open terminal: , navigate to \"/path/to/yourprojectnamehere-isle/scripts/proxy/ssl-certs/\" cd ./scripts/proxy/ssl-certs/ Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: chmod +x local.sh For Microsoft Windows: chmod +x local-windows-only.sh Run the following command to generate new self-signed SSL keys using your \"yourprojectnamehere.localdomain\" domain. This now secures the local site. For Mac/Ubuntu/CentOS/etc: ./local.sh For Microsoft Windows: ./local-windows-only.sh The generated keys can now be found in: cd ../../../config/proxy/ssl-certs Add the SSL .pem and .key file names generated from running the above script to the \"./config/proxy/traefik.local.toml\" file. cd .. Open traefik.local.toml in a text editor. Example: certFile = \"/certs/yourprojectnamehere.localdomain.pem\" keyFile = \"/certs/yourprojectnamehere.localdomain.key\" Step 7: Download the ISLE Images Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): Using the same open terminal: Navigate to the root of your local yourprojectnamehere-isle directory: cd ~/path/to/yourprojectnamehere-isle docker-compose pull Step 8: Launch Process Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with \"isle-\" are expected to have a \"STATUS\" of \"Up\" (for x time). If any of these are not \"UP\", then use Non-Running Docker Containers to solve before continuing below. Step 9: Import the Production MySQL Drupal Database Method A: Use a MySQL client with a GUI Configure the client with the following: Host = 127.0.0.1 Port: 3306 or a different port if you changed it Username: root Password: YOUR_MYSQL_ROOT_PASSWORD in the \"local.env\") Select the Drupal database \"DRUPAL_DB\" in the \"local.env\") Click File > Import ( or equivalent ) Select your exported Production Islandora Drupal database file (e.g. \"prod_drupal_site_082019.sql.gz\") The import process will take 1 -3 minutes depending on the size. Method B: Use the command line Copy the Production Islandora Drupal database file (e.g. \"prod_drupal_site_082019.sql.gz\") to your ISLE MySQL container Run docker ps to determine the mysql container name docker cp /pathto/prod_drupal_site_082019.sql.gz your-mysql-containername:/prod_drupal_site_082019.sql.gz Example: docker cp /c/db_backups/prod_drupal_site_082019.sql.gz isle-mysql-ld:/prod_drupal_site_082019.sql.gz This might take a few minutes depending on the size of the file. Shell into the mysql container by copying and pasting the appropriate command: For Mac/Ubuntu/CentOS/etc: docker exec -it your-mysql-containername bash For Microsoft Windows: winpty docker exec -it your-mysql-containername bash Import the Production Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"local.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < prod_drupal_site_082019.sql.gz This might take a few minutes depending on the size of the file. Type exit to exit the container Step 10: Run Islandora Drupal Site Scripts migration_site_vsets.sh: updates Drupal database settings This step will show you how to run the \"migration_site_vsets.sh\" script on the Apache container to change Drupal database site settings for ISLE connectivity. Using the same open terminal: Run docker ps to determine the apache container name Copy the \"migration_site_vsets.sh\" to the root of the Drupal directory on your Apache container docker cp scripts/apache/migration_site_vsets.sh your-apache-containername:/var/www/html/migration_site_vsets.sh Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" Run the script For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" install_solution_packs.sh: installs Islandora solution packs Since you've imported an existing Drupal database, you must now reinstall the Islandora solution packs so the Fedora repository will be ready to ingest objects. Copy the \"install_solution_packs.sh\" to the root of the Drupal directory on your Apache container docker cp scripts/apache/install_solution_packs.sh your-apache-containername:/var/www/html/install_solution_packs.sh Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" Run the script For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" The above process will take a few minutes depending on the speed of your local and Internet connection. You should see a lot of green [ok] messages. If the script appears to pause or prompt for \"y/n\", DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Drush script finished! ...exiting\" Step 11: Test the Site In your web browser, enter this URL: https://yourprojectnamehere.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"local.env\". You can also attempt to use login credentials that the Production server would have stored in its database. If the newly created Drupal login doesn't work then, you'll need to Shell into the Apache container: For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash For Microsoft Windows: winpty docker exec -it your-apache-containername bash Navigate to this directory cd /var/www/html Create the user found in \"DRUPAL_ADMIN_USER\" and set its password to the value of \"DRUPAL_ADMIN_PASS\" as you previously created in \"local.env\". In the example below swap-out \"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\" with those found in \"local.env\". drush user-create DRUPAL_ADMIN_USER --mail=\"youremailaddresshere\" --password=\"DRUPAL_ADMIN_PASS\"; drush user-add-role \"administrator\" DRUPAL_ADMIN_USER Type exit to exit the container Attempt to login again Step 12: Ingest Sample Objects It is recommended that end users migrating their sites opt to either import sample objects from their non-ISLE Production Fedora servers or use the following below: The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you may need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) This might already exist in your current Drupal Production site as a feature. Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR After ingesting either the ICG sample objects or a selection of your pre-existing Fedora Production objects, continue to QC the migrated site, ensuring that objects display properly, the theme and design continue to work properly, there are no errors in the Drupal watchdog and everything matches the functionality of the previous non-ISLE Production Islandora Drupal site. Next Steps Once you are ready to deploy your finished Drupal site, you may progress to: Staging ISLE Installation: Migrate Existing Islandora Site Additional Resources ISLE Installation: Environments helps explain the ISLE workflow structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Local ISLE Installation: Migrate Existing Islandora Site","title":"Local: Migrate Site"},{"location":"install/install-local-migrate/#local-isle-installation-migrate-existing-islandora-site","text":"Expectations: It takes an average of 6+ hours to read this documentation and complete this installation. This Local ISLE Installation builds a local environment for the express purpose of migrating a previously existing Islandora site onto the ISLE platform. If you need to build a brand new local development site, please stop and use the Local ISLE Installation: New Site instead. This Local ISLE Installation will use a copy of a currently running Production Islandora Drupal website and an empty Fedora repository for end users to test migration to ISLE and do site development and design with the end goal of deploying to ISLE Staging and Production environments for public use. The final goal would be to cut over from the existing non-ISLE Production and Staging servers to their new ISLE counterparts. This Local ISLE Installation will allow you to locally view this site in your browser with the domain of your choice ( Example: \"https://yourprojectnamehere.localdomain\"), instead of being constrained to the Demo URL (\"https://isle.localdomain\"). This document has directions on how you can save newly created ISLE code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments documentation offers an overview of the ISLE structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. This document does not have directions on how you can save previously existing Islandora Drupal code into a git repository and assumes this step has already happened. The directions below will explain how to clone Islandora Drupal code from a previously existing Islandora Drupal git repository that should already be accessible to you. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Local ISLE Installation: Migrate Existing Islandora Site"},{"location":"install/install-local-migrate/#assumptions-prerequisites","text":"This Local ISLE installation expects that an existing Production Islandora Drupal site will be imported on a personal computer for further ISLE migration testing, Drupal theme development, ingest testing, etc. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer. You have a previously existing private Islandora Drupal git repository. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. For Microsoft Windows: You have installed Git for Windows and will use its provided \"Git Bash\" as your command line interface; this behaves similarly to LINUX and UNIX environments. Git for Windows also installs \"openssl.exe\" which will be needed to generate self-signed SSL certs. (Note: PowerShell is not recommended as it is unable to run UNIX commands or execute bash scripts without a moderate degree of customization.) Set your text editor to use UNIX style line endings for files. (Text files created on DOS/Windows machines have different line endings than files created on Unix/Linux. DOS uses carriage return and line feed (\"\\r\\n\") as a line ending, which Unix uses just line feed (\"\\n\").) Windows users may correct $'\\r': command not found errors by converting Windows-edited files to UNIX, by using the dos2unix application.","title":"Assumptions / Prerequisites"},{"location":"install/install-local-migrate/#index-of-instructions","text":"Step 0: Copy Production Data to Your Personal Computer Step 1: Choose a Project Name Step 1.5: Edit \"/etc/hosts\" File Step 2: Setup Git Project Repositories Step 3: Git Clone the Production Islandora Drupal Site Code Step 4: Edit the \".env\" File to Change to the Local Environment Step 5: Create New Users and Passwords by Editing \"local.env\" File Step 6: Create New Self-Signed Certs for Your Project Step 7: Download the ISLE Images Step 8: Launch Process Step 9: Import the Production MySQL Drupal Database Step 10: Run Islandora Drupal Site Scripts Step 11: Test the Site Step 12: Ingest Sample Objects","title":"Index of Instructions"},{"location":"install/install-local-migrate/#step-0-copy-production-data-to-your-personal-computer","text":"Be sure to run a backup of any current non-ISLE systems prior to copying or exporting any files.","title":"Step 0: Copy Production Data to Your Personal Computer"},{"location":"install/install-local-migrate/#drupal-site-files-and-code","text":"Copy the /var/www/html/sites/default/files directory from your Production Apache server to an appropriate storage area on your personal computer. You'll move this directory in later steps. Locate and note the previously existing private Islandora Drupal git repository. You'll be cloning this into place once the ISLE project has been cloned in later steps.","title":"Drupal Site Files and Code"},{"location":"install/install-local-migrate/#drupal-site-database","text":"Prior to attempting this step, please consider the following: Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT departments for your institution's database naming conventions. Recommended that the production databases be exported using the \".sql\" /or \".gz\" file formats (e.g. \"prod_drupal_site_082019.sql.gz\") for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the \"fedora3\" database or any system tables (such as \"information_schema\", \"performance_schema\", \"mysql\") If possible, on the production Apache web server, run drush cc all from the command line on the production server in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than \"innodb_log_file_size\" allows","title":"Drupal Site Database"},{"location":"install/install-local-migrate/#export-the-production-mysql-islandora-drupal-database","text":"Export the MySQL database for the current Production Islandora Drupal site in use and copy it to your personal computer (local) in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your Production site. If you are not comfortable or familiar with performing these actions, we recommend that you instead work with your available IT resources to do so. To complete this process, you may use a MySQL GUI client or, if you have command line access to the MySQL database server, you may run the following command, substituting your actual user and database names: Example: mysqldump -u username -p database_name > prod_drupal_site_082019.sql Copy this file down to your personal computer.","title":"Export the Production MySQL Islandora Drupal Database"},{"location":"install/install-local-migrate/#fedora-hash-size-conditional","text":"Are you migrating an existing Islandora site that has greater than one million objects? If true, then please carefully read about the Fedora Hash Size (Conditional) .","title":"Fedora Hash Size (Conditional)"},{"location":"install/install-local-migrate/#solr-schema-and-islandora-transforms","text":"This data can be challenging depending on the level of customizations to contend with and as such, ISLE maintainers recommends following one of the three (3), \"Easy\", \"Intermediate\", and \"Advanced\" strategies outlined below.","title":"Solr Schema and Islandora Transforms"},{"location":"install/install-local-migrate/#strategy-1-easy-run-stock-isle","text":"Don't copy any existing production Solr schemas, GSearch .xslt files, etc., and opt instead to use ISLE's default versions. Import some objects from your existing Fedora repository and see if they display properly in searches.","title":"Strategy 1: Easy - Run \"Stock\" ISLE"},{"location":"install/install-local-migrate/#strategy-2-intermediate-bind-mount-in-existing-transforms-and-schemas","text":"Bind mount in existing transforms and schemas to override ISLE settings with your current Production version. WARNING This approach assumes you are running Solr 4.10.x.; only attempt if you are running that version on Production. Copy these current Production files and directory to your personal computer in an appropriate location. Solr schema.xml (Location in Fedora: /usr/share/tomcat/webapps/solr/collection1/conf/ OR /usr/local/fedora/solr/conf OR /usr/local/fedora/solr/collection1/conf) GSearch foxmltoSolr.xslt (Location in Fedora: /usr/share/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/) GSearch islandora_transforms (Location in Fedora: /usr/share/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms) Keep the files you create during this process; you will need them again for Step 2a (below)! Note: You may need to further review paths in the files mentioned above, and edit them to match ISLE system paths. i.e. If foxmltoSolr.xslt and any transforms within islandora_transforms include xsl:include statements, make sure they match the paths noted in Step 2a (i.e. /usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms ).","title":"Strategy 2: Intermediate - Bind Mount in Existing Transforms and Schemas"},{"location":"install/install-local-migrate/#strategy-3-advanced-diff-and-merge-current-production-customization-edits-into-isle-configs","text":"Copy these current production files and directory to your personal computer in an appropriate location. Solr schema.xml GSearch foxmltoSolr.xslt GSearch islandora_transforms Run the Demo ISLE briefly to pull files for modification and correct ISLE system paths. You can find these paths by running the Demo and copying these files out to an appropriate location. docker cp isle-solr-ld:/usr/local/solr/collection1/conf/schema.xml schema.xml docker cp isle-fedora-ld:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/foxmlToSolr.xslt foxmlToSolr.xslt docker cp isle-fedora-ld:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms islandora_transforms Using a \"diff\" tool ( software that allows one to compare and find the differences between two files ), compare: your Production Solr schema.xml file to the ISLE demo schema.xml file. your Production GSearch foxmltoSolr.xslt file to the ISLE demo foxmltoSolr.xslt file. your Production GSearch islandora_transforms directory to the ISLE demo islandora_transforms directory. Look for edits and comments that indicate specific customization and make note of the differences. Merge in the customizations into the ISLE versions. Keep the files you create during this merge process; you will need them again for Step 2a (below)!","title":"Strategy 3: Advanced - Diff and Merge Current Production Customization Edits Into ISLE Configs"},{"location":"install/install-local-migrate/#step-1-choose-a-project-name","text":"Please choose a project name (concatenated, with no spaces) that describes your institution or your collection platform. You will substitute in your preferred project name whenever the documentation refers to \"yourprojectnamehere\" . (Be creative. Some real-life examples include: arminda, dhinitiative, digital, digitalcollections, digitallibrary, unbound, etc.)","title":"Step 1: Choose a Project Name"},{"location":"install/install-local-migrate/#step-15-edit-etchosts-file","text":"Enable the Local ISLE Installation to be viewed locally on a personal computer browser using \"yourprojectnamehere\" (e.g. \"https://yourprojectnamehere.localdomain\"). Please use these instructions to Edit the \"/etc/hosts\" File .","title":"Step 1.5: Edit \"/etc/hosts\" File"},{"location":"install/install-local-migrate/#step-2-setup-git-project-repositories","text":"You will create two new, empty, private git repositories (if they do not already exist) within your git repository hosting service (e.g Github , Bitbucket , Gitlab ). Below, we suggest a naming convention that will clearly distinguish your ISLE code from your Islandora code. It's very important to understand that these are two separate code repositories, and not to confuse them. Login to your git repository hosting service. Create a new private repository for ISLE . We suggest you name it: yourprojectnamehere-isle (This git repository will hold your ISLE code and your environment-specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Create a new private repository for Islandora Drupal . We suggest you name it: yourprojectnamehere-islandora (This git repository will hold your Islandora Drupal code and your site specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Note: This documentation will walk you through using git on the command line. You will open a terminal and use the command line to clone your newly created (and empty) yourprojectnamehere-isle repository from your git hosting service to create a local directory/copy on your personal computer: Open a terminal (Windows: open Git Bash ) Use the \"cd\" command to navigate to a directory where you want to locate your new yourprojectnamehere-isle directory. (We recommend using the default user home directory. You may choose a different location, but it must not be a protected folder such as system or root directory.) Example (Mac): cd ~ Example (Windows): cd /c/Users/somebody/ Clone your new yourprojectnamehere-isle repository to your personal computer: Example: git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git Note: It is OKAY if you see this warning message: \"Warning: You appear to have cloned an empty repository.\" Navigate to the new directory created by the above clone operation: Example: cd yourprojectnamehere-isle Add the ICG ISLE git repository as a git upstream: git remote add icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git View your connections to remote git repositories: git remote -v You should now see the following: icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (fetch) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (push) Run a \"git fetch\" from the icg-upstream repository: git fetch icg-upstream Pull down the ICG ISLE \"main\" branch into your yourprojectnamehere-isle local \"main\" branch: git pull icg-upstream main View the ISLE code you now have in this directory: ls -lha Push this code to your git hosting provider: git push -u origin main This will take 2-5 minutes depending on your internet speed. You now have the current ISLE project code checked into git as a foundation to make changes on specific to your local and project needs. You'll use this git \"icg-upstream\" process in the future to pull updates and new releases from the main ISLE project.","title":"Step 2: Setup Git Project Repositories"},{"location":"install/install-local-migrate/#step-2a-add-customizations-from-step-0-to-the-git-workflow","text":"This step is intended for users who followed either the \" Intermediate \" or \" Advanced \" migration options in \"Step 0\" above. If you choose the Easy migration option you may safely skip Step 2a . Navigate to your local yourprojectnamehere-isle directory: cd /path/to/yourprojectnamehere-isle Create new directories under \"./config\" to hold the Solr and GSearch files you retrieved in \"Step 0\". Do the following:: mkdir -p ./config/solr mkdir -p ./config/fedora/gsearch Copy your \"schema.xml\" file from \"Step 0\" into the new \"./config/solr/\" directory. Copy your \"foxmltoSolr.xslt\" file and \"islandora_transforms\" directory from \"Step 0\" into the \"config/fedora/gsearch/\" directory. Add a new line in the Solr volumes section of your \"docker-compose.local.yml\" - ./config/solr/schema.xml:/usr/local/solr/collection1/conf/schema.xml Add new lines in the Fedora volumes section of your \"docker-compose.local.yml\" - ./config/fedora/gsearch/islandora_transforms:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/islandora_transforms - ./config/fedora/gsearch/foxmlToSolr.xslt:/usr/local/tomcat/webapps/fedoragsearch/WEB-INF/classes/fgsconfigFinal/index/FgsIndex/foxmlToSolr.xslt Continue the local setup as directed below and ultimately import some objects from your existing Fedora repository and see if they display properly in searches.","title":"Step 2a: Add Customizations from \"Step 0\" to the Git Workflow"},{"location":"install/install-local-migrate/#step-3-git-clone-the-production-islandora-drupal-site-code","text":"This step assumes you have an existing Islandora Drupal site, like yourprojectnamehere-islandora , checked into a git repository. (If not, then you'll need to check your Drupal site into a git repository following the same commands from Local ISLE Installation: New Site documentation. Your git repository should be initialized at the Drupal root.) Note: If below you see a \"fatal: Could not read from remote repository.\" error, then please read Fatal: Could not read from remote repository . Using the same open terminal: Create a location outside of your /path/to/yourprojectnamehere-isle directory where your Islandora Drupal site code will be stored. While you may create this location anywhere, we suggest that you put it at the same level as your existing yourprojectnamehere-isle directory. From your /path/to/yourprojectnamehere-isle directory, go up one level: cd /path/to/yourprojectnamehere-isle cd .. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git Example: The above process created a folder named \"yourprojectnamehere-islandora\" Now update the \"docker-compose.local.yml\" in the yourprojectnamehere-isle directory to create a bind-mount to the Islandora Drupal site code: Search for \"apache:\" Find the sub-section called \"volumes:\" Find this line: \"- ./data/apache/html:/var/www/html:cached\" Edit the above line to be like this: - ../yourprojectnamehere-islandora:/var/www/html:cached Your Production Islandora site code is now configured to be used in this local setup.","title":"Step 3: Git Clone the Production Islandora Drupal Site Code"},{"location":"install/install-local-migrate/#step-4-edit-the-env-file-to-change-to-the-local-environment","text":"Navigate to your local yourprojectnamehere-isle directory. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Open the \".env\" file in a text editor. Change only the following lines in the \".env\" file so that the resulting values look like the following: Please note: the following below is an example not actual values you should use. Use one word to describe your project and follow the conventions below accordingly COMPOSE_PROJECT_NAME=yourprojectnamehere_local BASE_DOMAIN=yourprojectnamehere.localdomain CONTAINER_SHORT_ID=ld leave default setting of ld as is. Do not change. COMPOSE_FILE=docker-compose.local.yml Save and close the file. Additionally, depending on your decision from \"Step 0\", you may need to make additional edits to docker-compose.local.yml and move files into place as directed from the ( Intermediate ) and ( Advanced ) sections. Note: We highly recommend that you also review the contents of the docker-compose.local.yml file as the Apache service volume section uses bind mounts for the intended Drupal Code instead of using default Docker volumes. This allows users to perform Local Islandora Drupal site development with an IDE. This line is a suggested path and users are free to change values to the left of the : to match their Apache data folder of choice. However we recommend starting out with the default setting below. Default: - ./data/apache/html:/var/www/html:cached","title":"Step 4: Edit the \".env\" File to Change to the Local Environment"},{"location":"install/install-local-migrate/#step-5-create-new-users-and-passwords-by-editing-localenv-file","text":"You can reuse some of the older Production settings in the \"local.env\" if you like (e.g. the database name \"DRUPAL_DB\", database user \"DRUPAL_DB_USER\" even the Drupal database user password \"DRUPAL_DB_PASS\" if that makes it easier). It is important to avoid repeating passwords in the ISLE Staging and Production environments. Open the \"local.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. For Microsoft Windows: Find the following line: # COMPOSE_CONVERT_WINDOWS_PATHS=1 In the above line, delete the first two characters ( # ) so as to uncomment the line. It should now look like this: COMPOSE_CONVERT_WINDOWS_PATHS=1 Once finished, save and close the file. Open the \"config/apache/settings_php/settings.local.php\" file in a text editor. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file.","title":"Step 5: Create New Users and Passwords by Editing \"local.env\" File"},{"location":"install/install-local-migrate/#step-6-create-new-self-signed-certs-for-your-project","text":"Open the appropriate file in a text editor: For Mac/Ubuntu/CentOS/etc: \"./scripts/proxy/ssl-certs/local.sh\" For Microsoft Windows: \"./scripts/proxy/ssl-certs/local-windows-only.sh\" Follow the in-line instructions to add your project's name to the appropriate areas. Once finished, save and close the file. Using the same open terminal: , navigate to \"/path/to/yourprojectnamehere-isle/scripts/proxy/ssl-certs/\" cd ./scripts/proxy/ssl-certs/ Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: chmod +x local.sh For Microsoft Windows: chmod +x local-windows-only.sh Run the following command to generate new self-signed SSL keys using your \"yourprojectnamehere.localdomain\" domain. This now secures the local site. For Mac/Ubuntu/CentOS/etc: ./local.sh For Microsoft Windows: ./local-windows-only.sh The generated keys can now be found in: cd ../../../config/proxy/ssl-certs Add the SSL .pem and .key file names generated from running the above script to the \"./config/proxy/traefik.local.toml\" file. cd .. Open traefik.local.toml in a text editor. Example: certFile = \"/certs/yourprojectnamehere.localdomain.pem\" keyFile = \"/certs/yourprojectnamehere.localdomain.key\"","title":"Step 6: Create New Self-Signed Certs for Your Project"},{"location":"install/install-local-migrate/#step-7-download-the-isle-images","text":"Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): Using the same open terminal: Navigate to the root of your local yourprojectnamehere-isle directory: cd ~/path/to/yourprojectnamehere-isle docker-compose pull","title":"Step 7: Download the ISLE Images"},{"location":"install/install-local-migrate/#step-8-launch-process","text":"Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with \"isle-\" are expected to have a \"STATUS\" of \"Up\" (for x time). If any of these are not \"UP\", then use Non-Running Docker Containers to solve before continuing below.","title":"Step 8: Launch Process"},{"location":"install/install-local-migrate/#step-9-import-the-production-mysql-drupal-database","text":"Method A: Use a MySQL client with a GUI Configure the client with the following: Host = 127.0.0.1 Port: 3306 or a different port if you changed it Username: root Password: YOUR_MYSQL_ROOT_PASSWORD in the \"local.env\") Select the Drupal database \"DRUPAL_DB\" in the \"local.env\") Click File > Import ( or equivalent ) Select your exported Production Islandora Drupal database file (e.g. \"prod_drupal_site_082019.sql.gz\") The import process will take 1 -3 minutes depending on the size. Method B: Use the command line Copy the Production Islandora Drupal database file (e.g. \"prod_drupal_site_082019.sql.gz\") to your ISLE MySQL container Run docker ps to determine the mysql container name docker cp /pathto/prod_drupal_site_082019.sql.gz your-mysql-containername:/prod_drupal_site_082019.sql.gz Example: docker cp /c/db_backups/prod_drupal_site_082019.sql.gz isle-mysql-ld:/prod_drupal_site_082019.sql.gz This might take a few minutes depending on the size of the file. Shell into the mysql container by copying and pasting the appropriate command: For Mac/Ubuntu/CentOS/etc: docker exec -it your-mysql-containername bash For Microsoft Windows: winpty docker exec -it your-mysql-containername bash Import the Production Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"local.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < prod_drupal_site_082019.sql.gz This might take a few minutes depending on the size of the file. Type exit to exit the container","title":"Step 9: Import the Production MySQL Drupal Database"},{"location":"install/install-local-migrate/#step-10-run-islandora-drupal-site-scripts","text":"migration_site_vsets.sh: updates Drupal database settings This step will show you how to run the \"migration_site_vsets.sh\" script on the Apache container to change Drupal database site settings for ISLE connectivity. Using the same open terminal: Run docker ps to determine the apache container name Copy the \"migration_site_vsets.sh\" to the root of the Drupal directory on your Apache container docker cp scripts/apache/migration_site_vsets.sh your-apache-containername:/var/www/html/migration_site_vsets.sh Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" Run the script For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" install_solution_packs.sh: installs Islandora solution packs Since you've imported an existing Drupal database, you must now reinstall the Islandora solution packs so the Fedora repository will be ready to ingest objects. Copy the \"install_solution_packs.sh\" to the root of the Drupal directory on your Apache container docker cp scripts/apache/install_solution_packs.sh your-apache-containername:/var/www/html/install_solution_packs.sh Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" Run the script For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" For Microsoft Windows: winpty docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" The above process will take a few minutes depending on the speed of your local and Internet connection. You should see a lot of green [ok] messages. If the script appears to pause or prompt for \"y/n\", DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Drush script finished! ...exiting\"","title":"Step 10: Run Islandora Drupal Site Scripts"},{"location":"install/install-local-migrate/#step-11-test-the-site","text":"In your web browser, enter this URL: https://yourprojectnamehere.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"local.env\". You can also attempt to use login credentials that the Production server would have stored in its database. If the newly created Drupal login doesn't work then, you'll need to Shell into the Apache container: For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash For Microsoft Windows: winpty docker exec -it your-apache-containername bash Navigate to this directory cd /var/www/html Create the user found in \"DRUPAL_ADMIN_USER\" and set its password to the value of \"DRUPAL_ADMIN_PASS\" as you previously created in \"local.env\". In the example below swap-out \"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\" with those found in \"local.env\". drush user-create DRUPAL_ADMIN_USER --mail=\"youremailaddresshere\" --password=\"DRUPAL_ADMIN_PASS\"; drush user-add-role \"administrator\" DRUPAL_ADMIN_USER Type exit to exit the container Attempt to login again","title":"Step 11: Test the Site"},{"location":"install/install-local-migrate/#step-12-ingest-sample-objects","text":"It is recommended that end users migrating their sites opt to either import sample objects from their non-ISLE Production Fedora servers or use the following below: The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you may need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) This might already exist in your current Drupal Production site as a feature. Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR After ingesting either the ICG sample objects or a selection of your pre-existing Fedora Production objects, continue to QC the migrated site, ensuring that objects display properly, the theme and design continue to work properly, there are no errors in the Drupal watchdog and everything matches the functionality of the previous non-ISLE Production Islandora Drupal site.","title":"Step 12: Ingest Sample Objects"},{"location":"install/install-local-migrate/#next-steps","text":"Once you are ready to deploy your finished Drupal site, you may progress to: Staging ISLE Installation: Migrate Existing Islandora Site","title":"Next Steps"},{"location":"install/install-local-migrate/#additional-resources","text":"ISLE Installation: Environments helps explain the ISLE workflow structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-local-migrate/#end-of-local-isle-installation-migrate-existing-islandora-site","text":"","title":"End of Local ISLE Installation: Migrate Existing Islandora Site"},{"location":"install/install-local-new/","text":"Local ISLE Installation: New Site Expectations: It takes an average of 1-2 hours to read this documentation and complete this installation. This Local ISLE Installation creates an un-themed Drupal website and an empty Fedora repository (similar to the Demo installation) but one that you can use to develop and design your Drupal site and Fedora collections with the end goal of deploying to ISLE Staging and Production environments for public use. This Local ISLE Installation will allow you to locally view this site in your browser with the domain of your choice ( Example: \"https://yourprojectnamehere.localdomain\"), instead of being constrained to the Demo URL (\"https://isle.localdomain\"). While this installation provides you a brand new local development site, it is not intended as a migration process of a previously existing Islandora site. If you need to build a local environment to migrate a previously existing Islandora site, please use the Local ISLE Installation: Migrate Existing Islandora Site instead. This document also has directions on how you can save newly created ISLE and Islandora code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments helps explain the ISLE workflow structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Local ISLE installation is intended for a brand new ISLE site for further Drupal theme development, ingest testing, etc. on a personal computer. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. For Microsoft Windows: You have installed Git for Windows and will use its provided \"Git Bash\" as your command line interface; this behaves similarly to LINUX and UNIX environments. Git for Windows also installs \"openssl.exe\" which will be needed to generate self-signed SSL certs. (Note: PowerShell is not recommended as it is unable to run UNIX commands or execute bash scripts without a moderate degree of customization.) Set your text editor to use UNIX style line endings for files. (Text files created on DOS/Windows machines have different line endings than files created on Unix/Linux. DOS uses carriage return and line feed (\"\\r\\n\") as a line ending, which Unix uses just line feed (\"\\n\").) Windows users may correct $'\\r': command not found errors by converting Windows-edited files to UNIX, by using the dos2unix application. Index of Instructions Step 1: Choose a Project Name Step 1.5: Edit \"/etc/hosts\" File Step 2: Setup Git Project Repositories Step 3: Edit the \".env\" File to Point to the Local Environment Step 4: Create New Users and Passwords by Editing \"local.env\" File Step 5: Create New Self-Signed Certs for Your Project Step 6: Download the ISLE Images Step 7: Launch Process Step 8: Run Islandora Drupal Site Install Script Step 9: Test the Site Step 10: Ingest Sample Objects Step 11: Check-In the Newly Created Islandora Drupal Site Code Into a Git Repository Step 1: Choose a Project Name Please choose a project name (concatenated, with no spaces) that describes your institution or your collection platform. You will substitute in your preferred project name whenever the documentation refers to \"yourprojectnamehere\" . (Be creative. Some real-life examples include: arminda, dhinitiative, digital, digitalcollections, digitallibrary, unbound, etc.) Step 1.5: Edit \"/etc/hosts\" File Enable the Local ISLE Installation to be viewed locally on a personal computer browser using \"yourprojectnamehere\" (e.g. \"https://yourprojectnamehere.localdomain\"). Please use these instructions to Edit the \"/etc/hosts\" File . Step 2: Setup Git Project Repositories You will create two new, empty, private git repositories within your git repository hosting service (e.g Github , Bitbucket , Gitlab ). Below, we suggest a naming convention that will clearly distinguish your ISLE code from your Islandora code. It's very important to understand that these are two separate code repositories, and not to confuse them. Login to your git repository hosting service. Create a new private repository for ISLE . We suggest you name it: yourprojectnamehere-isle (This git repository will hold your ISLE code and your environment-specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Create a new private repository for Islandora Drupal . We suggest you name it: yourprojectnamehere-islandora (This git repository will hold your Islandora Drupal code and your site specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Note: This documentation will walk you through using git on the command line. You will open a terminal and use the command line to clone your newly created (and empty) ISLE project from your git repository hosting service to your personal computer: Open a terminal (Windows: open Git Bash ) Use the \"cd\" command to navigate to a directory where you want to locate your new ISLE project. (We recommend using the default user home directory. You may choose a different location, but it must not be a protected folder such as system or root directory.) Example (Mac): cd ~ Example (Windows): cd /c/Users/somebody/ Clone your new ISLE project to your personal computer: Example: git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git Note: It is OKAY if you see this warning message: \"warning: You appear to have cloned an empty repository.\" Navigate to the new directory created by the above clone operation: Example: cd yourprojectnamehere-isle Add the ICG ISLE git repository as a git upstream: git remote add icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git View your connections to remote git repositories: git remote -v You should now see the following: icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (fetch) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (push) Run a git fetch git fetch icg-upstream Pull down the ICG ISLE \"main\" branch into your local project's \"main\" branch git pull icg-upstream main View the ISLE code you now have in this directory: ls -lha Push this code to your online git provider ISLE git push -u origin main This will take 2-5 minutes depending on your internet speed. You now have the current ISLE project code checked into git as a foundation to make changes on specific to your local and project needs. You'll use this git \"icg-upstream\" process in the future to pull updates and new releases from the main ISLE project. Step 3: Edit the \".env\" File to Point to the Local Environment Navigate to your ISLE project directory. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Open the \".env\" file in a text editor. Change only the following lines in the \".env\" file so that the resulting values look like the following: Please note: the following below is an example not actual values you should use. Use one word to describe your project and follow the conventions below accordingly COMPOSE_PROJECT_NAME=yourprojectnamehere_local BASE_DOMAIN=yourprojectnamehere.localdomain CONTAINER_SHORT_ID=ld leave default setting of ld as is. Do not change. COMPOSE_FILE=docker-compose.local.yml Save and close the file. Step 4: Create New Users and Passwords by Editing \"local.env\" File Open the \"local.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. For Microsoft Windows: Find the following line: # COMPOSE_CONVERT_WINDOWS_PATHS=1 In the above line, delete the first two characters ( # ) so as to uncomment the line. It should now look like this: COMPOSE_CONVERT_WINDOWS_PATHS=1 Once finished, save and close the file. Open the \"config/apache/settings_php/settings.local.php\" file in a text editor. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file. Step 5: Create New Self-Signed Certs for Your Project Open the appropriate file in a text editor: For Mac/Ubuntu/CentOS/etc: \"./scripts/proxy/ssl-certs/local.sh\" For Microsoft Windows: \"./scripts/proxy/ssl-certs/local-windows-only.sh\" Follow the in-line instructions to add your project's name to the appropriate areas. Once finished, save and close the file. Using the same open terminal: navigate to \"/pathto/yourprojectnamehere/scripts/proxy/ssl-certs/\" cd ./scripts/proxy/ssl-certs/ Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: chmod +x local.sh For Microsoft Windows: chmod +x local-windows-only.sh Run the following command to generate new self-signed SSL keys using your \"yourprojectnamehere.localdomain\" domain. This now secures the local site. For Mac/Ubuntu/CentOS/etc: ./local.sh For Microsoft Windows: ./local-windows-only.sh The generated keys can now be found in: cd ../../../config/proxy/ssl-certs Add the SSL .pem and .key file names generated from running the above script to the ./config/proxy/traefik.local.toml file. cd .. Open traefik.local.toml in a text editor. Example: certFile = \"/certs/yourprojectnamehere.localdomain.pem\" keyFile = \"/certs/yourprojectnamehere.localdomain.key\" Step 6: Download the ISLE Images Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ). Using the same open terminal: Navigate to the root of your ISLE project cd ~/pathto/yourprojectnamehere docker-compose pull Step 7: Launch Process Using the same open terminal: Run the docker containers: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with \"isle-\" are expected to have a \"STATUS\" of \"Up\" (for x time). If any of these are not \"UP\", then use Non-Running Docker Containers to solve before continuing below. Step 8: Run Islandora Drupal Site Install Script We highly recommend that you first review the contents of the \"docker-compose.local.yml\" file as the ISLE Apache service uses bind mounts for the intended Drupal Code instead of using default Docker volumes. This allows users to perform Local Islandora Drupal site development with an IDE. This line is a suggested path and users are free to change values to the left of the : to match their Apache data folder of choice. We recommend starting out with the default setting: \"- ./data/apache/html:/var/www/html:cached\" Run the install site script on the Apache container by copying and pasting the appropriate command: For Mac/Ubuntu/CentOS/etc: docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" For Microsoft Windows: winpty docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" The above process may take 10-20 minutes ( depending on system and internet speeds ) You should see a lot of green [ok] messages. If the script appears to pause or prompt for \"y/n\", DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Done. 'all' cache was cleared.\" Step 9: Test the Site In your web browser, enter this URL: https://yourprojectnamehere.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"local.env\". Step 10: Ingest Sample Objects The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR Step 11: Check-In the Newly Created Islandora Drupal Site Code Into is Git Repository Using the same open terminal: Navigate to the data directory within your local ISLE project cd data/apache/html Create a local git repository: git init Add all of the files to this Local git repository: git add . Commit these files to your Local environment with an appropriate message to preserve these changes: git commit -m \"Setting up Drupal site\" Add the git \"remote\" (this is your git repository hosting service to where you'll push changes, such as Bitbucket, GitHub or Gitlab): Example: git remote add origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git Push the changes to the remote git repository on the \"main\" branch git push -u origin main Your Local install is now complete. Next Steps Once you are ready to deploy your finished Drupal site, you may progress to: Staging ISLE Installation: New Site Additional Resources ISLE Installation: Environments helps explain the ISLE workflow structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Local ISLE Installation: New Site","title":"Local: New Site"},{"location":"install/install-local-new/#local-isle-installation-new-site","text":"Expectations: It takes an average of 1-2 hours to read this documentation and complete this installation. This Local ISLE Installation creates an un-themed Drupal website and an empty Fedora repository (similar to the Demo installation) but one that you can use to develop and design your Drupal site and Fedora collections with the end goal of deploying to ISLE Staging and Production environments for public use. This Local ISLE Installation will allow you to locally view this site in your browser with the domain of your choice ( Example: \"https://yourprojectnamehere.localdomain\"), instead of being constrained to the Demo URL (\"https://isle.localdomain\"). While this installation provides you a brand new local development site, it is not intended as a migration process of a previously existing Islandora site. If you need to build a local environment to migrate a previously existing Islandora site, please use the Local ISLE Installation: Migrate Existing Islandora Site instead. This document also has directions on how you can save newly created ISLE and Islandora code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments helps explain the ISLE workflow structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Local ISLE Installation: New Site"},{"location":"install/install-local-new/#assumptions-prerequisites","text":"This Local ISLE installation is intended for a brand new ISLE site for further Drupal theme development, ingest testing, etc. on a personal computer. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. For Microsoft Windows: You have installed Git for Windows and will use its provided \"Git Bash\" as your command line interface; this behaves similarly to LINUX and UNIX environments. Git for Windows also installs \"openssl.exe\" which will be needed to generate self-signed SSL certs. (Note: PowerShell is not recommended as it is unable to run UNIX commands or execute bash scripts without a moderate degree of customization.) Set your text editor to use UNIX style line endings for files. (Text files created on DOS/Windows machines have different line endings than files created on Unix/Linux. DOS uses carriage return and line feed (\"\\r\\n\") as a line ending, which Unix uses just line feed (\"\\n\").) Windows users may correct $'\\r': command not found errors by converting Windows-edited files to UNIX, by using the dos2unix application.","title":"Assumptions / Prerequisites"},{"location":"install/install-local-new/#index-of-instructions","text":"Step 1: Choose a Project Name Step 1.5: Edit \"/etc/hosts\" File Step 2: Setup Git Project Repositories Step 3: Edit the \".env\" File to Point to the Local Environment Step 4: Create New Users and Passwords by Editing \"local.env\" File Step 5: Create New Self-Signed Certs for Your Project Step 6: Download the ISLE Images Step 7: Launch Process Step 8: Run Islandora Drupal Site Install Script Step 9: Test the Site Step 10: Ingest Sample Objects Step 11: Check-In the Newly Created Islandora Drupal Site Code Into a Git Repository","title":"Index of Instructions"},{"location":"install/install-local-new/#step-1-choose-a-project-name","text":"Please choose a project name (concatenated, with no spaces) that describes your institution or your collection platform. You will substitute in your preferred project name whenever the documentation refers to \"yourprojectnamehere\" . (Be creative. Some real-life examples include: arminda, dhinitiative, digital, digitalcollections, digitallibrary, unbound, etc.)","title":"Step 1: Choose a Project Name"},{"location":"install/install-local-new/#step-15-edit-etchosts-file","text":"Enable the Local ISLE Installation to be viewed locally on a personal computer browser using \"yourprojectnamehere\" (e.g. \"https://yourprojectnamehere.localdomain\"). Please use these instructions to Edit the \"/etc/hosts\" File .","title":"Step 1.5: Edit \"/etc/hosts\" File"},{"location":"install/install-local-new/#step-2-setup-git-project-repositories","text":"You will create two new, empty, private git repositories within your git repository hosting service (e.g Github , Bitbucket , Gitlab ). Below, we suggest a naming convention that will clearly distinguish your ISLE code from your Islandora code. It's very important to understand that these are two separate code repositories, and not to confuse them. Login to your git repository hosting service. Create a new private repository for ISLE . We suggest you name it: yourprojectnamehere-isle (This git repository will hold your ISLE code and your environment-specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Create a new private repository for Islandora Drupal . We suggest you name it: yourprojectnamehere-islandora (This git repository will hold your Islandora Drupal code and your site specific customizations. Storing this in a private repository and following the workflow below will save you a lot of time and confusion.) Note: This documentation will walk you through using git on the command line. You will open a terminal and use the command line to clone your newly created (and empty) ISLE project from your git repository hosting service to your personal computer: Open a terminal (Windows: open Git Bash ) Use the \"cd\" command to navigate to a directory where you want to locate your new ISLE project. (We recommend using the default user home directory. You may choose a different location, but it must not be a protected folder such as system or root directory.) Example (Mac): cd ~ Example (Windows): cd /c/Users/somebody/ Clone your new ISLE project to your personal computer: Example: git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git Note: It is OKAY if you see this warning message: \"warning: You appear to have cloned an empty repository.\" Navigate to the new directory created by the above clone operation: Example: cd yourprojectnamehere-isle Add the ICG ISLE git repository as a git upstream: git remote add icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git View your connections to remote git repositories: git remote -v You should now see the following: icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (fetch) icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git (push) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (fetch) origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git (push) Run a git fetch git fetch icg-upstream Pull down the ICG ISLE \"main\" branch into your local project's \"main\" branch git pull icg-upstream main View the ISLE code you now have in this directory: ls -lha Push this code to your online git provider ISLE git push -u origin main This will take 2-5 minutes depending on your internet speed. You now have the current ISLE project code checked into git as a foundation to make changes on specific to your local and project needs. You'll use this git \"icg-upstream\" process in the future to pull updates and new releases from the main ISLE project.","title":"Step 2: Setup Git Project Repositories"},{"location":"install/install-local-new/#step-3-edit-the-env-file-to-point-to-the-local-environment","text":"Navigate to your ISLE project directory. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Open the \".env\" file in a text editor. Change only the following lines in the \".env\" file so that the resulting values look like the following: Please note: the following below is an example not actual values you should use. Use one word to describe your project and follow the conventions below accordingly COMPOSE_PROJECT_NAME=yourprojectnamehere_local BASE_DOMAIN=yourprojectnamehere.localdomain CONTAINER_SHORT_ID=ld leave default setting of ld as is. Do not change. COMPOSE_FILE=docker-compose.local.yml Save and close the file.","title":"Step 3: Edit the \".env\" File to Point to the Local Environment"},{"location":"install/install-local-new/#step-4-create-new-users-and-passwords-by-editing-localenv-file","text":"Open the \"local.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. For Microsoft Windows: Find the following line: # COMPOSE_CONVERT_WINDOWS_PATHS=1 In the above line, delete the first two characters ( # ) so as to uncomment the line. It should now look like this: COMPOSE_CONVERT_WINDOWS_PATHS=1 Once finished, save and close the file. Open the \"config/apache/settings_php/settings.local.php\" file in a text editor. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file.","title":"Step 4: Create New Users and Passwords by Editing \"local.env\" File"},{"location":"install/install-local-new/#step-5-create-new-self-signed-certs-for-your-project","text":"Open the appropriate file in a text editor: For Mac/Ubuntu/CentOS/etc: \"./scripts/proxy/ssl-certs/local.sh\" For Microsoft Windows: \"./scripts/proxy/ssl-certs/local-windows-only.sh\" Follow the in-line instructions to add your project's name to the appropriate areas. Once finished, save and close the file. Using the same open terminal: navigate to \"/pathto/yourprojectnamehere/scripts/proxy/ssl-certs/\" cd ./scripts/proxy/ssl-certs/ Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: chmod +x local.sh For Microsoft Windows: chmod +x local-windows-only.sh Run the following command to generate new self-signed SSL keys using your \"yourprojectnamehere.localdomain\" domain. This now secures the local site. For Mac/Ubuntu/CentOS/etc: ./local.sh For Microsoft Windows: ./local-windows-only.sh The generated keys can now be found in: cd ../../../config/proxy/ssl-certs Add the SSL .pem and .key file names generated from running the above script to the ./config/proxy/traefik.local.toml file. cd .. Open traefik.local.toml in a text editor. Example: certFile = \"/certs/yourprojectnamehere.localdomain.pem\" keyFile = \"/certs/yourprojectnamehere.localdomain.key\"","title":"Step 5: Create New Self-Signed Certs for Your Project"},{"location":"install/install-local-new/#step-6-download-the-isle-images","text":"Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ). Using the same open terminal: Navigate to the root of your ISLE project cd ~/pathto/yourprojectnamehere docker-compose pull","title":"Step 6: Download the ISLE Images"},{"location":"install/install-local-new/#step-7-launch-process","text":"Using the same open terminal: Run the docker containers: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with \"isle-\" are expected to have a \"STATUS\" of \"Up\" (for x time). If any of these are not \"UP\", then use Non-Running Docker Containers to solve before continuing below.","title":"Step 7: Launch Process"},{"location":"install/install-local-new/#step-8-run-islandora-drupal-site-install-script","text":"We highly recommend that you first review the contents of the \"docker-compose.local.yml\" file as the ISLE Apache service uses bind mounts for the intended Drupal Code instead of using default Docker volumes. This allows users to perform Local Islandora Drupal site development with an IDE. This line is a suggested path and users are free to change values to the left of the : to match their Apache data folder of choice. We recommend starting out with the default setting: \"- ./data/apache/html:/var/www/html:cached\" Run the install site script on the Apache container by copying and pasting the appropriate command: For Mac/Ubuntu/CentOS/etc: docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" For Microsoft Windows: winpty docker exec -it isle-apache-ld bash -c \"cd /utility-scripts/isle_drupal_build_tools && ./isle_islandora_installer.sh\" The above process may take 10-20 minutes ( depending on system and internet speeds ) You should see a lot of green [ok] messages. If the script appears to pause or prompt for \"y/n\", DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Done. 'all' cache was cleared.\"","title":"Step 8: Run Islandora Drupal Site Install Script"},{"location":"install/install-local-new/#step-9-test-the-site","text":"In your web browser, enter this URL: https://yourprojectnamehere.localdomain Note: You may see an SSL error warning that the site is unsafe. It is safe, it simply uses \"self-signed\" SSL certs. Ignore the error and proceed to the site. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"local.env\".","title":"Step 9: Test the Site"},{"location":"install/install-local-new/#step-10-ingest-sample-objects","text":"The Islandora Collaboration Group provides a set of Islandora Sample Objects with corresponding metadata for testing Islandora's ingest process. These sample objects are organized by solution pack and are zipped for faster bulk ingestion. To download these sample objects, clone them to your computer's desktop: git clone https://github.com/Islandora-Collaboration-Group/islandora-sample-objects.git Follow these ingestion instructions How to Add an Item to a Digital Collection (Note: Getting Started with Islandora contains explanations about content models, collections, and datastreams.) After ingesting content, you will need to add an Islandora Simple Search block to the Drupal structure. (The default search box will only search Drupal content, not Islandora content.) Select from the menu: Structure > Blocks > Islandora Simple Search Select: Sidebar Second Click: Save Blocks at bottom of page You may now search for ingested objects that have been indexed by SOLR","title":"Step 10: Ingest Sample Objects"},{"location":"install/install-local-new/#step-11-check-in-the-newly-created-islandora-drupal-site-code-into-is-git-repository","text":"Using the same open terminal: Navigate to the data directory within your local ISLE project cd data/apache/html Create a local git repository: git init Add all of the files to this Local git repository: git add . Commit these files to your Local environment with an appropriate message to preserve these changes: git commit -m \"Setting up Drupal site\" Add the git \"remote\" (this is your git repository hosting service to where you'll push changes, such as Bitbucket, GitHub or Gitlab): Example: git remote add origin https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git Push the changes to the remote git repository on the \"main\" branch git push -u origin main Your Local install is now complete.","title":"Step 11: Check-In the Newly Created Islandora Drupal Site Code Into is Git Repository"},{"location":"install/install-local-new/#next-steps","text":"Once you are ready to deploy your finished Drupal site, you may progress to: Staging ISLE Installation: New Site","title":"Next Steps"},{"location":"install/install-local-new/#additional-resources","text":"ISLE Installation: Environments helps explain the ISLE workflow structure, the associated files, and what values ISLE end users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-local-new/#end-of-local-isle-installation-new-site","text":"","title":"End of Local ISLE Installation: New Site"},{"location":"install/install-local-resources/","text":"Local ISLE Installation: Resources Local URL Always use the https://yourprojectnamehere.localdomain domain to view and log in to a local site. (Do not use an IP address, such as https://10.10.10.130 or https://127.0.0.01 as some components may not function correctly.) Docker Containers: Passwords As instructed in the ## Step 4: Create New Users and Passwords by Editing \"local.env\" File section of the Local ISLE Installation: New Site documentation, you'll need to refer to the edited local.env for your password choices. islandora user on the ISLE host server uses islandora as the password. This might not apply to your setup if using local Docker clients. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac 1. MySQL Container Compose Service Name Container Name Software Ports mysql Run docker ps to determine MySQL 5.7 3306 Account Password Database Perms root Based on your local.env edits ALL ALL fedora_admin Based on your local.env edits fedora3 All except Grant option isle_ld_user Based on your local.env edits Based on your local.env edits All except Grant option 2. Fedora Container Compose Service Name Container Name Software Ports fedora Run docker ps to determine see below 8080 mapped to 8081 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 7/2019 Tomcat 8.5.x Open JDK 8.x Account Password Service URL fedoraAdmin Based on your local.env edits Fedora http://yourprojectnamehere.localdomain:8081/fedora/describe fedoraIntCallUser Based on your local.env edits Fedora http://yourprojectnamehere.localdomain:8081/fedora/objects anonymous anonymous Fedora --- fgsAdmin Based on your local.env edits Gsearch http://yourprojectnamehere.localdomain:8081/fedoragsearch/rest?operation=updateIndex admin Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8081/manager/html manager Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8081/manager/html 3. Solr Container Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8082 (on host) Software Version Solr 4.10.4 Tomcat 8.5.x OpenJDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html manager Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html -- -- Solr http://yourprojectnamehere.localdomain:8082/solr/ 4. Apache Container Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 OpenJDK 8.x Djatoka* 1.1 Drupal 7.57 PHP 7.1 Islandora 7.x * Djatoka is included because it bundles useful Kakadu binaries, but is not running as a service. Account Password Service URL Based on your local.env edits Based on your local.env edits Drupal site admin https://yourprojectnamehere.localdomain 5. Proxy Container Compose Service Name Container Name Software Ports proxy isle-proxy Traefik 80, 443 Account Password Service URL None Required None Required Proxy UI https://admin.yourprojectnamehere.localdomain OR http://yourprojectnamehere:8080 The Proxy Control Panel is available at admin.yourprojectnamehere.localdomain . No username/password are required. This is unsafe for production environments. 6. Image Services Compose Service Name Container Name Software Ports image-services Run docker ps to determine see below 8080 (on container) mapped to 8083 (on host) Software Version Cantaloupe IIIF 4.x Account Password Service URL admin Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html manager Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html admin Based on your local.env edits Cantaloupe http://yourprojectnamehere.localdomain:8083/cantaloupe/admin 7. Portainer Portainer (a Docker control panel) is available at portainer.isle.localdomain . No username/password are required. This is unsafe for production environments. Return to Local ISLE Installation: New Site .","title":"Local ISLE Installation: Resources"},{"location":"install/install-local-resources/#local-isle-installation-resources","text":"","title":"Local ISLE Installation: Resources"},{"location":"install/install-local-resources/#local-url","text":"Always use the https://yourprojectnamehere.localdomain domain to view and log in to a local site. (Do not use an IP address, such as https://10.10.10.130 or https://127.0.0.01 as some components may not function correctly.)","title":"Local URL"},{"location":"install/install-local-resources/#docker-containers-passwords","text":"As instructed in the ## Step 4: Create New Users and Passwords by Editing \"local.env\" File section of the Local ISLE Installation: New Site documentation, you'll need to refer to the edited local.env for your password choices. islandora user on the ISLE host server uses islandora as the password. This might not apply to your setup if using local Docker clients. Some of the information below is for accessing the non Drupal site admin panels and resources only. (optional). In this context, hostip below can mean either the IP address e.g. http://10.10.10.130 of the Vagrant or Non-Vagrant Host VM ( CentOS / Ubuntu ) the IP address e.g. 127.0.0.1 for Docker for Mac","title":"Docker Containers: Passwords"},{"location":"install/install-local-resources/#1-mysql-container","text":"Compose Service Name Container Name Software Ports mysql Run docker ps to determine MySQL 5.7 3306 Account Password Database Perms root Based on your local.env edits ALL ALL fedora_admin Based on your local.env edits fedora3 All except Grant option isle_ld_user Based on your local.env edits Based on your local.env edits All except Grant option","title":"1. MySQL Container"},{"location":"install/install-local-resources/#2-fedora-container","text":"Compose Service Name Container Name Software Ports fedora Run docker ps to determine see below 8080 mapped to 8081 (on host) Software Version Fedora 3.8.1 Apache 2.4.7 Drupalfilter 3.8.1 Gsearch (w/remote SOLR plugin) 2.8+ (DG patched) (DG) GSearch Extensions 0.13 (DG) Islandora Transforms (XSLTs) as of 7/2019 Tomcat 8.5.x Open JDK 8.x Account Password Service URL fedoraAdmin Based on your local.env edits Fedora http://yourprojectnamehere.localdomain:8081/fedora/describe fedoraIntCallUser Based on your local.env edits Fedora http://yourprojectnamehere.localdomain:8081/fedora/objects anonymous anonymous Fedora --- fgsAdmin Based on your local.env edits Gsearch http://yourprojectnamehere.localdomain:8081/fedoragsearch/rest?operation=updateIndex admin Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8081/manager/html manager Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8081/manager/html","title":"2. Fedora Container"},{"location":"install/install-local-resources/#3-solr-container","text":"Compose Service Name Container Name Software Ports solr isle-solr-ld see below 8080 (on container) mapped to 8082 (on host) Software Version Solr 4.10.4 Tomcat 8.5.x OpenJDK 8.x (DG) Basic Solr Config 4.10.x branch Account Password Service URL admin Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html manager Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html -- -- Solr http://yourprojectnamehere.localdomain:8082/solr/","title":"3. Solr Container"},{"location":"install/install-local-resources/#4-apache-container","text":"Compose Service Name Container Name Software Ports apache isle-apache-ld see below 80, 443 Software Version Apache 2.4.7 OpenJDK 8.x Djatoka* 1.1 Drupal 7.57 PHP 7.1 Islandora 7.x * Djatoka is included because it bundles useful Kakadu binaries, but is not running as a service. Account Password Service URL Based on your local.env edits Based on your local.env edits Drupal site admin https://yourprojectnamehere.localdomain","title":"4. Apache Container"},{"location":"install/install-local-resources/#5-proxy-container","text":"Compose Service Name Container Name Software Ports proxy isle-proxy Traefik 80, 443 Account Password Service URL None Required None Required Proxy UI https://admin.yourprojectnamehere.localdomain OR http://yourprojectnamehere:8080 The Proxy Control Panel is available at admin.yourprojectnamehere.localdomain . No username/password are required. This is unsafe for production environments.","title":"5. Proxy Container"},{"location":"install/install-local-resources/#6-image-services","text":"Compose Service Name Container Name Software Ports image-services Run docker ps to determine see below 8080 (on container) mapped to 8083 (on host) Software Version Cantaloupe IIIF 4.x Account Password Service URL admin Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html manager Based on your local.env edits Tomcat http://yourprojectnamehere.localdomain:8082/manager/html admin Based on your local.env edits Cantaloupe http://yourprojectnamehere.localdomain:8083/cantaloupe/admin","title":"6. Image Services"},{"location":"install/install-local-resources/#7-portainer","text":"Portainer (a Docker control panel) is available at portainer.isle.localdomain . No username/password are required. This is unsafe for production environments. Return to Local ISLE Installation: New Site .","title":"7. Portainer"},{"location":"install/install-production-migrate/","text":"Production ISLE Installation: Migrate Existing Islandora Site Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Production ISLE Installation will be similar to the Local ISLE Installation: Migrate Existing Islandora Site instructions you just followed but in addition to using a copy of your currently running Production themed Drupal website, a copy of the Production Fedora repository will also be needed for you to continue migrating to ISLE with the end goal of first deploying to an ISLE Production environment and then cut over from the existing non-ISLE Production and Production servers to their new ISLE counterparts. Islandora Drupal site code here should be finished and ready for public consumption. Fedora data will be a mirror of your currently running non-ISLE Production Fedora repository. It is recommended that this remote site not be publicly accessible until you are ready to cutover and give public access. This installation builds a Production environment for the express purpose of migrating a previously existing Islandora site onto the ISLE platform. If you need to build a brand new Production site for development and are not migrating an existing Islandora site, then please stop and use the Production ISLE Installation: New Site instead. As this Production domain will require a real domain name or FQDN , you will need to ask your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your Production Host Server IP address in your institution's DNS records. Example: https://yourprojectnamehere.institution.edu Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) If you already have pre-existing Production commercial SSL certificates, they can certainly be reused and copied into the ISLE project as directed. Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere.institution.edu This document also has directions on how you can save newly updated ISLE code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Production and finally to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , production.env , etc. This document does not have directions on how you can save previously existing Islandora Drupal code into a git repository and assumes this step has already happened. The directions below will explain how to clone Islandora Drupal code from a previously existing Islandora Drupal git repository that should already be accessible to you. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Production ISLE installation is intended for an existing Production Islandora Drupal site to be imported along with a copy of the current Production Fedora Repository for further ISLE migration testing, Drupal theme development, ingest testing, etc. on a remote ISLE host server. Some materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: Migrate Existing Islandora Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Production ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Production environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. Critical - This Production server has the same amount of disk space as your current Production Fedora server does in order to store a copy of the Fedora repository. Please ensure that these sizes match. Please also plan on adding additional capacity as needed for any potential ingest testing, etc. You have a previously existing private Islandora Drupal git repository. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. You have already have the appropriate A record entered into your institutions DNS system and can resolve the Production domain (https://yourprojectnamehere.institution.edu) using a tool like https://www.whatsmydns.net/ RECOMMENDATION: We recommend that you use a temporary domain name e.g. https://yourprojectnamehere-newprod.institution.edu to check the new Production ISLE site while an existing non-ISLE Production site is still running and compare for differences. This will also allow end users to still access the old Production system while the work for the new ISLE system is ongoing. You'll need to add an additional A record for yourprojectnamehere-newprod.institution.edu to point to the same ISLE Production Host Server IP. Please adjust all involved domain names and configuration files accordingly. When ready to launch the new ISLE production site publicly, you can remove the -newprod from all domain references and configuration files. Update the DNS records to repoint the current non-ISLE Production server A record for yourprojectnamehere.institution.edu to the new ISLE host server IP. Remove the temporary DNS A record for yourprojectnamehere-newprod.institution.edu If using commercial SSLs, you'll also need to copy them over to the ./config/proxy/ssl-certs directory and adjust the traefik.production.toml file accordingly with the new file names. You have reviewed the ISLE Installation: Environments for more information about suggested Production values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Production server. You have access to your Production Islandora Drupal, Solr and Fedora data and copy from your servers to the new ISLE Production server. You will schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Production. Index of Instructions This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Production ISLE Host server with additional followup work to be performed on the remote Production ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Production pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Production and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Production Environment Profile for Deploy to Remote Step 1: Copy Production Data to Your Local Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"production.env\" Step 4: On Local - Review and Edit \"docker-compose.production.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\" Step 5: On Local Production - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-18: On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Production - Clone Your Production Islandora Code Step 10: On Remote Production - Copy Over the Production Data Directories Step 11: On Remote Production - If Using Let's Encrypt Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment Step 13: On Remote Production - Download the ISLE Images Step 14: On Remote Production - Start Containers Step 15: On Remote Production - Import the Production MySQL Drupal Database Step 16: On Remote Production - Run ISLE Scripts Step 17: On Remote Production - Re-Index Fedora & Solr Step 18: On Remote Production - Review and Test the Drupal Production Site Step 1: Copy Production Data to Your Local Drupal Site Database You are repeating this step given that data may have changed on the Production site since creating your local. It is critical that Production be a mirror or close to exact copy of Production. Prior to attempting this step, please consider the following: Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT departments for your institution's database naming conventions. Recommended that the production databases be exported using the .sql /or .gz file formats (e.g. \"prod_drupal_site_082019.sql.gz\") for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the production server in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows Export the Production MySQL Islandora Drupal Database Export the MySQL database for the current Production Islandora Drupal site in use and copy it to your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your Production site. If you are not comfortable or familiar with performing these actions, we recommend that you instead work with your available IT resources to do so. To complete this process, you may use a MySQL GUI client or, if you have command line access to the MySQL database server, you may run the following command, substituting your actual user and database names: Example: mysqldump -u username -p database_name > prod_drupal_site_082019.sql Copy this file down to your personal computer. Step 2: On Local - Shutdown Any Local Containers & Review Local Code Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down Step 3: On Local - Create New Users and Passwords by Editing \"production.env\" Open the \"production.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Production environment but we strongly recommend not reusing all passwords for environments (e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment). In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.production.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file. Step 4: On Local - Review and Edit \"docker-compose.production.yml\" Review the disks and volumes on your remote Production ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.production.yml file. Please read through the docker-compose.production.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora services section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache services section - /opt/data/apache/html:/var/www/html Review the your docker-compose.local.yml file for custom edits made and copy them to the docker-compose.production.yml file as needed, this can include changes to Fedora GSearch Transforms, Fedora hash size and more. SSL Certificates Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.production.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to the /config/proxy/traefik.production.toml file for further configuration instructions. Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\" This section is for optional changes for the docker-compose.production.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting the following in the apache services section. - ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.production.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Production ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.production.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines found in the new TICK stack services section of the docker-compose.production.yml file for hosting of that monitoring service on the Production ISLE Host server. There are additional configurations to be made to files contained within ./config/tick but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. Uncomment the TICK stack data volumes as well at the bottom of the file. Step 5: On Local Production - If Using Commercial SSLs If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere.domain.key Edit the ./config/proxy/traefik.production.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Production SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.domain.cert\" keyFile = \"/certs/yourprojectnamehere.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.institution.edu.pem\" keyFile = \"/certs/yourprojectnamehere.institution.edu.key\" Step 6: On Local - Commit ISLE Code to Git Repository Once you have made all of the appropriate changes to your Production profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Production\" git push origin main On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Production ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Production to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data Step 9: On Remote Production - Clone Your Production Islandora Code Please clone from your existing Production Islandora git repository. git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-islandora Step 10: On Remote Production - Copy Over the Production Data Directories It is recommended that you schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Production. As you may have made some critical decisions potentially from \"Step 0: Copy Production Data to Your Local\" of the Local ISLE Installation: Migrate Existing Islandora Site instructions, you need to re-follow the steps to get your: Production Drupal site files directory Solr schema & Islandora transforms If you picked Easy option: then you don't need to do anything here for the Solr schema & Islandora transforms If you picked the Intermediate or Advanced options: You'll need to copy in the customizations and files you created during the local environment into the docker-compose.production.yml . Ensure that one set of transforms and schema are used across all environments. Production Fedora datastreamStore directory You'll need to adjust the paths below in case your setup differs on either the non-ISLE Production server or the ISLE Production server. Copy your /usr/local/fedora/data/datastreamStore data to the suggested path of /mnt/data/fedora/datastreamStore You may need to change the permissions to root:root on the Production /mnt/data/fedora/datastreamStore directory above after copying so the Fedora container can access properly. Do not do this on your existing Production system please. Production Fedora objectStore . Copy your /usr/local/fedora/data/objectStore data to the suggested path of /opt/data/fedora/objectStore You may need to change the permissions to root:root on the Production /opt/data/fedora/objectStore above after copying so the Fedora container can access properly. Do not do this on your existing Production system please. Step 11: On Remote Production - If Using Let's Encrypt If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ssl-certs/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation. Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env . This file is ignored in git. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_production` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full production domain here e.g. digital.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections production) is acdcp Edit COMPOSE_FILE change local to production COMPOSE_FILE=docker-compose.production.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-) Step 13: On Remote Production - Download the ISLE Images Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ). Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere docker-compose pull Step 14: On Remote Production - Start Containers Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Production site URL: https://yourprojectnamehere.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Step 15: On Remote Production - Import the Local MySQL Drupal Database Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database Import the Local MySQL Islandora Drupal Database Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Production server. Import the exported Local MySQL database for use in the current Production Drupal site. Refer to your production.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Using the same open terminal: Shell into your currently running Production MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"production.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"production.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container Step 16: On Remote Production - Run ISLE Scripts This step will show you how to run the \"migration_site_vsets.sh\" script on the Apache container to change Drupal database site settings for ISLE connectivity. Using the same open terminal: Run docker ps to determine the apache container name Copy the \"migration_site_vsets.sh\" to the root of the Drupal directory on your Apache container docker cp ./scripts/apache/migration_site_vsets.sh your-apache-containername:/var/www/html/migration_site_vsets.sh Change the permissions on the script to make it executable docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" Run the script docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" This step will show you how to shell into your currently running Production Apache container, and run the \"fix-permissions.sh\" script to fix the Drupal site permissions. docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Type exit to exit the container For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Step 17: On Remote Production - Re-Index Fedora & Solr When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr is an open source enterprise search platform that works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete. Reindex Fedora RI & Fedora SQL Database (part 1 of 2) Since this command can take minutes or hours depending on the size of your repository, As such, it is recommended starting a screen session prior to running the following commands. Learn more about screen here Note: The method described below is a longer way of doing this process to onboard users. Shell into your currently running Production Fedora container Run docker ps to determine the Fedora container name docker exec -it your-fedora-containername bash Navigate to the utility_scripts directory cd utility_scripts Run the rebuildFedora.sh script. This script will give you output like the example below. ./rebuildFedora.sh OK - Stopped application at context path [/fedora] Starting the rebuild process in the background. This may take a while depending on your Fedora repository size. To watch the log and process run: tail -f $CATALINA_HOME/logs/fedora-rebuild.out Truncating old SQL tables. mysql: [Warning] Using a password on the command line interface can be insecure. Automatically tailing the log file... Press CTRL+C to stop watching at any time. This will NOT stop the rebuild process After a good period of time, again depending on the size of your Fedora collection there should be output like the example below. This indicates that the Fedora RI & SQL reindex process was successful. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the process, if need be. Do not exit the Fedora container yet, one more index to go; Solr. Adding object #31: islandora:sp_web_archive_collection Adding object #32: islandora:sp_web_archive Adding object #33: islandora:newspaperPageCModel Adding object #34: islandora:compound_collection Adding object #35: islandora:newspaperCModel Adding object #36: islandora:newspaperIssueCModel Adding object #37: ir:citationCollection Adding object #38: islandora:sp_basic_image_collection SUCCESS: 38 objects rebuilt. OK - Started application at context path [/fedora] Reindex Solr (part 2 of 2) WARNING - This reindex process takes the longest of all three, with up to 1-30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Still staying within the utility_scripts directory on the Fedora container or reenter the Fedora container having started a new screen session, now run the updateSolrIndex.sh script. This script will give you output like the example below. ./updateSolrIndex.sh FedoraGenericSearch (FGS) update Solr index from Fedora helper script. Starting to reindex your Fedora repository. This process runs in the background and may take some time. Checked and this operation is still running. You may disconnect and the process will continue to run. Find logs at /usr/local/tomcat/logs/fgs-update-foxml.out and /usr/local/tomcat/logs/fgs-update-foxml.err. You can watch log file 'tail -f /usr/local/tomcat/logs/fedoragsearch.daily.log' as the process runs. Note: Within this output, options to tail logs and watch progress are offered. Depending on the size of your collection this process may take hours, however it is okay to exit out of the container and even log off the remote Production server. You can check back frequently by running tail -f /usr/local/tomcat/logs/fgs-update-foxml.out on the Fedora container. If you visit your Drupal site and run a Solr search, you should start to see objects and facets start to work. The number of objects will increase over time. After a good period of time, again depending on the size of your Fedora collection, when the Solr re-index process finishes, output like the example below will appear in the /usr/local/tomcat/logs/fgs-update-foxml.out log. This indicates that the Solr reindex process was completed. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the tail process, if need be. tail -f /usr/local/tomcat/logs/fgs-update-foxml.out Args 0=http://localhost:8080 1=updateIndex 2=fromFoxmlFiles <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resultPage operation=\"updateIndex\" action=\"fromFoxmlFiles\" value=\"\" repositoryName=\"FgsRepos\" indexNames=\"\" resultPageXslt=\"\" dateTime=\"Thu Aug 08 20:43:12 GMT 2019\"> <updateIndex xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:foxml=\"info:fedora/fedora-system:def/foxml#\" xmlns:zs=\"http://www.loc.gov/zing/srw/\" warnCount=\"0\" docCount=\"13\" deleteTotal=\"0\" updateTotal=\"13\" insertTotal=\"0\" indexName=\"FgsIndex\"/> </resultPage> Type exit when finished to exit the container. Step 18: On Remote Production - Review and Test the Drupal Production Site In your web browser, enter this URL: https://yourprojectnamehere.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"production.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation. Next Steps Once you are ready to deploy your finished Drupal site, you may progress to launching the Production site publicly which could involve the following steps depending on choices made earlier in this document and process: If you followed the use of the temporary -newprod suggestion in the Assumptions section, remove the -newprod from all domain references and configuration files and recommit the change on the remote server in git. If using commercial SSLs, you'll also need to copy them over to the ./config/proxy/ssl-certs directory and adjust the traefik.production.toml file accordingly with the new file names. If using Let's Encrypt, upon restart with the new settings, the acme.json file contents will change automatically. Update the DNS records to repoint the current non-ISLE Production server A record for yourprojectnamehere.institution.edu to the new ISLE host server IP. Remove the temporary DNS A record for yourprojectnamehere-newprod.institution.edu Lift any firewall restrictions and allowing full Internet access on http (port 80) and https (443). Do not allow any other port to be publicly accessible. Additional Resources ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Production ISLE Installation: New Site","title":"Production: Migrate Site"},{"location":"install/install-production-migrate/#production-isle-installation-migrate-existing-islandora-site","text":"Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Production ISLE Installation will be similar to the Local ISLE Installation: Migrate Existing Islandora Site instructions you just followed but in addition to using a copy of your currently running Production themed Drupal website, a copy of the Production Fedora repository will also be needed for you to continue migrating to ISLE with the end goal of first deploying to an ISLE Production environment and then cut over from the existing non-ISLE Production and Production servers to their new ISLE counterparts. Islandora Drupal site code here should be finished and ready for public consumption. Fedora data will be a mirror of your currently running non-ISLE Production Fedora repository. It is recommended that this remote site not be publicly accessible until you are ready to cutover and give public access. This installation builds a Production environment for the express purpose of migrating a previously existing Islandora site onto the ISLE platform. If you need to build a brand new Production site for development and are not migrating an existing Islandora site, then please stop and use the Production ISLE Installation: New Site instead. As this Production domain will require a real domain name or FQDN , you will need to ask your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your Production Host Server IP address in your institution's DNS records. Example: https://yourprojectnamehere.institution.edu Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) If you already have pre-existing Production commercial SSL certificates, they can certainly be reused and copied into the ISLE project as directed. Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere.institution.edu This document also has directions on how you can save newly updated ISLE code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Production and finally to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , production.env , etc. This document does not have directions on how you can save previously existing Islandora Drupal code into a git repository and assumes this step has already happened. The directions below will explain how to clone Islandora Drupal code from a previously existing Islandora Drupal git repository that should already be accessible to you. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Production ISLE Installation: Migrate Existing Islandora Site"},{"location":"install/install-production-migrate/#assumptions-prerequisites","text":"This Production ISLE installation is intended for an existing Production Islandora Drupal site to be imported along with a copy of the current Production Fedora Repository for further ISLE migration testing, Drupal theme development, ingest testing, etc. on a remote ISLE host server. Some materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: Migrate Existing Islandora Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Production ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Production environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. Critical - This Production server has the same amount of disk space as your current Production Fedora server does in order to store a copy of the Fedora repository. Please ensure that these sizes match. Please also plan on adding additional capacity as needed for any potential ingest testing, etc. You have a previously existing private Islandora Drupal git repository. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. You have already have the appropriate A record entered into your institutions DNS system and can resolve the Production domain (https://yourprojectnamehere.institution.edu) using a tool like https://www.whatsmydns.net/ RECOMMENDATION: We recommend that you use a temporary domain name e.g. https://yourprojectnamehere-newprod.institution.edu to check the new Production ISLE site while an existing non-ISLE Production site is still running and compare for differences. This will also allow end users to still access the old Production system while the work for the new ISLE system is ongoing. You'll need to add an additional A record for yourprojectnamehere-newprod.institution.edu to point to the same ISLE Production Host Server IP. Please adjust all involved domain names and configuration files accordingly. When ready to launch the new ISLE production site publicly, you can remove the -newprod from all domain references and configuration files. Update the DNS records to repoint the current non-ISLE Production server A record for yourprojectnamehere.institution.edu to the new ISLE host server IP. Remove the temporary DNS A record for yourprojectnamehere-newprod.institution.edu If using commercial SSLs, you'll also need to copy them over to the ./config/proxy/ssl-certs directory and adjust the traefik.production.toml file accordingly with the new file names. You have reviewed the ISLE Installation: Environments for more information about suggested Production values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Production server. You have access to your Production Islandora Drupal, Solr and Fedora data and copy from your servers to the new ISLE Production server. You will schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Production.","title":"Assumptions / Prerequisites"},{"location":"install/install-production-migrate/#index-of-instructions","text":"This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Production ISLE Host server with additional followup work to be performed on the remote Production ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Production pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Production and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Production Environment Profile for Deploy to Remote Step 1: Copy Production Data to Your Local Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"production.env\" Step 4: On Local - Review and Edit \"docker-compose.production.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\" Step 5: On Local Production - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-18: On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Production - Clone Your Production Islandora Code Step 10: On Remote Production - Copy Over the Production Data Directories Step 11: On Remote Production - If Using Let's Encrypt Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment Step 13: On Remote Production - Download the ISLE Images Step 14: On Remote Production - Start Containers Step 15: On Remote Production - Import the Production MySQL Drupal Database Step 16: On Remote Production - Run ISLE Scripts Step 17: On Remote Production - Re-Index Fedora & Solr Step 18: On Remote Production - Review and Test the Drupal Production Site","title":"Index of Instructions"},{"location":"install/install-production-migrate/#step-1-copy-production-data-to-your-local","text":"","title":"Step 1: Copy Production Data to Your Local"},{"location":"install/install-production-migrate/#drupal-site-database","text":"You are repeating this step given that data may have changed on the Production site since creating your local. It is critical that Production be a mirror or close to exact copy of Production. Prior to attempting this step, please consider the following: Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT departments for your institution's database naming conventions. Recommended that the production databases be exported using the .sql /or .gz file formats (e.g. \"prod_drupal_site_082019.sql.gz\") for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the production server in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows","title":"Drupal Site Database"},{"location":"install/install-production-migrate/#export-the-production-mysql-islandora-drupal-database","text":"Export the MySQL database for the current Production Islandora Drupal site in use and copy it to your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your Production site. If you are not comfortable or familiar with performing these actions, we recommend that you instead work with your available IT resources to do so. To complete this process, you may use a MySQL GUI client or, if you have command line access to the MySQL database server, you may run the following command, substituting your actual user and database names: Example: mysqldump -u username -p database_name > prod_drupal_site_082019.sql Copy this file down to your personal computer.","title":"Export the Production MySQL Islandora Drupal Database"},{"location":"install/install-production-migrate/#step-2-on-local-shutdown-any-local-containers-review-local-code","text":"Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down","title":"Step 2: On Local - Shutdown Any Local Containers &amp; Review Local Code"},{"location":"install/install-production-migrate/#step-3-on-local-create-new-users-and-passwords-by-editing-productionenv","text":"Open the \"production.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Production environment but we strongly recommend not reusing all passwords for environments (e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment). In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.production.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file.","title":"Step 3: On Local - Create New Users and Passwords by Editing \"production.env\""},{"location":"install/install-production-migrate/#step-4-on-local-review-and-edit-docker-composeproductionyml","text":"Review the disks and volumes on your remote Production ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.production.yml file. Please read through the docker-compose.production.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora services section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache services section - /opt/data/apache/html:/var/www/html Review the your docker-compose.local.yml file for custom edits made and copy them to the docker-compose.production.yml file as needed, this can include changes to Fedora GSearch Transforms, Fedora hash size and more.","title":"Step 4: On Local - Review and Edit \"docker-compose.production.yml\""},{"location":"install/install-production-migrate/#ssl-certificates","text":"Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.production.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to the /config/proxy/traefik.production.toml file for further configuration instructions.","title":"SSL Certificates"},{"location":"install/install-production-migrate/#step-4a-on-local-optional-changes-for-docker-composeproductionyml","text":"This section is for optional changes for the docker-compose.production.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting the following in the apache services section. - ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.production.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Production ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.production.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines found in the new TICK stack services section of the docker-compose.production.yml file for hosting of that monitoring service on the Production ISLE Host server. There are additional configurations to be made to files contained within ./config/tick but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. Uncomment the TICK stack data volumes as well at the bottom of the file.","title":"Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\""},{"location":"install/install-production-migrate/#step-5-on-local-production-if-using-commercial-ssls","text":"If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere.domain.key Edit the ./config/proxy/traefik.production.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Production SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.domain.cert\" keyFile = \"/certs/yourprojectnamehere.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.institution.edu.pem\" keyFile = \"/certs/yourprojectnamehere.institution.edu.key\"","title":"Step 5: On Local Production - If Using Commercial SSLs"},{"location":"install/install-production-migrate/#step-6-on-local-commit-isle-code-to-git-repository","text":"Once you have made all of the appropriate changes to your Production profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Production\" git push origin main","title":"Step 6: On Local - Commit ISLE Code to Git Repository"},{"location":"install/install-production-migrate/#on-remote-production-configure-the-isle-production-environment-profile-for-launch-and-usage","text":"","title":"On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage"},{"location":"install/install-production-migrate/#step-7-on-remote-production-git-clone-the-isle-repository-to-the-remote-production-isle-host-server","text":"This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Production ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Production to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle","title":"Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server"},{"location":"install/install-production-migrate/#step-8-on-remote-production-create-the-appropriate-local-data-paths-for-apache-fedora-and-log-data","text":"Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data","title":"Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data"},{"location":"install/install-production-migrate/#step-9-on-remote-production-clone-your-production-islandora-code","text":"Please clone from your existing Production Islandora git repository. git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-islandora","title":"Step 9: On Remote Production - Clone Your Production Islandora Code"},{"location":"install/install-production-migrate/#step-10-on-remote-production-copy-over-the-production-data-directories","text":"It is recommended that you schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Production. As you may have made some critical decisions potentially from \"Step 0: Copy Production Data to Your Local\" of the Local ISLE Installation: Migrate Existing Islandora Site instructions, you need to re-follow the steps to get your: Production Drupal site files directory Solr schema & Islandora transforms If you picked Easy option: then you don't need to do anything here for the Solr schema & Islandora transforms If you picked the Intermediate or Advanced options: You'll need to copy in the customizations and files you created during the local environment into the docker-compose.production.yml . Ensure that one set of transforms and schema are used across all environments. Production Fedora datastreamStore directory You'll need to adjust the paths below in case your setup differs on either the non-ISLE Production server or the ISLE Production server. Copy your /usr/local/fedora/data/datastreamStore data to the suggested path of /mnt/data/fedora/datastreamStore You may need to change the permissions to root:root on the Production /mnt/data/fedora/datastreamStore directory above after copying so the Fedora container can access properly. Do not do this on your existing Production system please. Production Fedora objectStore . Copy your /usr/local/fedora/data/objectStore data to the suggested path of /opt/data/fedora/objectStore You may need to change the permissions to root:root on the Production /opt/data/fedora/objectStore above after copying so the Fedora container can access properly. Do not do this on your existing Production system please.","title":"Step 10: On Remote Production - Copy Over the Production Data Directories"},{"location":"install/install-production-migrate/#step-11-on-remote-production-if-using-lets-encrypt","text":"If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ssl-certs/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation.","title":"Step 11: On Remote Production - If Using Let's Encrypt"},{"location":"install/install-production-migrate/#step-12-on-remote-production-edit-the-env-file-to-change-to-the-production-environment","text":"This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env . This file is ignored in git. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_production` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full production domain here e.g. digital.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections production) is acdcp Edit COMPOSE_FILE change local to production COMPOSE_FILE=docker-compose.production.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-)","title":"Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment"},{"location":"install/install-production-migrate/#step-13-on-remote-production-download-the-isle-images","text":"Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ). Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere docker-compose pull","title":"Step 13: On Remote Production - Download the ISLE Images"},{"location":"install/install-production-migrate/#step-14-on-remote-production-start-containers","text":"Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Production site URL: https://yourprojectnamehere.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors.","title":"Step 14: On Remote Production - Start Containers"},{"location":"install/install-production-migrate/#step-15-on-remote-production-import-the-local-mysql-drupal-database","text":"Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database","title":"Step 15: On Remote Production - Import the Local MySQL Drupal Database"},{"location":"install/install-production-migrate/#import-the-local-mysql-islandora-drupal-database","text":"Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Production server. Import the exported Local MySQL database for use in the current Production Drupal site. Refer to your production.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Using the same open terminal: Shell into your currently running Production MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"production.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"production.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container","title":"Import the Local MySQL Islandora Drupal Database"},{"location":"install/install-production-migrate/#step-16-on-remote-production-run-isle-scripts","text":"This step will show you how to run the \"migration_site_vsets.sh\" script on the Apache container to change Drupal database site settings for ISLE connectivity. Using the same open terminal: Run docker ps to determine the apache container name Copy the \"migration_site_vsets.sh\" to the root of the Drupal directory on your Apache container docker cp ./scripts/apache/migration_site_vsets.sh your-apache-containername:/var/www/html/migration_site_vsets.sh Change the permissions on the script to make it executable docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" Run the script docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" This step will show you how to shell into your currently running Production Apache container, and run the \"fix-permissions.sh\" script to fix the Drupal site permissions. docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Type exit to exit the container For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows.","title":"Step 16: On Remote Production - Run ISLE Scripts"},{"location":"install/install-production-migrate/#step-17-on-remote-production-re-index-fedora-solr","text":"When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr is an open source enterprise search platform that works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete.","title":"Step 17: On Remote Production - Re-Index Fedora &amp; Solr"},{"location":"install/install-production-migrate/#reindex-fedora-ri-fedora-sql-database-part-1-of-2","text":"Since this command can take minutes or hours depending on the size of your repository, As such, it is recommended starting a screen session prior to running the following commands. Learn more about screen here Note: The method described below is a longer way of doing this process to onboard users. Shell into your currently running Production Fedora container Run docker ps to determine the Fedora container name docker exec -it your-fedora-containername bash Navigate to the utility_scripts directory cd utility_scripts Run the rebuildFedora.sh script. This script will give you output like the example below. ./rebuildFedora.sh OK - Stopped application at context path [/fedora] Starting the rebuild process in the background. This may take a while depending on your Fedora repository size. To watch the log and process run: tail -f $CATALINA_HOME/logs/fedora-rebuild.out Truncating old SQL tables. mysql: [Warning] Using a password on the command line interface can be insecure. Automatically tailing the log file... Press CTRL+C to stop watching at any time. This will NOT stop the rebuild process After a good period of time, again depending on the size of your Fedora collection there should be output like the example below. This indicates that the Fedora RI & SQL reindex process was successful. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the process, if need be. Do not exit the Fedora container yet, one more index to go; Solr. Adding object #31: islandora:sp_web_archive_collection Adding object #32: islandora:sp_web_archive Adding object #33: islandora:newspaperPageCModel Adding object #34: islandora:compound_collection Adding object #35: islandora:newspaperCModel Adding object #36: islandora:newspaperIssueCModel Adding object #37: ir:citationCollection Adding object #38: islandora:sp_basic_image_collection SUCCESS: 38 objects rebuilt. OK - Started application at context path [/fedora]","title":"Reindex Fedora RI &amp; Fedora SQL Database (part 1 of 2)"},{"location":"install/install-production-migrate/#reindex-solr-part-2-of-2","text":"WARNING - This reindex process takes the longest of all three, with up to 1-30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Still staying within the utility_scripts directory on the Fedora container or reenter the Fedora container having started a new screen session, now run the updateSolrIndex.sh script. This script will give you output like the example below. ./updateSolrIndex.sh FedoraGenericSearch (FGS) update Solr index from Fedora helper script. Starting to reindex your Fedora repository. This process runs in the background and may take some time. Checked and this operation is still running. You may disconnect and the process will continue to run. Find logs at /usr/local/tomcat/logs/fgs-update-foxml.out and /usr/local/tomcat/logs/fgs-update-foxml.err. You can watch log file 'tail -f /usr/local/tomcat/logs/fedoragsearch.daily.log' as the process runs. Note: Within this output, options to tail logs and watch progress are offered. Depending on the size of your collection this process may take hours, however it is okay to exit out of the container and even log off the remote Production server. You can check back frequently by running tail -f /usr/local/tomcat/logs/fgs-update-foxml.out on the Fedora container. If you visit your Drupal site and run a Solr search, you should start to see objects and facets start to work. The number of objects will increase over time. After a good period of time, again depending on the size of your Fedora collection, when the Solr re-index process finishes, output like the example below will appear in the /usr/local/tomcat/logs/fgs-update-foxml.out log. This indicates that the Solr reindex process was completed. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the tail process, if need be. tail -f /usr/local/tomcat/logs/fgs-update-foxml.out Args 0=http://localhost:8080 1=updateIndex 2=fromFoxmlFiles <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resultPage operation=\"updateIndex\" action=\"fromFoxmlFiles\" value=\"\" repositoryName=\"FgsRepos\" indexNames=\"\" resultPageXslt=\"\" dateTime=\"Thu Aug 08 20:43:12 GMT 2019\"> <updateIndex xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:foxml=\"info:fedora/fedora-system:def/foxml#\" xmlns:zs=\"http://www.loc.gov/zing/srw/\" warnCount=\"0\" docCount=\"13\" deleteTotal=\"0\" updateTotal=\"13\" insertTotal=\"0\" indexName=\"FgsIndex\"/> </resultPage> Type exit when finished to exit the container.","title":"Reindex Solr (part 2 of 2)"},{"location":"install/install-production-migrate/#step-18-on-remote-production-review-and-test-the-drupal-production-site","text":"In your web browser, enter this URL: https://yourprojectnamehere.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"production.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation.","title":"Step 18: On Remote Production - Review and Test the Drupal Production Site"},{"location":"install/install-production-migrate/#next-steps","text":"Once you are ready to deploy your finished Drupal site, you may progress to launching the Production site publicly which could involve the following steps depending on choices made earlier in this document and process: If you followed the use of the temporary -newprod suggestion in the Assumptions section, remove the -newprod from all domain references and configuration files and recommit the change on the remote server in git. If using commercial SSLs, you'll also need to copy them over to the ./config/proxy/ssl-certs directory and adjust the traefik.production.toml file accordingly with the new file names. If using Let's Encrypt, upon restart with the new settings, the acme.json file contents will change automatically. Update the DNS records to repoint the current non-ISLE Production server A record for yourprojectnamehere.institution.edu to the new ISLE host server IP. Remove the temporary DNS A record for yourprojectnamehere-newprod.institution.edu Lift any firewall restrictions and allowing full Internet access on http (port 80) and https (443). Do not allow any other port to be publicly accessible.","title":"Next Steps"},{"location":"install/install-production-migrate/#additional-resources","text":"ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-production-migrate/#end-of-production-isle-installation-new-site","text":"","title":"End of Production ISLE Installation: New Site"},{"location":"install/install-production-new/","text":"Production ISLE Installation: New Site Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Production ISLE Installation will use the themed Drupal website created during the Local ISLE Installation: New Site process and will create an empty Fedora repository for remote (non-local or cloud) hosting of a Production site. Islandora Drupal site code here should be considered finished and ready for public access. The previously used Production system might have Fedora data & collections that should then be synced to this Production site or end users can choose to only ingest on Production. It is recommended that this remote site not be publicly accessible until ready to launch. While this installation will get you a brand new Production site, it is not intended as a migration process of a previously existing Islandora site. If you need to build a Production environment to migrate a previously existing Islandora site, please use the Production ISLE Installation: Migrate Existing Islandora Site instead. As this Production domain will require a real domain name or FQDN , you will need to ask your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your Production Host Server IP address in your institution's DNS records. Example: https://yourprojectnamehere.institution.edu Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere.institution.edu This document also has directions on how you can save newly created ISLE and Islandora code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Production and finally to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , production.env , etc. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Production ISLE installation is intended for a brand new ISLE site for ingest and public use on a remote ISLE host server. All materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: New Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Production ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Production environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. This server has enough disk space to store a large Fedora repository e.g. 1-5 TB or larger depending on how many objects you plan on ingesting. You have already created the two private git repositories for your projects ISLE and Islandora code in Github , Bitbucket , Gitlab , etc. having followed Step 2 from the Local ISLE Installation: New Site instructions. You will continue to use these two git repositories for all environments. ISLE project config - e.g. yourprojectnamehere-isle Islandora Drupal site code - e.g. yourprojectnamehere-islandora You have already have the appropriate A record entered into your institutions DNS system and can resolve the Production domain (https://yourprojectnamehere.institution.edu) using a tool like https://www.whatsmydns.net/ You have reviewed the ISLE Installation: Environments for more information about suggested Production values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Production server. Index of Instructions This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Production ISLE Host server with additional followup work to be performed on the remote Production ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Production pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Production and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Production Environment Profile for Deploy to Remote Step 1: On Local - Export the Local MySQL Database * Export the Local MySQL Islandora Drupal Database Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"production.env\" Step 4: On Local - Review and Edit \"docker-compose.production.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\" Step 5: On Local Production - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-17: On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Production - Clone Your Islandora Code Step 10: On Remote Production - Copy Over the Local Islandora Drupal Files Directory Step 11: On Remote Production - If Using Let's Encrypt Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment Step 13: On Remote Production - Download the ISLE Images Step 14: On Remote Production - Start Containers Step 15: On Remote Production - Import the Local MySQL Drupal Database Step 16: On Remote Production - Run the \"fix-permissions.sh\" Script Step 17: On Remote Production - Review and Test the Drupal Production Site On Local - Configure the ISLE Production environment profile for deploy to Remote Step 1: On Local - Export the Local MySQL Database Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the local Apache container in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows Export the Local MySQL Islandora Drupal Database Export the MySQL database for the current Local Drupal site in use and copy it on your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your newly created and themed new Islandora site. Refer to your local.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Shell into your currently running Local MySQL container docker exec -it your-mysql-containername bash Export the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"local.env\" file. mysqldump -u DRUPAL_DB_USER -p DRUPAL_DB > local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"local.env\") Upon completion, exit the MySQL container Copy this file from the MySQL container to a location on your personal computer. docker cp your-mysql-containername:/local_drupal_site_082019.sql /path/to/location Step 2: On Local - Shutdown Any Local Containers & Review Local Code Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down Step 3: On Local - Create New Users and Passwords by Editing \"production.env\" Open the \"production.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Production environment but we strongly recommend not reusing all passwords for environments (e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment). In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.production.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file. Step 4: On Local - Review and Edit \"docker-compose.production.yml\" Review the disks and volumes on your remote Production ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.production.yml file. Please read through the docker-compose.production.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora service section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache service section - /opt/data/apache/html:/var/www/html Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.production.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: - ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to ./config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to to the ./config/proxy/traefik.production.toml file for further configuration instructions. Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\" This section is for optional changes for the docker-compose.production.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting In the apache services section, this line: - ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.production.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Production ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.production.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" * Uncomment the lines found in the new TICK stack services section of the `docker-compose.production.yml` file for hosting of that monitoring service on the Production ISLE Host server. This will allow the TICK - Telegraf agent to report properly to either the TICK stack on your Staging server or a remote TICK server. * There are additional configurations to be made to files contained within `./config/tick` but you'll need to follow the [TICK Stack](../optional-components/tickstack.md) instructions prior to committing changes to your ISLE git repository. Step 5: On Local Production - If Using Commercial SSLs If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere.domain.key Edit the ./config/proxy/traefik.production.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Production SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.domain.cert\" keyFile = \"/certs/yourprojectnamehere.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.institution.edu.pem\" keyFile = \"/certs/yourprojectnamehere.institution.edu.key\" Step 6: On Local - Commit ISLE Code to Git Repository Once you have made all of the appropriate changes to your Production profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Production\" git push origin main On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Production ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Production to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data Step 9: On Remote Production - Clone Your Islandora Code git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-islandora Step 10: On Remote Production - Copy Over the Local Islandora Drupal Files Directory This files directory should be on your personal computer and should be copied to the remote Production server. Copy ~/yourprojectnamehere-isle/data/apache/html/sites/default/files to /opt/data/apache/html/sites/default/files Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/data/apache/html/sites/default/files Step 11: On Remote Production - If Using Let's Encrypt If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ssl-certs/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation. Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env and then commit it locally to git. This local commit that never gets pushed back to the git repository is critical to allow future ISLE updates or config changes. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_production` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full production domain here e.g. digital.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections production) is acdcp Edit COMPOSE_FILE change local to production COMPOSE_FILE=docker-compose.production.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-) Step 13: On Remote Production - Download the ISLE Images Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere docker-compose pull Step 14: On Remote Production - Start Containers Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Production site URL: https://yourprojectnamehere.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Step 15: On Remote Production - Import the Local MySQL Drupal Database Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database Import the Local MySQL Islandora Drupal Database Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Production server. Import the exported Local MySQL database for use in the current Production Drupal site. Refer to your production.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Shell into your currently running Production MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"production.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"production.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container Step 16: On Remote Production - Run the \"fix-permissions.sh\" Script You'll need to fix the Drupal site permissions by running the /fix-permissions.sh script from the Apache container Run docker ps to determine the Apache container name Shell into your currently running Production Apache container docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Done. 'all' cache was cleared.\" Step 17: On Remote Production - Review and Test the Drupal Production Site In your web browser, enter this URL: https://yourprojectnamehere.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"production.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation. Next Steps Once you are ready to deploy your finished Drupal site, you may progress to launching the Production site publicly, lifting any firewall restrictions and allowing full Internet access on http (port 80) and https (443). Do not allow any other port to be publicly accessible. Additional Resources ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Production ISLE Installation: New Site","title":"Production: New Site"},{"location":"install/install-production-new/#production-isle-installation-new-site","text":"Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Production ISLE Installation will use the themed Drupal website created during the Local ISLE Installation: New Site process and will create an empty Fedora repository for remote (non-local or cloud) hosting of a Production site. Islandora Drupal site code here should be considered finished and ready for public access. The previously used Production system might have Fedora data & collections that should then be synced to this Production site or end users can choose to only ingest on Production. It is recommended that this remote site not be publicly accessible until ready to launch. While this installation will get you a brand new Production site, it is not intended as a migration process of a previously existing Islandora site. If you need to build a Production environment to migrate a previously existing Islandora site, please use the Production ISLE Installation: Migrate Existing Islandora Site instead. As this Production domain will require a real domain name or FQDN , you will need to ask your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your Production Host Server IP address in your institution's DNS records. Example: https://yourprojectnamehere.institution.edu Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere.institution.edu This document also has directions on how you can save newly created ISLE and Islandora code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Production and finally to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , production.env , etc. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Production ISLE Installation: New Site"},{"location":"install/install-production-new/#assumptions-prerequisites","text":"This Production ISLE installation is intended for a brand new ISLE site for ingest and public use on a remote ISLE host server. All materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: New Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Production ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Production environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. This server has enough disk space to store a large Fedora repository e.g. 1-5 TB or larger depending on how many objects you plan on ingesting. You have already created the two private git repositories for your projects ISLE and Islandora code in Github , Bitbucket , Gitlab , etc. having followed Step 2 from the Local ISLE Installation: New Site instructions. You will continue to use these two git repositories for all environments. ISLE project config - e.g. yourprojectnamehere-isle Islandora Drupal site code - e.g. yourprojectnamehere-islandora You have already have the appropriate A record entered into your institutions DNS system and can resolve the Production domain (https://yourprojectnamehere.institution.edu) using a tool like https://www.whatsmydns.net/ You have reviewed the ISLE Installation: Environments for more information about suggested Production values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Production server.","title":"Assumptions / Prerequisites"},{"location":"install/install-production-new/#index-of-instructions","text":"This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Production ISLE Host server with additional followup work to be performed on the remote Production ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Production pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Production and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Production Environment Profile for Deploy to Remote Step 1: On Local - Export the Local MySQL Database * Export the Local MySQL Islandora Drupal Database Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"production.env\" Step 4: On Local - Review and Edit \"docker-compose.production.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\" Step 5: On Local Production - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-17: On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Production - Clone Your Islandora Code Step 10: On Remote Production - Copy Over the Local Islandora Drupal Files Directory Step 11: On Remote Production - If Using Let's Encrypt Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment Step 13: On Remote Production - Download the ISLE Images Step 14: On Remote Production - Start Containers Step 15: On Remote Production - Import the Local MySQL Drupal Database Step 16: On Remote Production - Run the \"fix-permissions.sh\" Script Step 17: On Remote Production - Review and Test the Drupal Production Site","title":"Index of Instructions"},{"location":"install/install-production-new/#on-local-configure-the-isle-production-environment-profile-for-deploy-to-remote","text":"","title":"On Local - Configure the ISLE Production environment profile for deploy to Remote"},{"location":"install/install-production-new/#step-1-on-local-export-the-local-mysql-database","text":"Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the local Apache container in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows","title":"Step 1: On Local - Export the Local MySQL Database"},{"location":"install/install-production-new/#export-the-local-mysql-islandora-drupal-database","text":"Export the MySQL database for the current Local Drupal site in use and copy it on your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your newly created and themed new Islandora site. Refer to your local.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Shell into your currently running Local MySQL container docker exec -it your-mysql-containername bash Export the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"local.env\" file. mysqldump -u DRUPAL_DB_USER -p DRUPAL_DB > local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"local.env\") Upon completion, exit the MySQL container Copy this file from the MySQL container to a location on your personal computer. docker cp your-mysql-containername:/local_drupal_site_082019.sql /path/to/location","title":"Export the Local MySQL Islandora Drupal Database"},{"location":"install/install-production-new/#step-2-on-local-shutdown-any-local-containers-review-local-code","text":"Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down","title":"Step 2: On Local - Shutdown Any Local Containers &amp; Review Local Code"},{"location":"install/install-production-new/#step-3-on-local-create-new-users-and-passwords-by-editing-productionenv","text":"Open the \"production.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Production environment but we strongly recommend not reusing all passwords for environments (e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment). In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.production.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file.","title":"Step 3: On Local - Create New Users and Passwords by Editing \"production.env\""},{"location":"install/install-production-new/#step-4-on-local-review-and-edit-docker-composeproductionyml","text":"Review the disks and volumes on your remote Production ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.production.yml file. Please read through the docker-compose.production.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora service section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache service section - /opt/data/apache/html:/var/www/html Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.production.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: - ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to ./config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to to the ./config/proxy/traefik.production.toml file for further configuration instructions.","title":"Step 4: On Local - Review and Edit \"docker-compose.production.yml\""},{"location":"install/install-production-new/#step-4a-on-local-optional-changes-for-docker-composeproductionyml","text":"This section is for optional changes for the docker-compose.production.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting In the apache services section, this line: - ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.production.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Production ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.production.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" * Uncomment the lines found in the new TICK stack services section of the `docker-compose.production.yml` file for hosting of that monitoring service on the Production ISLE Host server. This will allow the TICK - Telegraf agent to report properly to either the TICK stack on your Staging server or a remote TICK server. * There are additional configurations to be made to files contained within `./config/tick` but you'll need to follow the [TICK Stack](../optional-components/tickstack.md) instructions prior to committing changes to your ISLE git repository.","title":"Step 4A: On Local - (Optional) Changes for \"docker-compose.production.yml\""},{"location":"install/install-production-new/#step-5-on-local-production-if-using-commercial-ssls","text":"If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere.domain.key Edit the ./config/proxy/traefik.production.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Production SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.domain.cert\" keyFile = \"/certs/yourprojectnamehere.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere.institution.edu.pem\" keyFile = \"/certs/yourprojectnamehere.institution.edu.key\"","title":"Step 5: On Local Production - If Using Commercial SSLs"},{"location":"install/install-production-new/#step-6-on-local-commit-isle-code-to-git-repository","text":"Once you have made all of the appropriate changes to your Production profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Production\" git push origin main","title":"Step 6: On Local - Commit ISLE Code to Git Repository"},{"location":"install/install-production-new/#on-remote-production-configure-the-isle-production-environment-profile-for-launch-and-usage","text":"","title":"On Remote Production - Configure the ISLE Production Environment Profile for Launch and Usage"},{"location":"install/install-production-new/#step-7-on-remote-production-git-clone-the-isle-repository-to-the-remote-production-isle-host-server","text":"This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Production ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Production to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle","title":"Step 7: On Remote Production - Git Clone the ISLE Repository to the Remote Production ISLE Host Server"},{"location":"install/install-production-new/#step-8-on-remote-production-create-the-appropriate-local-data-paths-for-apache-fedora-and-log-data","text":"Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data","title":"Step 8: On Remote Production - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data"},{"location":"install/install-production-new/#step-9-on-remote-production-clone-your-islandora-code","text":"git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-islandora","title":"Step 9: On Remote Production - Clone Your Islandora Code"},{"location":"install/install-production-new/#step-10-on-remote-production-copy-over-the-local-islandora-drupal-files-directory","text":"This files directory should be on your personal computer and should be copied to the remote Production server. Copy ~/yourprojectnamehere-isle/data/apache/html/sites/default/files to /opt/data/apache/html/sites/default/files Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/data/apache/html/sites/default/files","title":"Step 10: On Remote Production - Copy Over the Local Islandora Drupal Files Directory"},{"location":"install/install-production-new/#step-11-on-remote-production-if-using-lets-encrypt","text":"If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ssl-certs/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation.","title":"Step 11: On Remote Production - If Using Let's Encrypt"},{"location":"install/install-production-new/#step-12-on-remote-production-edit-the-env-file-to-change-to-the-production-environment","text":"This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env and then commit it locally to git. This local commit that never gets pushed back to the git repository is critical to allow future ISLE updates or config changes. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_production` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full production domain here e.g. digital.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections production) is acdcp Edit COMPOSE_FILE change local to production COMPOSE_FILE=docker-compose.production.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Production. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-)","title":"Step 12: On Remote Production - Edit the \".env\" File to Change to the Production Environment"},{"location":"install/install-production-new/#step-13-on-remote-production-download-the-isle-images","text":"Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere docker-compose pull","title":"Step 13: On Remote Production - Download the ISLE Images"},{"location":"install/install-production-new/#step-14-on-remote-production-start-containers","text":"Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Production site URL: https://yourprojectnamehere.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors.","title":"Step 14: On Remote Production - Start Containers"},{"location":"install/install-production-new/#step-15-on-remote-production-import-the-local-mysql-drupal-database","text":"Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database","title":"Step 15: On Remote Production - Import the Local MySQL Drupal Database"},{"location":"install/install-production-new/#import-the-local-mysql-islandora-drupal-database","text":"Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Production server. Import the exported Local MySQL database for use in the current Production Drupal site. Refer to your production.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Shell into your currently running Production MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"production.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"production.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container","title":"Import the Local MySQL Islandora Drupal Database"},{"location":"install/install-production-new/#step-16-on-remote-production-run-the-fix-permissionssh-script","text":"You'll need to fix the Drupal site permissions by running the /fix-permissions.sh script from the Apache container Run docker ps to determine the Apache container name Shell into your currently running Production Apache container docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Done. 'all' cache was cleared.\"","title":"Step 16: On Remote Production - Run the \"fix-permissions.sh\" Script"},{"location":"install/install-production-new/#step-17-on-remote-production-review-and-test-the-drupal-production-site","text":"In your web browser, enter this URL: https://yourprojectnamehere.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"production.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation.","title":"Step 17: On Remote Production - Review and Test the Drupal Production Site"},{"location":"install/install-production-new/#next-steps","text":"Once you are ready to deploy your finished Drupal site, you may progress to launching the Production site publicly, lifting any firewall restrictions and allowing full Internet access on http (port 80) and https (443). Do not allow any other port to be publicly accessible.","title":"Next Steps"},{"location":"install/install-production-new/#additional-resources","text":"ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-production-new/#end-of-production-isle-installation-new-site","text":"","title":"End of Production ISLE Installation: New Site"},{"location":"install/install-staging-migrate/","text":"Staging ISLE Installation: Migrate Existing Islandora Site Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Staging ISLE Installation will be similar to the Local ISLE Installation: Migrate Existing Islandora Site instructions you just followed but in addition to using a copy of your currently running Production themed Drupal website, a copy of the Production Fedora repository will also be needed for you to continue migrating to ISLE with the end goal of first deploying to an ISLE Production environment and then cut over from the existing non-ISLE Production and Staging servers to their new ISLE counterparts. Islandora Drupal site code here should be considered almost finished but hosted here for last touches and team review privately prior to pushing to public Production. Fedora data will be a mirror of your currently running Production Fedora repository. It is recommended that this remote site not be publicly accessible. This installation builds a Staging environment for the express purpose of migrating a previously existing Islandora site onto the ISLE platform. If you need to build a brand new Staging site for development and are not migrating an existing Islandora site, then please stop and use the Local ISLE Installation: New Site instructions first and then the Staging ISLE Installation: New Site instead. As this Staging domain will require a real domain name or FQDN , we recommend the following: If you do not have a Staging server: Work with your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your new Staging Host Server IP address in your institution's DNS records. We recommend that this sub-domain use -staging to differentiate it from the Production site Example: https://yourprojectnamehere-staging.institution.edu If you have a current non-ISLE Staging server(s): You shutdown any current non-ISLE Staging servers and only use the ISLE server from now on. Work with your IT department or appropriate resource for the existing \"A record\" for the current non-ISLE Staging domain to now \"point\" to your new Staging Host Server IP address in your institution's DNS records. This is critical to be performed PRIOR to any further work below. Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) If you already have pre-existing Staging commercial SSL certificates, they can certainly be reused and copied into the ISLE project as directed. Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere-staging.institution.edu This document also has directions on how you can save newly updated ISLE code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , staging.env , etc. This document does not have directions on how you can save previously existing Islandora Drupal code into a git repository and assumes this step has already happened. The directions below will explain how to clone Islandora Drupal code from a previously existing Islandora Drupal git repository that should already be accessible to you. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Staging ISLE installation is intended for an existing Production Islandora Drupal site to be imported along with a copy of the current Production Fedora Repository for further ISLE migration testing, Drupal theme development, ingest testing, etc. on a remote ISLE host server. Some materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: Migrate Existing Islandora Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Staging ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Staging environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. Critical - This Staging server has the same amount of disk space as your current Production Fedora server does in order to store a copy of the Fedora repository. Please ensure that these sizes match. Please also plan on adding additional capacity as needed for any potential ingest testing, etc. You have a previously existing private Islandora Drupal git repository. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. You have already have the appropriate A record entered into your institutions DNS system and can resolve the Staging domain (https://yourprojectnamehere-staging.institution.edu) using a tool like https://www.whatsmydns.net/ You have reviewed the ISLE Installation: Environments for more information about suggested Staging values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Staging server. You have access to your Production Islandora Drupal, Solr and Fedora data and copy from your servers to the new ISLE Staging server. You will schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Staging. Index of Instructions This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Staging ISLE Host server with additional followup work to be performed on the remote Staging ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Staging pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Staging and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Staging Environment Profile for Deploy to Remote Step 1: Copy Production Data to Your Local Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\" Step 4: On Local - Review and Edit \"docker-compose.staging.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\" Step 5: On Local Staging - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-18: On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Staging - Clone Your Production Islandora Code Step 10: On Remote Staging - Copy Over the Production Data Directories Step 11: On Remote Staging - If Using Let's Encrypt Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment Step 13: On Remote Staging - Download the ISLE Images Step 14: On Remote Staging - Start Containers Step 15: On Remote Staging - Import the Production MySQL Drupal Database Step 16: On Remote Staging - Run ISLE Scripts Step 17: On Remote Staging - Re-Index Fedora & Solr Step 18: On Remote Staging - Review and Test the Drupal Staging Site Step 1: Copy Production Data to Your Local Drupal Site Database You are repeating this step given that data may have changed on the Production site since creating your local. It is critical that Staging be a mirror or close to exact copy of Production. Prior to attempting this step, please consider the following: Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT departments for your institution's database naming conventions. Recommended that the production databases be exported using the .sql /or .gz file formats (e.g. \"prod_drupal_site_082019.sql.gz\") for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the production server in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows Export the Production MySQL Islandora Drupal Database Export the MySQL database for the current Production Islandora Drupal site in use and copy it to your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your Production site. If you are not comfortable or familiar with performing these actions, we recommend that you instead work with your available IT resources to do so. To complete this process, you may use a MySQL GUI client or, if you have command line access to the MySQL database server, you may run the following command, substituting your actual user and database names: Example: mysqldump -u username -p database_name > prod_drupal_site_082019.sql Copy this file down to your personal computer. Step 2: On Local - Shutdown Any Local Containers & Review Local Code Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\" Open the \"staging.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Staging environment but we strongly recommend not reusing all passwords for environments e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment. In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.staging.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file. Step 4: On Local - Review and Edit \"docker-compose.staging.yml\" Review the disks and volumes on your remote Staging ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.staging.yml file. Please read through the docker-compose.staging.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora services section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache services section - /opt/data/apache/html:/var/www/html Review the your docker-compose.local.yml file for custom edits made and copy them to the docker-compose.staging.yml file as needed, this can include changes to Fedora GSearch Transforms, Fedora hash size and more. SSL Certificates Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.staging.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to the /config/proxy/traefik.staging.toml file for further configuration instructions. Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\" This section is for optional changes for the docker-compose.staging.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting the following in the apache services section. - ./config/apache/php_ini/php.staging.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.staging.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Staging ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.staging.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines found in the new TICK stack services section of the docker-compose.staging.yml file for hosting of that monitoring service on the Staging ISLE Host server. There are additional configurations to be made to files contained within ./config/tick but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. Uncomment the TICK stack data volumes as well at the bottom of the file. Step 5: On Local Staging - If Using Commercial SSLs If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.key Edit the ./config/proxy/traefik.staging.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Staging SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere-staging.domain.cert\" keyFile = \"/certs/yourprojectnamehere-staging.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/sitename-staging.institution.edu.pem\" keyFile = \"/certs/sitename-staging.institution.edu.key\" Step 6: On Local - Commit ISLE Code to Git Repository Once you have made all of the appropriate changes to your Staging profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Staging\" git push origin main On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Staging ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Staging to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data Step 9: On Remote Staging - Clone Your Production Islandora Code Please clone from your existing Production Islandora git repository. git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/data/apache/html Step 10: On Remote Staging - Copy Over the Production Data Directories It is recommended that you schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Staging. As you may have made some critical decisions potentially from \"Step 0: Copy Production Data to Your Local\" of the Local ISLE Installation: Migrate Existing Islandora Site instructions, you need to re-follow the steps to get your: Production Drupal site files directory Solr schema & Islandora transforms If you picked Easy option: then you don't need to do anything here for the Solr schema & Islandora transforms If you picked the Intermediate or Advanced options: You'll need to copy in the customizations and files you created during the local environment into the docker-compose.staging.yml . Ensure that one set of transforms and schema are used across all environments. Production Fedora datastreamStore directory You'll need to adjust the paths below in case your setup differs on either the non-ISLE Production server or the ISLE Staging server. Copy your /usr/local/fedora/data/datastreamStore data to the suggested path of /mnt/data/fedora/datastreamStore You may need to change the permissions to root:root on the Staging /mnt/data/fedora/datastreamStore directory above after copying so the Fedora container can access properly. Do not do this on your existing Production system please. Production Fedora objectStore . Copy your /usr/local/fedora/data/objectStore data to the suggested path of /opt/data/fedora/objectStore You may need to change the permissions to root:root on the Staging /opt/data/fedora/objectStore above after copying so the Fedora container can access properly. Do not do this on your existing Production system please. Step 11: On Remote Staging - If Using Let's Encrypt If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation. Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env . This file is ignored in git. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_staging` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full staging domain here e.g. digital-staging.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections staging) is acdcs Edit COMPOSE_FILE change local to staging COMPOSE_FILE=docker-compose.staging.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere-staging.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-) Step 13: On Remote Staging - Download the ISLE Images Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ). Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere Start Docker systemctl start docker docker-compose pull Step 14: On Remote Staging - Start Containers Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Staging site URL: https://yourprojectnamehere.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Step 15: On Remote Staging - Import the Local MySQL Drupal Database Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database Import the Local MySQL Islandora Drupal Database Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Staging server: Run docker ps to determine the mysql container name docker cp /pathto/prod_drupal_site_082019.sql.gz your-mysql-containername:/prod_drupal_site_082019.sql.gz Example: docker cp /c/db_backups/prod_drupal_site_082019.sql.gz isle-mysql-ld:/prod_drupal_site_082019.sql.gz This might take a few minutes depending on the size of the file. Import the exported Local MySQL database for use in the current Staging Drupal site. Refer to your staging.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Using the same open terminal: Shell into your currently running Staging MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"staging.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"staging.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container Step 16: On Remote Staging - Run ISLE Scripts migration_site_vsets.sh: updates Drupal database settings This step will show you how to run the \"migration_site_vsets.sh\" script on the Apache container to change Drupal database site settings for ISLE connectivity. Using the same open terminal: Run docker ps to determine the apache container name Copy the \"migration_site_vsets.sh\" to the root of the Drupal directory on your Apache container docker cp ./scripts/apache/migration_site_vsets.sh your-apache-containername:/var/www/html/migration_site_vsets.sh Change the permissions on the script to make it executable docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" Run the script docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" fix-permissions.sh: adjusts directory and file permissions in your Drupal site This step will show you how to shell into your currently running Staging Apache container, and run the \"fix-permissions.sh\" script to fix the Drupal site permissions. docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Type exit to exit the container For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. install_solution_packs.sh: installs Islandora solution packs Since you've imported an existing Drupal database, you must now reinstall the Islandora solution packs so the Fedora repository will be ready to ingest objects. Copy the \"install_solution_packs.sh\" to the root of the Drupal directory on your Apache container docker cp scripts/apache/install_solution_packs.sh your-apache-containername:/var/www/html/install_solution_packs.sh Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" For Microsoft Windows: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" Run the script For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" For Microsoft Windows: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" The above process will take a few minutes depending on the speed of your local and Internet connection. You should see a lot of green [ok] messages. If the script appears to pause or prompt for \"y/n\", DO NOT enter any values; the script will automatically answer for you. Proceed only after this message appears: \"Drush script finished! ...exiting\" Step 17: On Remote Staging - Re-Index Fedora & Solr When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr is an open source enterprise search platform that works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete. Reindex Fedora RI & Fedora SQL Database (part 1 of 2) Since this command can take minutes or hours depending on the size of your repository, As such, it is recommended starting a screen session prior to running the following commands. Learn more about screen here Note: The method described below is a longer way of doing this process to onboard users. Shell into your currently running Staging Fedora container Run docker ps to determine the Fedora container name docker exec -it your-fedora-containername bash Navigate to the utility_scripts directory cd utility_scripts Run the rebuildFedora.sh script. This script will give you output like the example below. ./rebuildFedora.sh OK - Stopped application at context path [/fedora] Starting the rebuild process in the background. This may take a while depending on your Fedora repository size. To watch the log and process run: tail -f $CATALINA_HOME/logs/fedora-rebuild.out Truncating old SQL tables. mysql: [Warning] Using a password on the command line interface can be insecure. Automatically tailing the log file... Press CTRL+C to stop watching at any time. This will NOT stop the rebuild process After a good period of time, again depending on the size of your Fedora collection there should be output like the example below. This indicates that the Fedora RI & SQL reindex process was successful. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the process, if need be. Do not exit the Fedora container yet, one more index to go; Solr. Adding object #31: islandora:sp_web_archive_collection Adding object #32: islandora:sp_web_archive Adding object #33: islandora:newspaperPageCModel Adding object #34: islandora:compound_collection Adding object #35: islandora:newspaperCModel Adding object #36: islandora:newspaperIssueCModel Adding object #37: ir:citationCollection Adding object #38: islandora:sp_basic_image_collection SUCCESS: 38 objects rebuilt. OK - Started application at context path [/fedora] Reindex Solr (part 2 of 2) WARNING - This reindex process takes the longest of all three, with up to 1-30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Still staying within the utility_scripts directory on the Fedora container or reenter the Fedora container having started a new screen session, now run the updateSolrIndex.sh script. This script will give you output like the example below. ./updateSolrIndex.sh FedoraGenericSearch (FGS) update Solr index from Fedora helper script. Starting to reindex your Fedora repository. This process runs in the background and may take some time. Checked and this operation is still running. You may disconnect and the process will continue to run. Find logs at /usr/local/tomcat/logs/fgs-update-foxml.out and /usr/local/tomcat/logs/fgs-update-foxml.err. You can watch log file 'tail -f /usr/local/tomcat/logs/fedoragsearch.daily.log' as the process runs. Note: Within this output, options to tail logs and watch progress are offered. Depending on the size of your collection this process may take hours, however it is okay to exit out of the container and even log off the remote Staging server. You can check back frequently by running tail -f /usr/local/tomcat/logs/fgs-update-foxml.out on the Fedora container. If you visit your Drupal site and run a Solr search, you should start to see objects and facets start to work. The number of objects will increase over time. After a good period of time, again depending on the size of your Fedora collection, when the Solr re-index process finishes, output like the example below will appear in the /usr/local/tomcat/logs/fgs-update-foxml.out log. This indicates that the Solr reindex process was completed. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the tail process, if need be. tail -f /usr/local/tomcat/logs/fgs-update-foxml.out Args 0=http://localhost:8080 1=updateIndex 2=fromFoxmlFiles <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resultPage operation=\"updateIndex\" action=\"fromFoxmlFiles\" value=\"\" repositoryName=\"FgsRepos\" indexNames=\"\" resultPageXslt=\"\" dateTime=\"Thu Aug 08 20:43:12 GMT 2019\"> <updateIndex xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:foxml=\"info:fedora/fedora-system:def/foxml#\" xmlns:zs=\"http://www.loc.gov/zing/srw/\" warnCount=\"0\" docCount=\"13\" deleteTotal=\"0\" updateTotal=\"13\" insertTotal=\"0\" indexName=\"FgsIndex\"/> </resultPage> Type exit when finished to exit the container. Step 18: On Remote Staging - Review and Test the Drupal Staging Site In your web browser, enter this URL: https://yourprojectnamehere.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"staging.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation. Next Steps Once you are ready to deploy your finished Drupal site, you may progress to: Production ISLE Installation: Migrate Existing Islandora Site Additional Resources ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Staging ISLE Installation: New Site","title":"Staging: Migrate Site"},{"location":"install/install-staging-migrate/#staging-isle-installation-migrate-existing-islandora-site","text":"Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Staging ISLE Installation will be similar to the Local ISLE Installation: Migrate Existing Islandora Site instructions you just followed but in addition to using a copy of your currently running Production themed Drupal website, a copy of the Production Fedora repository will also be needed for you to continue migrating to ISLE with the end goal of first deploying to an ISLE Production environment and then cut over from the existing non-ISLE Production and Staging servers to their new ISLE counterparts. Islandora Drupal site code here should be considered almost finished but hosted here for last touches and team review privately prior to pushing to public Production. Fedora data will be a mirror of your currently running Production Fedora repository. It is recommended that this remote site not be publicly accessible. This installation builds a Staging environment for the express purpose of migrating a previously existing Islandora site onto the ISLE platform. If you need to build a brand new Staging site for development and are not migrating an existing Islandora site, then please stop and use the Local ISLE Installation: New Site instructions first and then the Staging ISLE Installation: New Site instead. As this Staging domain will require a real domain name or FQDN , we recommend the following: If you do not have a Staging server: Work with your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your new Staging Host Server IP address in your institution's DNS records. We recommend that this sub-domain use -staging to differentiate it from the Production site Example: https://yourprojectnamehere-staging.institution.edu If you have a current non-ISLE Staging server(s): You shutdown any current non-ISLE Staging servers and only use the ISLE server from now on. Work with your IT department or appropriate resource for the existing \"A record\" for the current non-ISLE Staging domain to now \"point\" to your new Staging Host Server IP address in your institution's DNS records. This is critical to be performed PRIOR to any further work below. Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) If you already have pre-existing Staging commercial SSL certificates, they can certainly be reused and copied into the ISLE project as directed. Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere-staging.institution.edu This document also has directions on how you can save newly updated ISLE code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , staging.env , etc. This document does not have directions on how you can save previously existing Islandora Drupal code into a git repository and assumes this step has already happened. The directions below will explain how to clone Islandora Drupal code from a previously existing Islandora Drupal git repository that should already be accessible to you. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Staging ISLE Installation: Migrate Existing Islandora Site"},{"location":"install/install-staging-migrate/#assumptions-prerequisites","text":"This Staging ISLE installation is intended for an existing Production Islandora Drupal site to be imported along with a copy of the current Production Fedora Repository for further ISLE migration testing, Drupal theme development, ingest testing, etc. on a remote ISLE host server. Some materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: Migrate Existing Islandora Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Staging ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Staging environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. Critical - This Staging server has the same amount of disk space as your current Production Fedora server does in order to store a copy of the Fedora repository. Please ensure that these sizes match. Please also plan on adding additional capacity as needed for any potential ingest testing, etc. You have a previously existing private Islandora Drupal git repository. You have access to a private git repository in Github , Bitbucket , Gitlab , etc. If you do not, please contact your IT department for git resources, or else create an account with one of the above providers. WARNING: Only use Private git repositories given the sensitive nature of the configuration files. DO NOT share these git repositories publicly. You have already have the appropriate A record entered into your institutions DNS system and can resolve the Staging domain (https://yourprojectnamehere-staging.institution.edu) using a tool like https://www.whatsmydns.net/ You have reviewed the ISLE Installation: Environments for more information about suggested Staging values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Staging server. You have access to your Production Islandora Drupal, Solr and Fedora data and copy from your servers to the new ISLE Staging server. You will schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Staging.","title":"Assumptions / Prerequisites"},{"location":"install/install-staging-migrate/#index-of-instructions","text":"This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Staging ISLE Host server with additional followup work to be performed on the remote Staging ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Staging pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Staging and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Staging Environment Profile for Deploy to Remote Step 1: Copy Production Data to Your Local Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\" Step 4: On Local - Review and Edit \"docker-compose.staging.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\" Step 5: On Local Staging - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-18: On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Staging - Clone Your Production Islandora Code Step 10: On Remote Staging - Copy Over the Production Data Directories Step 11: On Remote Staging - If Using Let's Encrypt Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment Step 13: On Remote Staging - Download the ISLE Images Step 14: On Remote Staging - Start Containers Step 15: On Remote Staging - Import the Production MySQL Drupal Database Step 16: On Remote Staging - Run ISLE Scripts Step 17: On Remote Staging - Re-Index Fedora & Solr Step 18: On Remote Staging - Review and Test the Drupal Staging Site","title":"Index of Instructions"},{"location":"install/install-staging-migrate/#step-1-copy-production-data-to-your-local","text":"","title":"Step 1: Copy Production Data to Your Local"},{"location":"install/install-staging-migrate/#drupal-site-database","text":"You are repeating this step given that data may have changed on the Production site since creating your local. It is critical that Staging be a mirror or close to exact copy of Production. Prior to attempting this step, please consider the following: Drupal website databases can have a multitude of names and conventions. Confer with the appropriate IT departments for your institution's database naming conventions. Recommended that the production databases be exported using the .sql /or .gz file formats (e.g. \"prod_drupal_site_082019.sql.gz\") for better compression and minimal storage footprint. If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the production server in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows","title":"Drupal Site Database"},{"location":"install/install-staging-migrate/#export-the-production-mysql-islandora-drupal-database","text":"Export the MySQL database for the current Production Islandora Drupal site in use and copy it to your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your Production site. If you are not comfortable or familiar with performing these actions, we recommend that you instead work with your available IT resources to do so. To complete this process, you may use a MySQL GUI client or, if you have command line access to the MySQL database server, you may run the following command, substituting your actual user and database names: Example: mysqldump -u username -p database_name > prod_drupal_site_082019.sql Copy this file down to your personal computer.","title":"Export the Production MySQL Islandora Drupal Database"},{"location":"install/install-staging-migrate/#step-2-on-local-shutdown-any-local-containers-review-local-code","text":"Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down","title":"Step 2: On Local - Shutdown Any Local Containers &amp; Review Local Code"},{"location":"install/install-staging-migrate/#step-3-on-local-create-new-users-and-passwords-by-editing-stagingenv","text":"Open the \"staging.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Staging environment but we strongly recommend not reusing all passwords for environments e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment. In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.staging.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file.","title":"Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\""},{"location":"install/install-staging-migrate/#step-4-on-local-review-and-edit-docker-composestagingyml","text":"Review the disks and volumes on your remote Staging ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.staging.yml file. Please read through the docker-compose.staging.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora services section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache services section - /opt/data/apache/html:/var/www/html Review the your docker-compose.local.yml file for custom edits made and copy them to the docker-compose.staging.yml file as needed, this can include changes to Fedora GSearch Transforms, Fedora hash size and more.","title":"Step 4: On Local - Review and Edit \"docker-compose.staging.yml\""},{"location":"install/install-staging-migrate/#ssl-certificates","text":"Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.staging.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to the /config/proxy/traefik.staging.toml file for further configuration instructions.","title":"SSL Certificates"},{"location":"install/install-staging-migrate/#step-4a-on-local-optional-changes-for-docker-composestagingyml","text":"This section is for optional changes for the docker-compose.staging.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting the following in the apache services section. - ./config/apache/php_ini/php.staging.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.staging.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Staging ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.staging.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines found in the new TICK stack services section of the docker-compose.staging.yml file for hosting of that monitoring service on the Staging ISLE Host server. There are additional configurations to be made to files contained within ./config/tick but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. Uncomment the TICK stack data volumes as well at the bottom of the file.","title":"Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\""},{"location":"install/install-staging-migrate/#step-5-on-local-staging-if-using-commercial-ssls","text":"If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.key Edit the ./config/proxy/traefik.staging.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Staging SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere-staging.domain.cert\" keyFile = \"/certs/yourprojectnamehere-staging.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/sitename-staging.institution.edu.pem\" keyFile = \"/certs/sitename-staging.institution.edu.key\"","title":"Step 5: On Local Staging - If Using Commercial SSLs"},{"location":"install/install-staging-migrate/#step-6-on-local-commit-isle-code-to-git-repository","text":"Once you have made all of the appropriate changes to your Staging profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Staging\" git push origin main","title":"Step 6: On Local - Commit ISLE Code to Git Repository"},{"location":"install/install-staging-migrate/#on-remote-staging-configure-the-isle-staging-environment-profile-for-launch-and-usage","text":"","title":"On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage"},{"location":"install/install-staging-migrate/#step-7-on-remote-staging-git-clone-the-isle-repository-to-the-remote-staging-isle-host-server","text":"This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Staging ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Staging to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle","title":"Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server"},{"location":"install/install-staging-migrate/#step-8-on-remote-staging-create-the-appropriate-local-data-paths-for-apache-fedora-and-log-data","text":"Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data","title":"Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data"},{"location":"install/install-staging-migrate/#step-9-on-remote-staging-clone-your-production-islandora-code","text":"Please clone from your existing Production Islandora git repository. git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/data/apache/html","title":"Step 9: On Remote Staging - Clone Your Production Islandora Code"},{"location":"install/install-staging-migrate/#step-10-on-remote-staging-copy-over-the-production-data-directories","text":"It is recommended that you schedule a content freeze for all Production Fedora ingests and additions to your Production website. This will allow you to get up to date data from Production to Staging. As you may have made some critical decisions potentially from \"Step 0: Copy Production Data to Your Local\" of the Local ISLE Installation: Migrate Existing Islandora Site instructions, you need to re-follow the steps to get your: Production Drupal site files directory Solr schema & Islandora transforms If you picked Easy option: then you don't need to do anything here for the Solr schema & Islandora transforms If you picked the Intermediate or Advanced options: You'll need to copy in the customizations and files you created during the local environment into the docker-compose.staging.yml . Ensure that one set of transforms and schema are used across all environments. Production Fedora datastreamStore directory You'll need to adjust the paths below in case your setup differs on either the non-ISLE Production server or the ISLE Staging server. Copy your /usr/local/fedora/data/datastreamStore data to the suggested path of /mnt/data/fedora/datastreamStore You may need to change the permissions to root:root on the Staging /mnt/data/fedora/datastreamStore directory above after copying so the Fedora container can access properly. Do not do this on your existing Production system please. Production Fedora objectStore . Copy your /usr/local/fedora/data/objectStore data to the suggested path of /opt/data/fedora/objectStore You may need to change the permissions to root:root on the Staging /opt/data/fedora/objectStore above after copying so the Fedora container can access properly. Do not do this on your existing Production system please.","title":"Step 10: On Remote Staging - Copy Over the Production Data Directories"},{"location":"install/install-staging-migrate/#step-11-on-remote-staging-if-using-lets-encrypt","text":"If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation.","title":"Step 11: On Remote Staging - If Using Let's Encrypt"},{"location":"install/install-staging-migrate/#step-12-on-remote-staging-edit-the-env-file-to-change-to-the-staging-environment","text":"This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env . This file is ignored in git. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_staging` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full staging domain here e.g. digital-staging.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections staging) is acdcs Edit COMPOSE_FILE change local to staging COMPOSE_FILE=docker-compose.staging.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere-staging.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-)","title":"Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment"},{"location":"install/install-staging-migrate/#step-13-on-remote-staging-download-the-isle-images","text":"Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ). Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere Start Docker systemctl start docker docker-compose pull","title":"Step 13: On Remote Staging - Download the ISLE Images"},{"location":"install/install-staging-migrate/#step-14-on-remote-staging-start-containers","text":"Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Staging site URL: https://yourprojectnamehere.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors.","title":"Step 14: On Remote Staging - Start Containers"},{"location":"install/install-staging-migrate/#step-15-on-remote-staging-import-the-local-mysql-drupal-database","text":"Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database","title":"Step 15: On Remote Staging - Import the Local MySQL Drupal Database"},{"location":"install/install-staging-migrate/#import-the-local-mysql-islandora-drupal-database","text":"Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Staging server: Run docker ps to determine the mysql container name docker cp /pathto/prod_drupal_site_082019.sql.gz your-mysql-containername:/prod_drupal_site_082019.sql.gz Example: docker cp /c/db_backups/prod_drupal_site_082019.sql.gz isle-mysql-ld:/prod_drupal_site_082019.sql.gz This might take a few minutes depending on the size of the file. Import the exported Local MySQL database for use in the current Staging Drupal site. Refer to your staging.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Using the same open terminal: Shell into your currently running Staging MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"staging.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"staging.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container","title":"Import the Local MySQL Islandora Drupal Database"},{"location":"install/install-staging-migrate/#step-16-on-remote-staging-run-isle-scripts","text":"migration_site_vsets.sh: updates Drupal database settings This step will show you how to run the \"migration_site_vsets.sh\" script on the Apache container to change Drupal database site settings for ISLE connectivity. Using the same open terminal: Run docker ps to determine the apache container name Copy the \"migration_site_vsets.sh\" to the root of the Drupal directory on your Apache container docker cp ./scripts/apache/migration_site_vsets.sh your-apache-containername:/var/www/html/migration_site_vsets.sh Change the permissions on the script to make it executable docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/migration_site_vsets.sh\" Run the script docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./migration_site_vsets.sh\" fix-permissions.sh: adjusts directory and file permissions in your Drupal site This step will show you how to shell into your currently running Staging Apache container, and run the \"fix-permissions.sh\" script to fix the Drupal site permissions. docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. Type exit to exit the container For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. install_solution_packs.sh: installs Islandora solution packs Since you've imported an existing Drupal database, you must now reinstall the Islandora solution packs so the Fedora repository will be ready to ingest objects. Copy the \"install_solution_packs.sh\" to the root of the Drupal directory on your Apache container docker cp scripts/apache/install_solution_packs.sh your-apache-containername:/var/www/html/install_solution_packs.sh Change the permissions on the script to make it executable For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" For Microsoft Windows: docker exec -it your-apache-containername bash -c \"chmod +x /var/www/html/install_solution_packs.sh\" Run the script For Mac/Ubuntu/CentOS/etc: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" For Microsoft Windows: docker exec -it your-apache-containername bash -c \"cd /var/www/html && ./install_solution_packs.sh\" The above process will take a few minutes depending on the speed of your local and Internet connection. You should see a lot of green [ok] messages. If the script appears to pause or prompt for \"y/n\", DO NOT enter any values; the script will automatically answer for you. Proceed only after this message appears: \"Drush script finished! ...exiting\"","title":"Step 16: On Remote Staging - Run ISLE Scripts"},{"location":"install/install-staging-migrate/#step-17-on-remote-staging-re-index-fedora-solr","text":"When migrating any non-ISLE Islandora site, it is crucial to rebuild (reindex) the following three indices from the FOXML and datastream files on disk. Fedora's indices: Resource Index - The Resource Index is the Fedora module that provides the infrastructure for indexing relationships among objects and their components. SQL database - fedora3 contains information vital for the Drupal site to connect to Fedora correctly. Solr index Solr is an open source enterprise search platform that works in conjunction with the Islandora Solr module to provide a way to configure the Islandora search functions, the search results display, and the display of metadata on object pages. The index serves as a list of those objects for fast searching across large collections. You can use the command-line interactive utility fedora-rebuild.sh on the fedora container to rebuild all indices when the Fedora (not Tomcat) server is offline. Depending on the size of your repository, this entire process may take minutes (thousands of objects) or hours (millions of objects) to complete.","title":"Step 17: On Remote Staging - Re-Index Fedora &amp; Solr"},{"location":"install/install-staging-migrate/#reindex-fedora-ri-fedora-sql-database-part-1-of-2","text":"Since this command can take minutes or hours depending on the size of your repository, As such, it is recommended starting a screen session prior to running the following commands. Learn more about screen here Note: The method described below is a longer way of doing this process to onboard users. Shell into your currently running Staging Fedora container Run docker ps to determine the Fedora container name docker exec -it your-fedora-containername bash Navigate to the utility_scripts directory cd utility_scripts Run the rebuildFedora.sh script. This script will give you output like the example below. ./rebuildFedora.sh OK - Stopped application at context path [/fedora] Starting the rebuild process in the background. This may take a while depending on your Fedora repository size. To watch the log and process run: tail -f $CATALINA_HOME/logs/fedora-rebuild.out Truncating old SQL tables. mysql: [Warning] Using a password on the command line interface can be insecure. Automatically tailing the log file... Press CTRL+C to stop watching at any time. This will NOT stop the rebuild process After a good period of time, again depending on the size of your Fedora collection there should be output like the example below. This indicates that the Fedora RI & SQL reindex process was successful. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the process, if need be. Do not exit the Fedora container yet, one more index to go; Solr. Adding object #31: islandora:sp_web_archive_collection Adding object #32: islandora:sp_web_archive Adding object #33: islandora:newspaperPageCModel Adding object #34: islandora:compound_collection Adding object #35: islandora:newspaperCModel Adding object #36: islandora:newspaperIssueCModel Adding object #37: ir:citationCollection Adding object #38: islandora:sp_basic_image_collection SUCCESS: 38 objects rebuilt. OK - Started application at context path [/fedora]","title":"Reindex Fedora RI &amp; Fedora SQL Database (part 1 of 2)"},{"location":"install/install-staging-migrate/#reindex-solr-part-2-of-2","text":"WARNING - This reindex process takes the longest of all three, with up to 1-30 or more hours to complete depending on the size of your Fedora collection. As such, it is recommended starting a screen session prior to running the following command. Learn more about screen here Still staying within the utility_scripts directory on the Fedora container or reenter the Fedora container having started a new screen session, now run the updateSolrIndex.sh script. This script will give you output like the example below. ./updateSolrIndex.sh FedoraGenericSearch (FGS) update Solr index from Fedora helper script. Starting to reindex your Fedora repository. This process runs in the background and may take some time. Checked and this operation is still running. You may disconnect and the process will continue to run. Find logs at /usr/local/tomcat/logs/fgs-update-foxml.out and /usr/local/tomcat/logs/fgs-update-foxml.err. You can watch log file 'tail -f /usr/local/tomcat/logs/fedoragsearch.daily.log' as the process runs. Note: Within this output, options to tail logs and watch progress are offered. Depending on the size of your collection this process may take hours, however it is okay to exit out of the container and even log off the remote Staging server. You can check back frequently by running tail -f /usr/local/tomcat/logs/fgs-update-foxml.out on the Fedora container. If you visit your Drupal site and run a Solr search, you should start to see objects and facets start to work. The number of objects will increase over time. After a good period of time, again depending on the size of your Fedora collection, when the Solr re-index process finishes, output like the example below will appear in the /usr/local/tomcat/logs/fgs-update-foxml.out log. This indicates that the Solr reindex process was completed. The number of objects rebuilt will vary. You can hit the CNTRL and C keys to exit out of the tail process, if need be. tail -f /usr/local/tomcat/logs/fgs-update-foxml.out Args 0=http://localhost:8080 1=updateIndex 2=fromFoxmlFiles <?xml version=\"1.0\" encoding=\"UTF-8\"?> <resultPage operation=\"updateIndex\" action=\"fromFoxmlFiles\" value=\"\" repositoryName=\"FgsRepos\" indexNames=\"\" resultPageXslt=\"\" dateTime=\"Thu Aug 08 20:43:12 GMT 2019\"> <updateIndex xmlns:dc=\"http://purl.org/dc/elements/1.1/\" xmlns:foxml=\"info:fedora/fedora-system:def/foxml#\" xmlns:zs=\"http://www.loc.gov/zing/srw/\" warnCount=\"0\" docCount=\"13\" deleteTotal=\"0\" updateTotal=\"13\" insertTotal=\"0\" indexName=\"FgsIndex\"/> </resultPage> Type exit when finished to exit the container.","title":"Reindex Solr (part 2 of 2)"},{"location":"install/install-staging-migrate/#step-18-on-remote-staging-review-and-test-the-drupal-staging-site","text":"In your web browser, enter this URL: https://yourprojectnamehere.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"staging.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation.","title":"Step 18: On Remote Staging - Review and Test the Drupal Staging Site"},{"location":"install/install-staging-migrate/#next-steps","text":"Once you are ready to deploy your finished Drupal site, you may progress to: Production ISLE Installation: Migrate Existing Islandora Site","title":"Next Steps"},{"location":"install/install-staging-migrate/#additional-resources","text":"ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-staging-migrate/#end-of-staging-isle-installation-new-site","text":"","title":"End of Staging ISLE Installation: New Site"},{"location":"install/install-staging-new/","text":"Staging ISLE Installation: New Site Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Staging ISLE Installation will use the themed Drupal website created during the Local ISLE Installation: New Site process and will create an empty Fedora repository for remote (non-local or cloud) hosting of a Staging site. Islandora Drupal site code here should be considered almost finished but hosted here for last touches and team review privately prior to pushing to public Production. Fedora data might have tests collections or collections that should then be synced to the Production site. It is recommended that this remote site not be publicly accessible. While this installation will get you a brand new Staging site, it is not intended as a migration process of a previously existing Islandora site. If you need to build a Staging environment to migrate a previously existing Islandora site, please use the Staging ISLE Installation: Migrate Existing Islandora Site instead. As this Staging domain will require a real domain name or FQDN , you will need to ask your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your Staging Host Server IP address in your institution's DNS records. We recommend that this sub-domain use -staging to differentiate it from the Production site. Example: https://yourprojectnamehere-staging.institution.edu Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere-staging.institution.edu This document also has directions on how you can save newly created ISLE and Islandora code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , staging.env , etc. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation. Assumptions / Prerequisites This Staging ISLE installation is intended for a brand new ISLE site for further Drupal theme development, ingest testing, etc. on a remote ISLE host server. All materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: New Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Staging ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Staging environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. This server has enough disk space to store a large Fedora repository e.g. 1-5 TB or larger depending on how many objects you plan on ingesting. You have already created the two private git repositories for your projects ISLE and Islandora code in Github , Bitbucket , Gitlab , etc. having followed Step 2 from the Local ISLE Installation: New Site instructions. You will continue to use these two git repositories for all environments. ISLE project config - e.g. yourprojectnamehere-isle Islandora Drupal site code - e.g. yourprojectnamehere-islandora You have already have the appropriate A record entered into your institutions DNS system and can resolve the Staging domain (https://yourprojectnamehere-staging.institution.edu) using a tool like https://www.whatsmydns.net/ You have reviewed the ISLE Installation: Environments for more information about suggested Staging values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Staging server. Index of Instructions This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Staging ISLE Host server with additional followup work to be performed on the remote Staging ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Staging pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Staging and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Staging Environment Profile for Deploy to Remote Step 1: On Local - Export the Local MySQL Database Export the Local MySQL Islandora Drupal Database Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\" Step 4: On Local - Review and Edit \"docker-compose.staging.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\" Step 5: On Local Staging - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-17: On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Staging - Clone Your Islandora Code Step 10: On Remote Staging - Copy Over the Local Islandora Drupal Files Directory Step 11: On Remote Staging - If Using Let's Encrypt Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment Step 13: On Remote Staging - Download the ISLE Images Step 14: On Remote Staging - Start Containers Step 15: On Remote Staging - Import the Local MySQL Drupal Database Step 16: On Remote Staging - Run the \"fix-permissions.sh\" Script Step 17: On Remote Staging - Review and Test the Drupal Staging Site On Local - Configure the ISLE Staging Environment Profile for Deploy to Remote Step 1: On Local - Export the Local MySQL Database Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the local Apache container in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows Export the Local MySQL Islandora Drupal Database Export the MySQL database for the current Local Drupal site in use and copy it on your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your newly created and themed new Islandora site. Refer to your local.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Shell into your currently running Local MySQL container docker exec -it your-mysql-containername bash Export the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"local.env\" file. mysqldump -u DRUPAL_DB_USER -p DRUPAL_DB > local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"local.env\") Upon completion, exit the MySQL container Copy this file from the MySQL container to a location on your personal computer. docker cp your-mysql-containername:/local_drupal_site_082019.sql /path/to/location Step 2: On Local - Shutdown Any Local Containers & Review Local Code Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\" Open the \"staging.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Staging environment but we strongly recommend not reusing all passwords for environments e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment. In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.staging.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file. Step 4: On Local - Review and Edit \"docker-compose.staging.yml\" Review the disks and volumes on your remote Staging ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.staging.yml file. Please read through the docker-compose.staging.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora service section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache service section - /opt/data/apache/html:/var/www/html Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.staging.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: - ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to ./config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to to the ./config/proxy/traefik.staging.toml file for further configuration instructions. Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\" This section is for optional changes for the docker-compose.staging.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting In the apache services section, this line: - ./config/apache/php_ini/php.staging.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.staging.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Staging ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.staging.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines found in the new TICK stack services section of the docker-compose.staging.yml file for hosting of that monitoring service on the Staging ISLE Host server. There are additional configurations to be made to files contained within ./config/tick but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. Uncomment the TICK stack data volumes as well at the bottom of the file. Step 5: On Local Staging - If Using Commercial SSLs If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.key Edit the ./config/proxy/traefik.staging.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Staging SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere-staging.domain.cert\" keyFile = \"/certs/yourprojectnamehere-staging.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere-staging.institution.edu.pem\" keyFile = \"/certs/yourprojectnamehere-staging.institution.edu.key\" Step 6: On Local - Commit ISLE Code to Git Repository Once you have made all of the appropriate changes to your Staging profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Staging\" git push origin main On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Staging ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Staging to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data Step 9: On Remote Staging - Clone Your Islandora Code git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-islandora Step 10: On Remote Staging - Copy Over the Local Islandora Drupal Files Directory This files directory should be on your personal computer and should be copied to the remote Staging server. Copy ~/yourprojectnamehere-isle/data/apache/html/sites/default/files to /opt/data/apache/html/sites/default/files Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/data/apache/html/sites/default/files Step 11: On Remote Staging - If Using Let's Encrypt If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ssl-certs/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation. Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env and then commit it locally to git. This local commit that never gets pushed back to the git repository is critical to allow future ISLE updates or config changes. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_stage` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full staging domain here e.g. digital-staging.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections staging) is acdcs Edit COMPOSE_FILE change local to staging COMPOSE_FILE=docker-compose.staging.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere-staging.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-) Step 13: On Remote Staging - Download the ISLE Images Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere docker-compose pull Step 14: On Remote Staging - Start Containers Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Staging site URL: https://yourprojectnamehere-staging.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Step 15: On Remote Staging - Import the Local MySQL Drupal Database Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database Import the Local MySQL Islandora Drupal Database Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Staging server. Import the exported Local MySQL database for use in the current Staging Drupal site. Refer to your staging.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Shell into your currently running Staging MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"staging.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"staging.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container Step 16: On Remote Staging - Run the \"fix-permissions.sh\" Script You'll need to fix the Drupal site permissions by running the /fix-permissions.sh script from the Apache container Run docker ps to determine the Apache container name Shell into your currently running Staging Apache container docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Done. 'all' cache was cleared.\" Step 17: On Remote Staging - Review and Test the Drupal Staging Site In your web browser, enter this URL: https://yourprojectnamehere-staging.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"staging.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation. Next Steps Once you are ready to deploy your finished Drupal site, you may progress to: Production ISLE Installation: New Site Additional Resources ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE. End of Staging ISLE Installation: New Site","title":"Staging: New Site"},{"location":"install/install-staging-new/#staging-isle-installation-new-site","text":"Expectations: It takes an average of 2-4+ hours to read this documentation and complete this installation. This Staging ISLE Installation will use the themed Drupal website created during the Local ISLE Installation: New Site process and will create an empty Fedora repository for remote (non-local or cloud) hosting of a Staging site. Islandora Drupal site code here should be considered almost finished but hosted here for last touches and team review privately prior to pushing to public Production. Fedora data might have tests collections or collections that should then be synced to the Production site. It is recommended that this remote site not be publicly accessible. While this installation will get you a brand new Staging site, it is not intended as a migration process of a previously existing Islandora site. If you need to build a Staging environment to migrate a previously existing Islandora site, please use the Staging ISLE Installation: Migrate Existing Islandora Site instead. As this Staging domain will require a real domain name or FQDN , you will need to ask your IT department or appropriate resource for an \"A record\" to be added for your domain to \"point\" to your Staging Host Server IP address in your institution's DNS records. We recommend that this sub-domain use -staging to differentiate it from the Production site. Example: https://yourprojectnamehere-staging.institution.edu Once this has been completed, if you do not want to use Let's Encrypt, you can also request commercial SSL certificates from your IT department for this domain as well. Please note the DNS records will need to exist prior to the creation of any SSL certificate (Commercial or Let's Encrypt.) Unlike the Local and Demo setups, you will not have to edit /etc/localhosts to view your domain given that DNS is now involved. Your new domain will no longer use the .localdomain but instead something like https://yourprojectnamehere-staging.institution.edu This document also has directions on how you can save newly created ISLE and Islandora code into a git software repository as a workflow process designed to manage and upgrade the environments throughout the development process from Local to Staging to Production. The ISLE Installation: Environments documentation can also help with explaining the new ISLE structure, the associated files and what values ISLE end-users should use for the .env , staging.env , etc. Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails. The Glossary defines terms used in this documentation.","title":"Staging ISLE Installation: New Site"},{"location":"install/install-staging-new/#assumptions-prerequisites","text":"This Staging ISLE installation is intended for a brand new ISLE site for further Drupal theme development, ingest testing, etc. on a remote ISLE host server. All materials are to be \"migrated\" from the work you performed on your personal computer from the prior steps and processes in Local ISLE Installation: New Site instructions. You will be using ISLE version 1.2.0 or higher. You are using Docker-compose 1.24.0 or higher. You have git installed on your personal computer as well as the remote ISLE host server. You have already provisioned a remote ISLE hosts server and have documented its IP address. You may have used the ISLE Ansible script to accomplish this. If doing this manually, please review the following to ensure the remote Staging ISLE host server has all dependencies e.g. CPU, memory and disk space prior to deploying the ISLE Staging environment profile for deploy Hardware Requirements Software Dependencies This server should be running at the time of deploy. This server has enough disk space to store a large Fedora repository e.g. 1-5 TB or larger depending on how many objects you plan on ingesting. You have already created the two private git repositories for your projects ISLE and Islandora code in Github , Bitbucket , Gitlab , etc. having followed Step 2 from the Local ISLE Installation: New Site instructions. You will continue to use these two git repositories for all environments. ISLE project config - e.g. yourprojectnamehere-isle Islandora Drupal site code - e.g. yourprojectnamehere-islandora You have already have the appropriate A record entered into your institutions DNS system and can resolve the Staging domain (https://yourprojectnamehere-staging.institution.edu) using a tool like https://www.whatsmydns.net/ You have reviewed the ISLE Installation: Environments for more information about suggested Staging values. You are familiar with using tools like scp, cp or rsync to move configurations, files and data from your local to the remote Staging server.","title":"Assumptions / Prerequisites"},{"location":"install/install-staging-new/#index-of-instructions","text":"This process will differ slightly from previous builds in that there is work to be done on the local to then be pushed to the Staging ISLE Host server with additional followup work to be performed on the remote Staging ISLE Host server. The instructions that follow below will have either a On Local or a On Remote Staging pre-fix to indicate where the work and focus should be. In essence, the git workflow established during the local build process will be extended for deploying on Staging and for future ISLE updates and upgrades. Steps 1-6: On Local - Configure the ISLE Staging Environment Profile for Deploy to Remote Step 1: On Local - Export the Local MySQL Database Export the Local MySQL Islandora Drupal Database Step 2: On Local - Shutdown Any Local Containers & Review Local Code Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\" Step 4: On Local - Review and Edit \"docker-compose.staging.yml\" Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\" Step 5: On Local Staging - If Using Commercial SSLs Step 6: On Local - Commit ISLE Code to Git Repository Steps 7-17: On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data Step 9: On Remote Staging - Clone Your Islandora Code Step 10: On Remote Staging - Copy Over the Local Islandora Drupal Files Directory Step 11: On Remote Staging - If Using Let's Encrypt Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment Step 13: On Remote Staging - Download the ISLE Images Step 14: On Remote Staging - Start Containers Step 15: On Remote Staging - Import the Local MySQL Drupal Database Step 16: On Remote Staging - Run the \"fix-permissions.sh\" Script Step 17: On Remote Staging - Review and Test the Drupal Staging Site","title":"Index of Instructions"},{"location":"install/install-staging-new/#on-local-configure-the-isle-staging-environment-profile-for-deploy-to-remote","text":"","title":"On Local - Configure the ISLE Staging Environment Profile for Deploy to Remote"},{"location":"install/install-staging-new/#step-1-on-local-export-the-local-mysql-database","text":"Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not export the fedora3 database If possible, on the production Apache web server, run drush cc all from the command line on the local Apache container in the /var/www/html directory PRIOR to any db export(s). Otherwise issues can occur on import due to all cache tables being larger than innodb_log_file_size allows","title":"Step 1: On Local - Export the Local MySQL Database"},{"location":"install/install-staging-new/#export-the-local-mysql-islandora-drupal-database","text":"Export the MySQL database for the current Local Drupal site in use and copy it on your local in an easy to find place. In later steps you'll be directed to import this file. Please be careful performing any of these potential actions below as the process impacts your newly created and themed new Islandora site. Refer to your local.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Shell into your currently running Local MySQL container docker exec -it your-mysql-containername bash Export the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"local.env\" file. mysqldump -u DRUPAL_DB_USER -p DRUPAL_DB > local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"local.env\") Upon completion, exit the MySQL container Copy this file from the MySQL container to a location on your personal computer. docker cp your-mysql-containername:/local_drupal_site_082019.sql /path/to/location","title":"Export the Local MySQL Islandora Drupal Database"},{"location":"install/install-staging-new/#step-2-on-local-shutdown-any-local-containers-review-local-code","text":"Ensure that your ISLE and Islandora git repositories have all the latest commits and pushes from the development process that took place on your personal computer. If you haven't yet finished, do not proceed until everything is completed. Once finished, open a terminal (Windows: open Git Bash ) Navigate to your Local ISLE repository Shut down any local containers e.g. docker-compose down","title":"Step 2: On Local - Shutdown Any Local Containers &amp; Review Local Code"},{"location":"install/install-staging-new/#step-3-on-local-create-new-users-and-passwords-by-editing-stagingenv","text":"Open the \"staging.env\" file in a text editor. Find each comment that begins with: # Replace this comment with a ... and follow the commented instructions to edit the passwords, database and user names. Review carefully as some comments request that you replace with ...26 alpha-numeric characters while others request that you create an ...easy to read but short database name . It is okay if you potentially repeat the values previously entered for your local (DRUPAL_DB) & (DRUPAL_DB_USER) in this Staging environment but we strongly recommend not reusing all passwords for environments e.g. (DRUPAL_DB_PASS) & (DRUPAL_HASH_SALT) should be unique values for each environment. In many cases the username is already pre-populated. If it doesn't have a comment directing you to change or add a value after the = , then don't change it. Once finished, save and close the file. Open the config/apache/settings_php/settings.staging.php file. Find the first comment that begins with: # ISLE Configuration and follow the commented instructions to edit the database, username and password. Find the second comment that begins with: # ISLE Configuration and follow the instructions to edit the Drupal hash salt. Once finished, save and close the file.","title":"Step 3: On Local - Create New Users and Passwords by Editing \"staging.env\""},{"location":"install/install-staging-new/#step-4-on-local-review-and-edit-docker-composestagingyml","text":"Review the disks and volumes on your remote Staging ISLE Host server to ensure they are of an adequate capacity for your collection needs and match what has been written in the docker-compose.staging.yml file. Please read through the docker-compose.staging.yml file as there are bind mount points that need to be configured on the host machine, to ensure data persistence. There are suggested bind mounts that the end-user can change to fit their needs or they can setup additional volumes or disks to match the suggestions. In the fedora service section - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore In the apache service section - /opt/data/apache/html:/var/www/html Depending on your choice of SSL type (Commercial SSL files or the Let's Encrypt service), you'll need to uncomment only one line of the traefik services section. There are also inline instructions to this effect in the docker-compose.staging.yml file. To use Let's Encrypt for SSL , uncomment: - ./config/proxy/acme.json:/acme.json To use commercial SSLs, uncomment: - ./config/proxy/ssl-certs:/certs:ro Additionally you'll need to add your SSL certs (.cert, .pem, .key) files to ./config/proxy/ssl-certs Based on the choice of SSL type made above, you'll need to refer to to the ./config/proxy/traefik.staging.toml file for further configuration instructions.","title":"Step 4: On Local - Review and Edit \"docker-compose.staging.yml\""},{"location":"install/install-staging-new/#step-4a-on-local-optional-changes-for-docker-composestagingyml","text":"This section is for optional changes for the docker-compose.staging.yml , end-users do not have feel like they have to make any choices here and can continue to Step 4 as needed. The options include PHP settings, Java Memory Allocation, MySQL configuration and use of the TICK Stack (Optional) - You can change PHP settings such as file upload limits and memory usage by uncommenting In the apache services section, this line: - ./config/apache/php_ini/php.staging.ini:/etc/php/7.1/apache2/php.ini You'll then need to make edits in the ./config/apache/php_ini/php.staging.ini file. (Optional) - This line is already uncommented by default in ISLE but we're calling it out here that you can changes to the suggested levels or values within the ./config/mysql/ISLE.cnf file if needed. When setting up for the first time, it is best practice to leave these settings in place. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can change the suggested JAVA_MAX_MEM & JAVA_MIN_MEM levels but do not exceed more than 50% of your system memory. When setting up for the first time, it is best practice to leave these settings in place as they are configured for a Staging ISLE Host Server using 16 GB of RAM. Over time, you can experiment with further tuning and experimentation based on your project or system needs. (Optional) - You can opt to uncomment the TICK stack settings for monitoring but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. All TICK related code can be found at the end of all ISLE services within the docker-compose.staging.yml file. Example: ## _(Optional)_: Uncomment lines below to run ISLE with the TICK monitoring system logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines found in the new TICK stack services section of the docker-compose.staging.yml file for hosting of that monitoring service on the Staging ISLE Host server. There are additional configurations to be made to files contained within ./config/tick but you'll need to follow the TICK Stack instructions prior to committing changes to your ISLE git repository. Uncomment the TICK stack data volumes as well at the bottom of the file.","title":"Step 4A: On Local - (Optional) Changes for \"docker-compose.staging.yml\""},{"location":"install/install-staging-new/#step-5-on-local-staging-if-using-commercial-ssls","text":"If you are going to use Let's Encrypt instead, you can skip this step and move onto the next one. There will be additional steps further in this document, to help you configure it. If you have decided to use Commercial SSL certs supplied to you by your IT team or appropriate resource, please continue following this step. Add your Commercial SSL certificate and key files to the ./config/proxy/ssl-certs directory Example: ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.cert ./config/proxy/ssl-certs/yourprojectnamehere-staging.domain.key Edit the ./config/proxy/traefik.staging.toml and follow the in-line instructions. Replace the .pem & .key with the name of your Staging SSL certificate and associated key. Do note the positioning of the added lines. Third character indentation. Note: despite the instruction examples differing on file type, ( .pem or cert ), either one is compatible, use what you have been given. Merely change the file type suffix accordingly. Example: .cert [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere-staging.domain.cert\" keyFile = \"/certs/yourprojectnamehere-staging.domain.key\" Example: .pem [entryPoints.https.tls] [[entryPoints.https.tls.certificates]] certFile = \"/certs/yourprojectnamehere-staging.institution.edu.pem\" keyFile = \"/certs/yourprojectnamehere-staging.institution.edu.key\"","title":"Step 5: On Local Staging - If Using Commercial SSLs"},{"location":"install/install-staging-new/#step-6-on-local-commit-isle-code-to-git-repository","text":"Once you have made all of the appropriate changes to your Staging profile. Please note the steps below are suggestions. You might use a different git commit message. Substitute <changedfileshere> with the actual file names and paths. You may need to do this repeatedly prior to the commit message. git add <changedfileshere> git commit -m \"Changes for Staging\" git push origin main","title":"Step 6: On Local - Commit ISLE Code to Git Repository"},{"location":"install/install-staging-new/#on-remote-staging-configure-the-isle-staging-environment-profile-for-launch-and-usage","text":"","title":"On Remote Staging - Configure the ISLE Staging Environment Profile for Launch and Usage"},{"location":"install/install-staging-new/#step-7-on-remote-staging-git-clone-the-isle-repository-to-the-remote-staging-isle-host-server","text":"This assumes you have setup an Islandora deploy user. If not use a different non-root user for this purpose. You will also need to ensure that any /home/islandora/.ssh/id_rsa.pub key has been added to your git repository admin panel to allow for cloning from your two private git repositories. Since the /opt directory might not let you do this at first, we suggest the following workaround which you'll only need to do once. Future ISLE updates will not require this step. Shell into your Staging ISLE host server as the Islandora user. Clone your ISLE project repository with the newly committed changes for Staging to the Islandora user home directory. git clone https://yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-isle.git /home/islandora/ This may take a few minutes (2-4) depending on your server's Internet connection. Move the newly cloned directory to the /opt directory as the root user sudo mv /home/islandora/yourprojectnamehere-isle /opt/yourprojectnamehere-isle Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-isle","title":"Step 7: On Remote Staging - Git Clone the ISLE Repository to the Remote Staging ISLE Host Server"},{"location":"install/install-staging-new/#step-8-on-remote-staging-create-the-appropriate-local-data-paths-for-apache-fedora-and-log-data","text":"Create the /opt/data directory sudo mkdir -p /opt/data Change the permissions to the Islandora user. sudo chown -Rv islandora:islandora /opt/data","title":"Step 8: On Remote Staging - Create the Appropriate Local Data Paths for Apache, Fedora and Log Data"},{"location":"install/install-staging-new/#step-9-on-remote-staging-clone-your-islandora-code","text":"git clone git@yourgitproviderhere.com/yourinstitutionhere/yourprojectnamehere-islandora.git /opt/data/apache/html Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/yourprojectnamehere-islandora","title":"Step 9: On Remote Staging - Clone Your Islandora Code"},{"location":"install/install-staging-new/#step-10-on-remote-staging-copy-over-the-local-islandora-drupal-files-directory","text":"This files directory should be on your personal computer and should be copied to the remote Staging server. Copy ~/yourprojectnamehere-isle/data/apache/html/sites/default/files to /opt/data/apache/html/sites/default/files Fix the permissions so that the islandora user has access. sudo chown -Rv islandora:islandora /opt/data/apache/html/sites/default/files","title":"Step 10: On Remote Staging - Copy Over the Local Islandora Drupal Files Directory"},{"location":"install/install-staging-new/#step-11-on-remote-staging-if-using-lets-encrypt","text":"If you are using Commercial SSLs, then please stop and move onto the next step. If using Let's Encrypt, please continue to follow this step. Create an empty acme.json within the ./config/proxy/ssl-certs/ directory of your ISLE project. touch /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json chmod 600 /opt/yourprojectnamehere/config/proxy/ssl-certs/acme.json This file will be ignored by git and won't cause any errors with checking in code despite the location Do note that you may need to open your firewall briefly to allow the SSL certs to be added to the acme.json file. This will be indicated in the following steps. Open your firewall to ports 80, 443 prior to starting up the containers to ensure SSL cert creation.","title":"Step 11: On Remote Staging - If Using Let's Encrypt"},{"location":"install/install-staging-new/#step-12-on-remote-staging-edit-the-env-file-to-change-to-the-staging-environment","text":"This step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env and then commit it locally to git. This local commit that never gets pushed back to the git repository is critical to allow future ISLE updates or config changes. Copy the sample.env to .env. By default, the Demo environment is setup. You will need to edit this file to match the correct environment. Please note that the .env is no longer tracked by git as of ISLE version 1.5. Instructions below involving git are for ISLE versions below 1.5. However the settings recommended below for the environment can still be followed as needed. cp sample.env .env Edit the .env, remove the local settings and then commit locally (only if using an ISLE version below 1.5) cd /opt/yourprojectnamehere vi / nano / pico /opt/yourprojectnamehere/.env Edit COMPOSE_PROJECT_NAME= and replace the local settings with: COMPOSE_PROJECT_NAME= (Suggested) Add an identifiable project or institutional name plus environment e.g. acme_digital_stage` Edit BASE_DOMAIN= and replace the local settings with: BASE_DOMAIN= (Suggested) Add the full staging domain here e.g. digital-staging.institution.edu Edit CONTAINER_SHORT_ID= and replace the local settings with: CONTAINER_SHORT_ID= (Suggested) Make an easy to read acronym from the letters of your institution and collection names plus environment e.g. (acme digitalcollections staging) is acdcs Edit COMPOSE_FILE change local to staging COMPOSE_FILE=docker-compose.staging.yml Save the file For users of ISLE version 1.5 and above, these git instructions below are not needed. The .env file is no longer tracked in git. For users of ISLE versions 1.4.2 and below, you will need to continue to follow these instructions until you upgrade. Enter git status - You'll now see the following: Enter git status - You'll now see the following: On branch main Your branch is up to date with 'origin/main'. Changes not staged for commit: (use \"git add <file>...\" to update what will be committed) (use \"git checkout -- <file>...\" to discard changes in working directory) modified: .env You'll need to add this file and commit it in git to be able to get future updates from ISLE as a process. git add .env git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" This is a suggested warning for users NOT TO push back this configuration change to the main git repository. If that were done it could conflict with other setups. You may run into the following: *** Please tell me who you are. Run git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" to set your account's default identity. Omit --global to set the identity only in this repository. fatal: empty ident name (for <islandora@yourprojectnamehere-staging.institution.edu>) not allowed Configure your server git client but don't use the --global setting as that could interfere with other git repositories e.g. your Islandora Drupal code. Example: Within /opt/yourprojectnamehere git config user.email \"jane@institution.edu\" git config user.name \"Jane Doe\" Now re-run the commit command: git commit -m \"Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019\" [main 7ab3fcf9] Added the edited .env configuration file for Staging. DO NOT PUSH BACK TO UPSTREAM REPOSITORY - Jane Doe 8/2019 1 file changed, 4 insertions(+), 4 deletions(-)","title":"Step 12: On Remote Staging - Edit the \".env\" File to Change to the Staging Environment"},{"location":"install/install-staging-new/#step-13-on-remote-staging-download-the-isle-images","text":"Download all of the latest ISLE Docker images ( ~6 GB of data may take 5-10 minutes ): Using the same open terminal: Navigate to the root of your ISLE project cd ~/opt/yourprojectnamehere docker-compose pull","title":"Step 13: On Remote Staging - Download the ISLE Images"},{"location":"install/install-staging-new/#step-14-on-remote-staging-start-containers","text":"Note: Prior to starting the launch process, it is recommended that you briefly open your firewall to allow ports 80 and 443 access to the world. You'll only need to keep this open for 3 -5 minutes and then promptly close access once the Let's Encrypt SSL certificates have been generated. Using the same open terminal: docker-compose up -d Please wait a few moments for the stack to fully come up. Approximately 3-5 minutes. Using the same open terminal: View only the running containers: docker ps View all containers (both those running and stopped): docker ps -a All containers prefixed with isle- are expected to have a STATUS of Up (for x time). If any of these are not UP , then use ISLE Installations: Troubleshooting to solve before continuing below. In your web browser, enter your Staging site URL: https://yourprojectnamehere-staging.institution.edu Note: You should not see any errors with respect to the SSL certifications, you should see a nice green lock padlock for the site security. If you see a red error or unknown SSL cert provider, you'll need to shut the containers down and review the previous steps taken especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors.","title":"Step 14: On Remote Staging - Start Containers"},{"location":"install/install-staging-new/#step-15-on-remote-staging-import-the-local-mysql-drupal-database","text":"Prior to attempting this step, please consider the following: If the end user is running multi-sites, there will be additional databases to export. Do not import the fedora3 database","title":"Step 15: On Remote Staging - Import the Local MySQL Drupal Database"},{"location":"install/install-staging-new/#import-the-local-mysql-islandora-drupal-database","text":"Copy the local_drupal_site_082019.sql created in Step 1 to the Remote Staging server. Import the exported Local MySQL database for use in the current Staging Drupal site. Refer to your staging.env for the usernames and passwords used below. You can use a MySQL GUI client for this process instead but the command line directions are only included below. Run docker ps to determine the MySQL container name Shell into your currently running Staging MySQL container docker exec -it your-mysql-containername bash Import the Local Islandora Drupal database. Replace the \"DRUPAL_DB_USER\" and \"DRUPAL_DB\" in the command below with the values found in your \"staging.env\" file. mysql -u DRUPAL_DB_USER -p DRUPAL_DB < local_drupal_site_082019.sql Enter the appropriate password: value of DRUPAL_DB_PASS in the \"staging.env\") This might take a few minutes depending on the size of the file. Type exit to exit the container","title":"Import the Local MySQL Islandora Drupal Database"},{"location":"install/install-staging-new/#step-16-on-remote-staging-run-the-fix-permissionssh-script","text":"You'll need to fix the Drupal site permissions by running the /fix-permissions.sh script from the Apache container Run docker ps to determine the Apache container name Shell into your currently running Staging Apache container docker exec -it your-apache-containername bash sh /utility-scripts/isle_drupal_build_tools/drupal/fix-permissions.sh --drupal_path=/var/www/html --drupal_user=islandora --httpd_group=www-data This process will take 2-5 minutes You should see a lot of green [ok] messages. If the script appears to pause or prompt for y/n , DO NOT enter any values; the script will automatically answer for you. For Microsoft Windows: You may be prompted by Windows to: - Share the C drive with Docker. Click Okay or Allow. - Enter your username and password. Do this. - Allow vpnkit.exe to communicate with the network. Click Okay or Allow (accept default selection). - If the process seems to halt, check the taskbar for background windows. Proceed only after this message appears: \"Done. 'all' cache was cleared.\"","title":"Step 16: On Remote Staging - Run the \"fix-permissions.sh\" Script"},{"location":"install/install-staging-new/#step-17-on-remote-staging-review-and-test-the-drupal-staging-site","text":"In your web browser, enter this URL: https://yourprojectnamehere-staging.institution.edu Please note: You should not see any errors with respect to the SSL certifications. If so, please review your previous steps especially if using Let's Encrypt. You may need to repeat those steps to get rid of the errors. Log in to the local Islandora site with the credentials (\"DRUPAL_ADMIN_USER\" and \"DRUPAL_ADMIN_PASS\") you created in \"staging.env\". Note: You are free to use previously Drupal admin or user accounts created during the Local site development process. You can decide to further QC and review the site as you wish or start to add digital collections and objects. You could also further test using the Islandora Sample Objects as you may have done in the previous Local installation.","title":"Step 17: On Remote Staging - Review and Test the Drupal Staging Site"},{"location":"install/install-staging-new/#next-steps","text":"Once you are ready to deploy your finished Drupal site, you may progress to: Production ISLE Installation: New Site","title":"Next Steps"},{"location":"install/install-staging-new/#additional-resources","text":"ISLE Installation: Environments help with explaining the ISLE structure, the associated files, and what values ISLE end-users should use for the \".env\", \"local.env\", etc. Local ISLE Installation: Resources contains Docker container passwords and URLs for administrator testing. ISLE Installation: Troubleshooting contains help for port conflicts, non-running Docker containers, etc. ISLE Cheat Sheet: Docker Commands contains reference information on Docker and Unix commands that are useful for installing, updating, and running ISLE.","title":"Additional Resources"},{"location":"install/install-staging-new/#end-of-staging-isle-installation-new-site","text":"","title":"End of Staging ISLE Installation: New Site"},{"location":"install/install-troubleshooting/","text":"ISLE: Troubleshooting Guide Please select a topic: Browser Caching and the Warning: \"Bad Gateway\" Error message: \"Install Drupal\" Fatal: Could Not Read From Remote Repository Fedora Hash Size (Conditional) How to Use a MySQL GUI Client to Import Drupal Database Non-Running Docker Containers Port Conflicts Viewing Logs in ISLE 1.2.0 or Higher Browser Caching and the Warning: \"Bad Gateway\" Problem: While attempting to access \"https://yourprojectnamehere.localdomain/\" you see the browser result: \"Bad Gateway\" Solution #1: Open \"https://yourprojectnamehere.localdomain/\" in an Incognito window (that prevents the browser from using prior cached pages). (Alternately, you can empty your browser cache in your regular browser.) Solution #2: Implement the Error message: \"Install Drupal\" solution (below). Docker software updates often silently adds an extraneous \"127.0.0.1 kubernetes.docker.internal\" line. Commenting that extra line will frequently resolve the \"Bad Gateway\" message. Error message: \"Install Drupal\" Problem: You install Docker software updates to your local; now, the browser no longer displays your local site and instead redirects you to \"/install.php\" so that you may \"Install Drupal\". Possible Cause: Docker may have added additional dns entries to your hosts file, causing local havoc and confusion. This is easy to clean up and remedy. Possible Solution: Edit the \"/etc/hosts\" File and remove, or comment out, any of the following extra and problematic lines (note that your IP might be in place of the examples below): 127.0.0.1 kubernetes.docker.internal 111.222.333.4 host.docker.internal 111.222.333.4 gateway.docker.internal Fatal: Could Not Read From Remote Repository If you encounter an error like this: Set up an SSH key and add it to your local ssh-agent to add access rights to read from your remote repository. This will allow you to pull from your git repository hosting service. See SSH key \"How To\" instructions on Github or Bitbucket or Gitlab . Fedora Hash Size (Conditional) Are you migrating an existing Islandora site that has greater than one million objects? This is a power user setting and is an incredibly rare situation, so do this step only if you have an akubra level 2 or greater. While this will depend on your pre-existing Production system, it is important to double-check this. If you have a larger hash size than the default ISLE system (##), and don't follow the settings below, ISLE may not function properly when your data has been migrated. (Note: even though it looks like a placeholder, the actual syntax value is actually ## .) If you have larger Fedora collections, there is a possibility that you made changes to the akubra-llstore.xml file to allow for the creation of larger or deeper hash directories) You will need to copy your /usr/local/fedora/server/config/spring/akubra-llstore.xml from your Production Fedora System to ./config/fedora/akubra-llstore.xml You will then need to add an extra line in the Fedora service (fedora) volumes section to bind mount this file in. This will guarantee proper Fedora data hash structure. - ./config/fedora/akubra-llstore.xml:/usr/local/fedora/server/config/spring/akubra-llstore.xml How to Use a MySQL GUI Client to Import Drupal Database If you want to use a MySQL client with a GUI to import the Production MySQL Drupal database you'll need to uncomment the ports section of the MySQL service within the docker-compose.local.yml to make it so you can access port 3306 from the host computer. If you are already running MySQL on your personal computer, you'll have a port conflict and will need to either shutdown that service prior to running ISLE or change 3306:3306 to something like 9306:3306 . Please double-check. Non-Running Docker Containers If you don't see all containers running, then stop the running containers with docker-compose down and start the containers one at a time following the instructions below: MySQL image pull & container launch docker pull islandoracollabgroup/isle-mysql:1.2.0 docker-compose up -d mysql Fedora image pull & container launch docker pull islandoracollabgroup/isle-fedora:1.2.0 docker-compose up -d fedora (Optional but recommended troubleshooting step) Please note the Tomcat service requires about one to three minutes to startup and as such if the end user rushes to the URL supplied below, the service page may time out or be reported as unreachable. Give it a little time. After spinning up fedora container, check if the Fedora service is running prior to advancing. Navigate to http://hostip:8081/manager/html a popup login prompt should appear. Enter the user name of admin and the password of isle_admin Upon login a large display of running Tomcat applications should display, scroll down to fedora The application state / status should be true If false appears instead, attempt to restart the Fedora service manually. Select the restart button to the right of the status area. If it still fails, review the mounted Fedora logs. The docker-compose.yml file will indicate where the logs are located. Using terminal and then entering a command like tail -n 300 - <path to ISLE project/data/fedora/log/tomcat:/usr/local/tomcat/logs/fedora.log should display enough information to troubleshoot or restart the entire startup process. Solr image pull & container launch docker pull islandoracollabgroup/isle-solr:1.2.0 docker-compose up -d solr Apache image pull & container launch docker pull islandoracollabgroup/isle-apache:1.2.0 docker-compose up -d apache Port Conflicts If you encounter an error like this: Error starting userland proxy: Bind for 0.0.0.0:xxxx failed: port is already allocated then ISLE may have encountered a conflict with the xxxx port identified in the error message. In MacOS, this can frequently be caused by a local Apache or Nginx web server, or local MySQL server. You may need to remove or disable these local web servers before you can successfully install ISLE. (Please first ensure it's not being used.) If you have a local Apache web server that ships with most MacOS machines may conflict with port 80, and can usually be disabled from a terminal using these commands: sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null If you have a local Nginx web server it may conflict with port 8080, and it can usually be disabled from a terminal using: sudo nginx -s stop Once your web server(s) have been disabled, resume the ISLE install process by repeating your last installation command, presumably docker-compose up -d . Viewing Logs in ISLE 1.2.0 or Higher As of ISLE release logging to physical file has been turned off, stdout & stderr are to console only no more physical files. This means if you need to view logs for debugging, here are some methods: Docker method: ( when using the Docker json driver and TICK is not on ) Single container: docker logs -f <containername> All containers: docker logs --tail=0 --follow [Docker-compose method:(https://docs.docker.com/compose/reference/logs/)] (when using the Docker json driver and TICK is not on) Single container: docker-compose logs -f All containers: docker-compose logs --tail=0 --follow Use the TICK Log viewer if TICK is setup and using the Docker syslog driver (Production / Staging only) Return to one of the following: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Staging ISLE Installation: New Site Staging ISLE Installation: Migrate Existing Islandora Site Production ISLE Installation: New Site Production ISLE Installation: Migrate Existing Islandora Site","title":"Troubleshooting Guide"},{"location":"install/install-troubleshooting/#isle-troubleshooting-guide","text":"Please select a topic: Browser Caching and the Warning: \"Bad Gateway\" Error message: \"Install Drupal\" Fatal: Could Not Read From Remote Repository Fedora Hash Size (Conditional) How to Use a MySQL GUI Client to Import Drupal Database Non-Running Docker Containers Port Conflicts Viewing Logs in ISLE 1.2.0 or Higher","title":"ISLE: Troubleshooting Guide"},{"location":"install/install-troubleshooting/#browser-caching-and-the-warning-bad-gateway","text":"Problem: While attempting to access \"https://yourprojectnamehere.localdomain/\" you see the browser result: \"Bad Gateway\" Solution #1: Open \"https://yourprojectnamehere.localdomain/\" in an Incognito window (that prevents the browser from using prior cached pages). (Alternately, you can empty your browser cache in your regular browser.) Solution #2: Implement the Error message: \"Install Drupal\" solution (below). Docker software updates often silently adds an extraneous \"127.0.0.1 kubernetes.docker.internal\" line. Commenting that extra line will frequently resolve the \"Bad Gateway\" message.","title":"Browser Caching and the Warning: \"Bad Gateway\""},{"location":"install/install-troubleshooting/#error-message-install-drupal","text":"Problem: You install Docker software updates to your local; now, the browser no longer displays your local site and instead redirects you to \"/install.php\" so that you may \"Install Drupal\". Possible Cause: Docker may have added additional dns entries to your hosts file, causing local havoc and confusion. This is easy to clean up and remedy. Possible Solution: Edit the \"/etc/hosts\" File and remove, or comment out, any of the following extra and problematic lines (note that your IP might be in place of the examples below): 127.0.0.1 kubernetes.docker.internal 111.222.333.4 host.docker.internal 111.222.333.4 gateway.docker.internal","title":"Error message: \"Install Drupal\""},{"location":"install/install-troubleshooting/#fatal-could-not-read-from-remote-repository","text":"If you encounter an error like this: Set up an SSH key and add it to your local ssh-agent to add access rights to read from your remote repository. This will allow you to pull from your git repository hosting service. See SSH key \"How To\" instructions on Github or Bitbucket or Gitlab .","title":"Fatal: Could Not Read From Remote Repository"},{"location":"install/install-troubleshooting/#fedora-hash-size-conditional","text":"Are you migrating an existing Islandora site that has greater than one million objects? This is a power user setting and is an incredibly rare situation, so do this step only if you have an akubra level 2 or greater. While this will depend on your pre-existing Production system, it is important to double-check this. If you have a larger hash size than the default ISLE system (##), and don't follow the settings below, ISLE may not function properly when your data has been migrated. (Note: even though it looks like a placeholder, the actual syntax value is actually ## .) If you have larger Fedora collections, there is a possibility that you made changes to the akubra-llstore.xml file to allow for the creation of larger or deeper hash directories) You will need to copy your /usr/local/fedora/server/config/spring/akubra-llstore.xml from your Production Fedora System to ./config/fedora/akubra-llstore.xml You will then need to add an extra line in the Fedora service (fedora) volumes section to bind mount this file in. This will guarantee proper Fedora data hash structure. - ./config/fedora/akubra-llstore.xml:/usr/local/fedora/server/config/spring/akubra-llstore.xml","title":"Fedora Hash Size (Conditional)"},{"location":"install/install-troubleshooting/#how-to-use-a-mysql-gui-client-to-import-drupal-database","text":"If you want to use a MySQL client with a GUI to import the Production MySQL Drupal database you'll need to uncomment the ports section of the MySQL service within the docker-compose.local.yml to make it so you can access port 3306 from the host computer. If you are already running MySQL on your personal computer, you'll have a port conflict and will need to either shutdown that service prior to running ISLE or change 3306:3306 to something like 9306:3306 . Please double-check.","title":"How to Use a MySQL GUI Client to Import Drupal Database"},{"location":"install/install-troubleshooting/#non-running-docker-containers","text":"If you don't see all containers running, then stop the running containers with docker-compose down and start the containers one at a time following the instructions below: MySQL image pull & container launch docker pull islandoracollabgroup/isle-mysql:1.2.0 docker-compose up -d mysql Fedora image pull & container launch docker pull islandoracollabgroup/isle-fedora:1.2.0 docker-compose up -d fedora (Optional but recommended troubleshooting step) Please note the Tomcat service requires about one to three minutes to startup and as such if the end user rushes to the URL supplied below, the service page may time out or be reported as unreachable. Give it a little time. After spinning up fedora container, check if the Fedora service is running prior to advancing. Navigate to http://hostip:8081/manager/html a popup login prompt should appear. Enter the user name of admin and the password of isle_admin Upon login a large display of running Tomcat applications should display, scroll down to fedora The application state / status should be true If false appears instead, attempt to restart the Fedora service manually. Select the restart button to the right of the status area. If it still fails, review the mounted Fedora logs. The docker-compose.yml file will indicate where the logs are located. Using terminal and then entering a command like tail -n 300 - <path to ISLE project/data/fedora/log/tomcat:/usr/local/tomcat/logs/fedora.log should display enough information to troubleshoot or restart the entire startup process. Solr image pull & container launch docker pull islandoracollabgroup/isle-solr:1.2.0 docker-compose up -d solr Apache image pull & container launch docker pull islandoracollabgroup/isle-apache:1.2.0 docker-compose up -d apache","title":"Non-Running Docker Containers"},{"location":"install/install-troubleshooting/#port-conflicts","text":"If you encounter an error like this: Error starting userland proxy: Bind for 0.0.0.0:xxxx failed: port is already allocated then ISLE may have encountered a conflict with the xxxx port identified in the error message. In MacOS, this can frequently be caused by a local Apache or Nginx web server, or local MySQL server. You may need to remove or disable these local web servers before you can successfully install ISLE. (Please first ensure it's not being used.) If you have a local Apache web server that ships with most MacOS machines may conflict with port 80, and can usually be disabled from a terminal using these commands: sudo apachectl stop sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null If you have a local Nginx web server it may conflict with port 8080, and it can usually be disabled from a terminal using: sudo nginx -s stop Once your web server(s) have been disabled, resume the ISLE install process by repeating your last installation command, presumably docker-compose up -d .","title":"Port Conflicts"},{"location":"install/install-troubleshooting/#viewing-logs-in-isle-120-or-higher","text":"As of ISLE release logging to physical file has been turned off, stdout & stderr are to console only no more physical files. This means if you need to view logs for debugging, here are some methods: Docker method: ( when using the Docker json driver and TICK is not on ) Single container: docker logs -f <containername> All containers: docker logs --tail=0 --follow [Docker-compose method:(https://docs.docker.com/compose/reference/logs/)] (when using the Docker json driver and TICK is not on) Single container: docker-compose logs -f All containers: docker-compose logs --tail=0 --follow Use the TICK Log viewer if TICK is setup and using the Docker syslog driver (Production / Staging only) Return to one of the following: Demo ISLE Installation Local ISLE Installation: New Site Local ISLE Installation: Migrate Existing Islandora Site Staging ISLE Installation: New Site Staging ISLE Installation: Migrate Existing Islandora Site Production ISLE Installation: New Site Production ISLE Installation: Migrate Existing Islandora Site","title":"Viewing Logs in ISLE 1.2.0 or Higher"},{"location":"optional-components/automated-testing/","text":"Automated Testing: Utilizing and Extending ISLE's Test Suite What Is This Component? Early in the history of ISLE, we did all build tests manually. We even developed a checklist spreadsheet for it . The test coverage section of this document identifies (by Spreadsheet id number) where in the test suite we have addressed the testing requirement. The tests now inhabit a separate repo: https://github.com/Islandora-Collaboration-Group/isle-behat ISLE Phase 2 included budget to automate this test suite, and to make it easy to trigger for various ISLE use cases on every build, as well as for use by implementing institutions to check the integrity of their ISLE builds. We chose to use Behat to do behavioral testing as it is the most similar to an end-user, and ultimately we want to make sure that ISLE delivers a good end-user experience. Running Unit tests was deemed insufficient, as it only tests programmatic aspects, not whether the Drupal UI allows utilization of Islandora's features. We chose to use Selenium and Chrome as Docker sidecars for actually executing the tests. Running ISLE Tests The most straightforward example of use is ISLE's testing environment: https://github.com/Islandora-Collaboration-Group/ISLE/blob/main/docker-compose.test.yml as configured by the CircleCI configuration: https://github.com/Islandora-Collaboration-Group/ISLE/blob/main/.circleci/config.yml This use case is abstracted and summarized below: Installation Instructions: Docker-compose.yml additions: several new services, for running Chrome/Selenium chrome: image: selenium/node-chrome:3.141.59-neon # latest container_name: isle-chrome-${CONTAINER_SHORT_ID} environment: - HUB_PORT=4444 - HUB_HOST=hub networks: - isle-internal depends_on: - apache - hub volumes: - /dev/shm:/dev/shm - ./data/apache/html:/var/www/html:ro hub: image: selenium/hub:3.141.59-neon # latest container_name: isle-hub-${CONTAINER_SHORT_ID} networks: - isle-internal ports: - \"4444:4444\" Notes: To allow uploads in tests, we must mount in the Apache file root into the \"chrome\" container. /dev/shm must be shared by all testing services or they will run out of RAM and crash Newer selenium images may be available, but are untested. YMMV. No changes to .env file(s) are necessary, although for the examples shown here we have: COMPOSE_PROJECT_NAME=isle_test BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=td COMPOSE_FILE-COMPOSE-FILE=test.env If your use case uses other values for these variables, you may need to find/replace in the instructions below (e.g. isle-apache-td corresponds with the CONTAINER_SHORT_ID above) The full series of commands to install a clean new ISLE with a clean new Islandora Drupal, then add extra modules to support our test cases, and then execute the tests are as follows: Get a good ISLE base for this test run: git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Then edit the .env file to contain the test suite config: COMPOSE_PROJECT_NAME=isle_test BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=td COMPOSE_FILE-COMPOSE-FILE=test.env Then fire everything back up docker-compose pull docker-compose up -d sleep 40 Now install Islandora from scratch, and init your Fedora repository using the tools provided by ISLE: set -x && docker exec -it isle-apache-td bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Now install bulk-ingest dependencies (some not required for our tests) and extra modules required by test coverage: docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_oralhistories\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush dis overlay -y\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_batch\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/mjordan/islandora_batch_with_derivs.git\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_batch_with_derivs\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_book_batch\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_newspaper_batch\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/MarcusBarnes/islandora_compound_batch.git\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_compound_batch\" Make sure your /etc/hosts has an entry for the domain you'll be using ( isle.localdomain in this example) Now clone the repository with the tests, put it where Drupal expects it ( sites/all/behat ), and install Behat dependencies with Composer: git clone git@github.com:Born-Digital-US/isle-behat.git data/isle-behat docker cp data/isle-behat isle-apache-td:/var/www/html/sites/behat docker exec -it isle-apache-td bash -c \"chown -R islandora:www-data /var/www/html/sites/behat/\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/behat && composer install \" docker exec -it isle-apache-td bash -c \"chmod 700 /var/www/html/sites/behat/run-isle-tests.sh\" sudo chmod -R 777 ~/isle/data/apache/html/sites/behat/debug And now we're ready to run tests: docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/behat && ./run-isle-tests.sh --run=services\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/behat && ./run-isle-tests.sh --run=apache\" Customizing Your Own Behat Suite If you are interested in customizing the Behat suite so that you can run it in a test environment against your themed site, follow these directions. Once you have the tests passing, you could run this in other environments - one important goal of the test suite creation was to \"do no harm.\" Create your own fork of isle-behat found at https://github.com/Islandora-Collaboration-Group/isle-behat In your ISLE installation, edit your .circleci/config.yml file to pull in your customized behat repo instead of the generic repo. Edit this snippet: Replace the url to the generic isle-behat repo with the one for your specific behat repo: bash - run: name: Fetch behat suite repo command: | mkdir data cd ~/isle git clone https://github.com/Islandora-Collaboration-Group/isle-behat.git isle-behat If your test repo is not public then you will want to clone it using ssh instead of https. In this case you will need to create and add an ssh key to your .circleci/config.yml file using these instructions: https://circleci.com/docs/2.0/add-ssh-key/ and https://circleci.com/docs/2.0/gh-bb-integration/ Edit your .circleci/config.yml file to use your code, database, and Drupal files, instead of those for a generic ISLE installation. First get a copy of your database and drupal files. Then put them in a location where CircleCi will be able to access them. This works best if you put them in a location that allows SSH access. Then comment out this section: bash - run: name: Start container and verify that it works command: | set -x docker exec -it isle-apache-td bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh no_output_timeout: 20m Next add in steps that fetch your sql database and drupal files from your pre-created location. When writing these steps it will be useful to compare the steps in the .circleci/config.yml to the steps necessary to create your local, as you will need to import your database into your docker container, among other steps. Add steps that will disable any security features that might prevent Behat from logging in to the test environment version of your site. One example of this is CAS, or any other LDAP/SSO integration. If you need to disable CAS add in this step, or customize to your needs: bash - run: name: Disable CAS command: | docker exec -it isle-apache-td bash -c \"cd /var/www/html/ && drush dis cas -y\" Start running CircleCi. Problem solve by editing your Behat tests as necessary, pushing changes to your new institutional isle-behat fork. Add the ICG isle-behat as an upstream so you can pull in future updates just like you do with your main ISLE repo. When you first run the automated test suite it is quite likely that you will have some failures. You will then need to edit your specific behat tests to address differences between your site and a generic Islandora site. Automated Test Triggers CircleCI runs these tests every time an update is pushed to the main ISLE repo. Sometimes things fail because the wind was blowing the wrong way, so we run it again and it will pass. Troubleshooting Come discuss on the ISLE Interest Group email list and/or bi-weekly meetings. Test Coverage ISLE/DOCKER IMAGES 1-1 Able to create new ISLE instance? N/A - our CI tool can set up various situations, one of which could be a new ISLE instance. 1-2 Able to view Traefik admin port? Covered by isle-services.feature \"traefik online\" 1-3 Able to view Portainer Admin panel? Covered by isle-services.feature \"portainer online\" 1-4 Able to view Tomcat admin panel for solr container? Covered by isle-services.feature \"solr online\" 1-5 Able to view the Solr admin panel for solr container? Covered by isle-services.feature \"solr online\" 1-6 Able to view Tomcat admin panel for image-services container? Covered by isle-services.feature \"imageservices online 1-7 Able to view Cantaloupe admin panel for image-services container? Covered by isle-services.feature \"imageservices online\" 1-9 Able to view Tomcat admin panel for fedora container? Covered by isle-services.feature \"fedora online\" 1-10 Able to view Fedora services panels e.g. /objects, /describe, etc. Covered by isle-services.feature \"fedora online\" 1-11 Able to view Fedoragsearch panels e.g. /fedoragsearch/rest?operation=updateIndex Covered by isle-services.feature \"fedora online\" DRUPAL INSTALLATION 2-1 Able to view domain / website url as anonymous user? Covered by isle-drupal.feature \"Viewing homepage\" 2-2 Able to login to Drupal site as an admin user? Covered by isle-drupal.feature \"Viewing login page as admin\" 2-3 Able to view persistent data folders for xml/xslt/sites and for fedora data store? WONTFIX- N/A 2-4 If Drupal multisite, able to login to multisite (not parent) site? MAYBE TODO Not covered. Need test case? 2-5 Drupal Status Report not showing errors? https:// /admin/reports/status WONTFIX- Intentionally commented out, but left relic in isle-drupal.feature SAMPLE OBJECT INGESTION Collections 3-1 Able to create a new collection e.g. test:collection? This currently happens on test setup 3-2 Able to modify a new collection's Collection policies and add Content Models? Covered in the first steps of almost all content model feature files Audio Content Model 3-3 Able to ingest the test AUDIO sample objects? Covered by audio.feature: \"Ingest Audio Sample Object\" 3-4 Able to upload thumbnail for Audio object? Covered by audio.feature: \"Replace Audio Thumbnail 3-5 Able to view / hear an AUDIO object? WONTFIX Not covered - does not appear to be possible? 3-6 Able to download an AUDIO object? Covered by audio.feature: \"Check for Audio OBJ download\" 3-7 Able to search for newly ingested AUDIO object using Islandora simple search? Covered by audio.feature: \"Check for Audio Objects using simple search\" 3-8 Able to edit AUDIO object's title using the XML form? Covered by audio.feature: \"Edit Audio object title\" 3-9 Able to search for newly edited AUDIO object's title using Islandora simple search? Covered by audio.feature: \"Edit Audio object title\" 3-10 Able to edit the Item Label of an AUDIO object's Properties? Covered by audio.feature: \"Edit Audio object Item Label\" 3-11 Able to search for newly edited Item Label of an AUDIO object's Properties using Islandora simple search? Covered by audio.feature: \"Edit Audio object Item Label\" 3-12 Able to edit MODS datastream for AUDIO object? Covered by audio.feature: \"Replace MODS datastream for Audio Object\" 3-13 Able to search for newly edited MODS datastream for AUDIO object using Islandora simple search? Covered by audio.feature: \"Replace MODS datastream for Audio Object\" 3-14 Able to delete TN derivative for AUDIO object? Covered by audio.feature: \"Delete TN derivative for Audio Object\" 3-15 Able to regenerate all derivatives for AUDIO object? Covered by audio.feature: \"Regenerate all derivatives for Audio Object\" Basic Image Content Model 3-16 Able to ingest these test BASIC IMAGE sample objects? Covered by basicimage.feature: \"Ingest Basic Image Sample Object\" 3-17 Able to view a BASIC IMAGE object? Covered by basicimage.feature: \"Check for Basic Image OBJ download\" 3-18 Able to download a BASIC IMAGE object? Covered by basicimage.feature: \"Check for Basic Image OBJ download\" 3-19 Able to search for newly ingested BASIC IMAGE object using Islandora simple search? Covered by basicimage.feature: \"Check for Basic Image Objects using simple search\" 3-20 Able to edit BASIC IMAGE object's title using the XML form? Covered by basicimage.feature: \"Edit Basic Image object title\" 3-21 Able to search for newly edited BASIC IMAGE object's title using Islandora simple search? Covered by basicimage.feature: \"Edit Basic Image object title\" 3-22 Able to edit the Item Label of an BASIC IMAGE object's Properties? Covered by basicimage.feature: \"Edit Basic Image object Item Label\" 3-23 Able to search for newly edited Item Label of an BASIC IMAGE object's Properties using Islandora simple search? Covered by basicimage.feature: \"Edit Basic Image object Item Label\" 3-24 Able to edit MODS datastream for BASIC IMAGE object? Covered by basicimage.feature: \"Replace MODS datastream for Basic Image Object\" 3-25 Able to search for newly edited MODS datastream for BASIC IMAGE object using Islandora simple search? Covered by basicimage.feature: \"Replace MODS datastream for Basic Image Object\" 3-26 Able to delete TN derivative for BASIC IMAGE object? Covered by basicimage.feature: \"Delete TN derivative for Basic Image Object\" 3-27 Able to regenerate all derivatives for BASIC IMAGE object? Covered by basicimage.feature: \"Regenerate all derivatives for Basic Image Object\" Book Content Model 3-28 Able to ingest these test BOOK sample objects? Covered by book.feature: \"Ingest Book Sample Object\" 3-29 Able to view a BOOK object? Covered by book.feature: \"Check for BOOK OBJ download\" 3-30 Able to download a BOOK object? Covered by book.feature: \"Check for BOOK OBJ download\" 3-31 Able to search for newly ingested BOOK object using Islandora simple search? Covered by book.feature: \"Check for BOOK Objects using simple search\" 3-32 Able to edit BOOK object's title using the XML form? Covered by book.feature: \"Edit BOOK object title\" 3-33 Able to search for newly edited BOOK object's title using Islandora simple search? Covered by book.feature: \"Edit BOOK object title\" 3-34 Able to edit the Item Label of an BOOK object's Properties? Covered by book.feature: \"Edit BOOK object Item Label\" 3-35 Able to search for newly edited Item Label of an BOOK object's Properties using Islandora simple search? Covered by book.feature: \"Edit BOOK object Item Label\" 3-36 Able to edit MODS datastream for BOOK object? Covered by book.feature: \"Replace MODS datastream for BOOK Object\" 3-37 Able to search for newly edited MODS datastream for BOOK object using Islandora simple search? Covered by book.feature: \"Replace MODS datastream for BOOK Object\" 3-38 Able to delete TN derivative for BOOK object? Covered by book.feature: \"Delete TN derivative for BOOK Object\" 3-39 Able to regenerate all derivatives for BOOK object? Covered by book.feature: \"Regenerate all derivatives for BOOK Object\" Compound Object Content Model 3-40 Able to ingest these test COMPOUND OBJECT sample objects? Covered by compound.feature: \"Ingest Compound Object Sample Object\" 3-41 Able to view a COMPOUND OBJECT object? This is theme specific. 3-42 Able to download a COMPOUND OBJECT object? This is theme specific. 3-43 Able to search for newly ingested COMPOUND OBJECT object using Islandora simple search? Covered by compound.feature: \"Check for Compound Object Objects using simple search\" 3-44 Able to edit COMPOUND OBJECT object's title using the XML form? Covered by compound.feature: \"Edit Compound Object object title\" 3-45 Able to search for newly edited COMPOUND OBJECT object's title using Islandora simple search? Covered by compound.feature: \"Edit Compound Object object title\" 3-46 Able to edit the Item Label of an COMPOUND OBJECT object's Properties? Covered by compound.feature: \"Edit Compound Object object Item Label\" 3-47 Able to search for newly edited Item Label of an COMPOUND OBJECT object's Properties using Islandora simple search? Covered by compound.feature: \"Edit Compound Object object Item Label\" 3-48 Able to edit MODS datastream for COMPOUND OBJECT object? Covered by compound.feature: \"Replace MODS datastream for Compound Object Object\" 3-49 Able to search for newly edited MODS datastream for COMPOUND OBJECT object using Islandora simple search? Covered by compound.feature: \"Replace MODS datastream for Compound Object Object 3-50 Able to delete TN derivative for COMPOUND OBJECT object? Covered by compound.feature: \"Delete TN derivative for Compound Object Object\" 3-51 Able to regenerate all derivatives for COMPOUND OBJECT object? WONTFIX- Does not appear to be possible as derivatives are tied to child objects Testing regen derivs is already covered in the other content types that appear as children of compounds Testing viewers WONTFIX- this is theme dependent. All we do is ingest and test relationships and data integrity Large Image Content Model 3-52 Able to ingest these test LARGE IMAGE sample objects? Covered by largeimage.feature: \"Ingest Large Image Sample Object\" 3-53 Able to view a LARGE IMAGE object? Covered by largeimage.feature: \"Check for Large Image OBJ download\" 3-54 Able to download a LARGE IMAGE object? Covered by largeimage.feature: \"Check for Large Image OBJ download\" 3-55 Able to search for newly ingested LARGE IMAGE object using Islandora simple search? Covered by largeimage.feature: \"Check for Large Image Objects using simple search\" 3-56 Able to edit LARGE IMAGE object's title using the XML form? Covered by largeimage.feature: \"Edit Large Image object title\" 3-57 Able to search for newly edited LARGE IMAGE object's title using Islandora simple search? Covered by largeimage.feature: \"Edit Large Image object title\" 3-58 Able to edit the Item Label of an LARGE IMAGE object's Properties? Covered by largeimage.feature: \"Edit Large Image object Item Label\" 3-59 Able to search for newly edited Item Label of an LARGE IMAGE object's Properties using Islandora simple search? Covered by largeimage.feature: \"Edit Large Image object Item Label\" 3-60 Able to edit MODS datastream for LARGE IMAGE object? Covered by largeimage.feature: \"Replace MODS datastream for Large Image Object\" 3-61 Able to search for newly edited MODS datastream for LARGE IMAGE object using Islandora simple search? Covered by largeimage.feature: \"Replace MODS datastream for Large Image Object\" 3-62 Able to delete TN derivative for LARGE IMAGE object? Covered by largeimage.feature: \"Delete TN derivative for Large Image Object\" 3-63 Able to regenerate all derivatives for LARGE IMAGE object? Covered by largeimage.feature: \"Regenerate all derivatives for Large Image Object\" Newspaper Content Model 3-64 Able to ingest these test NEWSPAPER sample objects? Covered by newspaper.feature: \"Ingest Newspaper Sample Object\" 3-65 Able to view a NEWSPAPER object? Covered by newspaper.feature: \"Check for Newspaper OBJ download\" 3-66 Able to download a NEWSPAPER object? Covered by newspaper.feature: \"Check for Newspaper OBJ download\" 3-67 Able to search for newly ingested NEWSPAPER object using Islandora simple search? Covered by newspaper.feature: \"Check for Newspaper Objects using simple search\" 3-68 Able to edit NEWSPAPER object's title using the XML form? Covered by newspaper.feature: \"Edit Newspaper object title\" 3-69 Able to search for newly edited NEWSPAPER object's title using Islandora simple search? Covered by newspaper.feature: \"Edit Newspaper object title\" 3-70 Able to edit the Item Label of an NEWSPAPER object's Properties? Covered by newspaper.feature: \"Edit Newspaper object Item Label\" 3-71 Able to search for newly edited Item Label of an NEWSPAPER object's Properties using Islandora simple search? Covered by newspaper.feature: \"Edit Newspaper object Item Label\" 3-72 Able to edit MODS datastream for NEWSPAPER object? Covered by newspaper.feature: \"Replace MODS datastream for Newspaper Object\" 3-73 Able to search for newly edited MODS datastream for NEWSPAPER object using Islandora simple search? Covered by newspaper.feature: \"Replace MODS datastream for Newspaper Object\" 3-74 Able to delete TN derivative for NEWSPAPER object? Covered by newspaper.feature: \"Delete TN derivative for Newspaper Object\" 3-75 Able to regenerate all derivatives for NEWSPAPER object? Covered by newspaper.feature: \"Regenerate all derivatives for Newspaper Object\" Oral History Content Model 3-76 Able to ingest these test ORAL HISTORY sample objects? Covered by oralhistories.feature: \"Ingest ORAL HISTORIES Sample Object\" 3-77 Able to view a ORAL HISTORY object? Covered by oralhistories.feature: \"Check for ORAL HISTORIES OBJ download\" 3-78 Able to download a ORAL HISTORY object? Covered by oralhistories.feature: \"Check for ORAL HISTORIES OBJ download\" 3-79 Able to search for newly ingested ORAL HISTORY object using Islandora simple search? Covered by oralhistories.feature: \"Check for ORAL HISTORIES Objects using simple search\" 3-80 Able to edit ORAL HISTORY object's title using the XML form? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object title\" 3-81 Able to search for newly edited ORAL HISTORY object's title using Islandora simple search? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object title\" 3-82 Able to edit the Item Label of an ORAL HISTORY object's Properties? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object Item Label\" 3-83 Able to search for newly edited Item Label of an ORAL HISTORY object's Properties using Islandora simple search? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object Item Label\" 3-84 Able to edit MODS datastream for ORAL HISTORY object? Covered by oralhistories.feature: \"Replace MODS datastream for ORAL HISTORIES Object\" 3-85 Able to search for newly edited MODS datastream for ORAL HISTORY object using Islandora simple search? Covered by oralhistories.feature: \"Replace MODS datastream for ORAL HISTORIES Object\" 3-86 Able to delete TN derivative for ORAL HISTORY object? Covered by oralhistories.feature: \"Delete TN derivative for ORAL HISTORIES Object\" 3-87 Able to regenerate all derivatives for ORAL HISTORY object? Covered by oralhistories.feature: \"Regenerate all derivatives for ORAL HISTORIES Object\" PDF Content Model 3-88 Able to ingest these test PDF sample objects? Covered by pdf.feature: \"Ingest PDF Sample Object\" 3-89 Able to view a PDF object? Covered by pdf.feature: \"Check for PDF OBJ download\" 3-90 Able to download a PDF object? Covered by pdf.feature: \"Check for PDF OBJ download\" 3-91 Able to search for newly ingested PDF object using Islandora simple search? Covered by pdf.feature: \"Check for PDF Objects using simple search\" 3-92 Able to edit PDF object's title using the XML form? Covered by pdf.feature: \"Edit PDF object title\" 3-93 Able to search for newly edited PDF object's title using Islandora simple search? Covered by pdf.feature: \"Edit PDF object title\" 3-94 Able to edit the Item Label of an PDF object's Properties? Covered by pdf.feature: \"Edit PDF object Item Label\" 3-95 Able to search for newly edited Item Label of an PDF object's Properties using Islandora simple search? Covered by pdf.feature: \"Edit PDF object Item Label\" 3-96 Able to edit MODS datastream for PDF object? Covered by pdf.feature: \"Replace MODS datastream for PDF Object\" 3-97 Able to search for newly edited MODS datastream for PDF object using Islandora simple search? Covered by pdf.feature: \"Replace MODS datastream for PDF Object\" 3-98 Able to delete TN derivative for PDF object? Covered by pdf.feature: \"Delete TN derivative for PDF Object\" 3-99 Able to regenerate all derivatives for PDF object? Covered by pdf.feature: \"Regenerate all derivatives for PDF Object\" Video Content Model 3-100 Able to ingest these test VIDEO sample objects? Covered by video.feature: \"Ingest Video Sample Object\" 3-101 Able to view a VIDEO object? Covered by video.feature: \"Check for Video OBJ download\" 3-102 Able to download a VIDEO object? Covered by video.feature: \"Check for Video OBJ download\" 3-103 Able to search for newly ingested VIDEO object using Islandora simple search? Covered by video.feature: \"Check for Video Objects using simple search\" 3-104 Able to edit VIDEO object's title using the XML form? Covered by video.feature: \"Edit Video object title\" 3-105 Able to search for newly edited VIDEO object's title using Islandora simple search? Covered by video.feature: \"Edit Video object title\" 3-106 Able to edit the Item Label of an VIDEO object's Properties? Covered by video.feature: \"Edit Video object Item Label\" 3-107 Able to search for newly edited Item Label of an VIDEO object's Properties using Islandora simple search? Covered by video.feature: \"Edit Video object Item Label\" 3-108 Able to edit MODS datastream for VIDEO object? Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-109 Able to search for newly edited MODS datastream for VIDEO object using Islandora simple search? Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-110 Able to replace MODS datastreams Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-111 Able to search for newly replaced MODS datastreams using Islandora simple search? Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-112 Able to delete TN derivative for VIDEO object? Covered by video.feature: \"Delete TN derivative for Video Object\" 3-113 Able to regenerate all derivatives for VIDEO object? Covered by video.feature: \"Regenerate all derivatives for Video Object\" WARC Content Model 3-114 Able to ingest these test WEB ARCHIVE sample objects? Covered by warc.feature: \"Ingest WARC Sample Object\" 3-115 Able to view a WEB ARCHIVE object? N/A There is no WARC viewer 3-116 Able to download a WEB ARCHIVE object? Covered by warc.feature: \"Check for WARC OBJ download\" 3-117 Able to search for newly ingested WEB ARCHIVE object using Islandora simple search? Covered by warc.feature: \"Check for WARC Objects using simple search\" 3-118 Able to edit WEB ARCHIVE object's title using the XML form? Covered by warc.feature: \"Edit WARC object title\" 3-119 Able to search for newly edited WEB ARCHIVE object's title using Islandora simple search? Covered by warc.feature: \"Edit WARC object title\" 3-120 Able to edit the Item Label of an WEB ARCHIVE object's Properties? Covered by warc.feature: \"Edit WARC object Item Label\" 3-121 Able to search for newly edited Item Label of an WEB ARCHIVE object's Properties using Islandora simple search? Covered by warc.feature: \"Edit WARC object Item Label\" 3-122 Able to edit MODS datastream for WEB ARCHIVE object? Covered by warc.feature: \"Replace MODS datastream for WARC Object\" 3-123 Able to search for newly edited MODS datastream for WEB ARCHIVE object using Islandora simple search? Covered by warc.feature: \"Replace MODS datastream for WARC Object\" 3-124 Able to delete TN derivative for WEB ARCHIVE object? Covered by warc.feature: \"Delete TN derivative for WARC Object\" 3-125 Able to regenerate all derivatives for WEB ARCHIVE object? Covered by warc.feature: \"Regenerate all derivatives for WARC Object\" MAINTENANCE TASKS 4-1 Able to view the expected number of data objects? N/A 4-2 Able to run Drupal cron manuall as signed in user? Covered by )-sile-drupal.feature: \"Run cron\" 4-3 Confirm that Drupal cron runs automatically as scheduled? N/A 4-4 Able to view / tail logs from within containers N/A 4-5 Able to view / tail logs on Host server? N/A 4-6 Able to run a Solr search from website and find ingested objects? Covered above 4-7 Able to reindex / rebuild Fedora RI? * 4-8 Able to reindex / rebuild Fedora db MYSQL? 4-9 Able to reindex SOLR? Additional Testing 5-1 Able to create single host server with multi-sites (link to Ben's instructions) WONTFIX - ISLE doesn't support this anymore 5-2 Able to use mounts instead of Docker N/A - To be covered by one or more CI configurations 5-3 Able to create new config directories for services N/A - To be covered by one or more CI configurations FEDORA - Able to Override Existing Settings For: 5-4 - ./config/fedora/akubra-llstore.xml:/usr/local/fedora/server/config/spring/akubra-llstore.xml (Allows for deeper hash directories for larger Fedora collections) N/A - To be covered by one or more CI configurations 5-5 foxmltoSolr.xslt N/A - To be covered by one or more CI configurations 5-6 islandora_transforms N/A - To be covered by one or more CI configurations SOLR - Able to Override Existing Settings For: 5-7 schema.xml N/A - To be covered by one or more CI configurations 5-8 solrconfig.xml N/A - To be covered by one or more CI configurations 5-9 Use IMI for sample ingest testing to speed things up N/A 5-10 Test bind mounting - with nested ancestors set to true foxmltoSolr.xslt and all islandora_transforms, along with solrconfig and schemas N/A - To be covered by one or more CI configurations Additional Resources","title":"Automated Testing"},{"location":"optional-components/automated-testing/#automated-testing-utilizing-and-extending-isles-test-suite","text":"","title":"Automated Testing: Utilizing and Extending ISLE's Test Suite"},{"location":"optional-components/automated-testing/#what-is-this-component","text":"Early in the history of ISLE, we did all build tests manually. We even developed a checklist spreadsheet for it . The test coverage section of this document identifies (by Spreadsheet id number) where in the test suite we have addressed the testing requirement. The tests now inhabit a separate repo: https://github.com/Islandora-Collaboration-Group/isle-behat ISLE Phase 2 included budget to automate this test suite, and to make it easy to trigger for various ISLE use cases on every build, as well as for use by implementing institutions to check the integrity of their ISLE builds. We chose to use Behat to do behavioral testing as it is the most similar to an end-user, and ultimately we want to make sure that ISLE delivers a good end-user experience. Running Unit tests was deemed insufficient, as it only tests programmatic aspects, not whether the Drupal UI allows utilization of Islandora's features. We chose to use Selenium and Chrome as Docker sidecars for actually executing the tests.","title":"What Is This Component?"},{"location":"optional-components/automated-testing/#running-isle-tests","text":"The most straightforward example of use is ISLE's testing environment: https://github.com/Islandora-Collaboration-Group/ISLE/blob/main/docker-compose.test.yml as configured by the CircleCI configuration: https://github.com/Islandora-Collaboration-Group/ISLE/blob/main/.circleci/config.yml This use case is abstracted and summarized below:","title":"Running ISLE Tests"},{"location":"optional-components/automated-testing/#installation-instructions","text":"Docker-compose.yml additions: several new services, for running Chrome/Selenium chrome: image: selenium/node-chrome:3.141.59-neon # latest container_name: isle-chrome-${CONTAINER_SHORT_ID} environment: - HUB_PORT=4444 - HUB_HOST=hub networks: - isle-internal depends_on: - apache - hub volumes: - /dev/shm:/dev/shm - ./data/apache/html:/var/www/html:ro hub: image: selenium/hub:3.141.59-neon # latest container_name: isle-hub-${CONTAINER_SHORT_ID} networks: - isle-internal ports: - \"4444:4444\" Notes: To allow uploads in tests, we must mount in the Apache file root into the \"chrome\" container. /dev/shm must be shared by all testing services or they will run out of RAM and crash Newer selenium images may be available, but are untested. YMMV. No changes to .env file(s) are necessary, although for the examples shown here we have: COMPOSE_PROJECT_NAME=isle_test BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=td COMPOSE_FILE-COMPOSE-FILE=test.env If your use case uses other values for these variables, you may need to find/replace in the instructions below (e.g. isle-apache-td corresponds with the CONTAINER_SHORT_ID above) The full series of commands to install a clean new ISLE with a clean new Islandora Drupal, then add extra modules to support our test cases, and then execute the tests are as follows: Get a good ISLE base for this test run: git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Then edit the .env file to contain the test suite config: COMPOSE_PROJECT_NAME=isle_test BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=td COMPOSE_FILE-COMPOSE-FILE=test.env Then fire everything back up docker-compose pull docker-compose up -d sleep 40 Now install Islandora from scratch, and init your Fedora repository using the tools provided by ISLE: set -x && docker exec -it isle-apache-td bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh Now install bulk-ingest dependencies (some not required for our tests) and extra modules required by test coverage: docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/Islandora-Labs/islandora_solution_pack_oralhistories.git\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_oralhistories\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush dis overlay -y\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_batch\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/mjordan/islandora_batch_with_derivs.git\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_batch_with_derivs\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_book_batch\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_newspaper_batch\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/all/modules/islandora && git clone https://github.com/MarcusBarnes/islandora_compound_batch.git\" docker exec -it isle-apache-td bash -c \"cd /var/www/html && drush -y -u 1 en islandora_compound_batch\" Make sure your /etc/hosts has an entry for the domain you'll be using ( isle.localdomain in this example) Now clone the repository with the tests, put it where Drupal expects it ( sites/all/behat ), and install Behat dependencies with Composer: git clone git@github.com:Born-Digital-US/isle-behat.git data/isle-behat docker cp data/isle-behat isle-apache-td:/var/www/html/sites/behat docker exec -it isle-apache-td bash -c \"chown -R islandora:www-data /var/www/html/sites/behat/\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/behat && composer install \" docker exec -it isle-apache-td bash -c \"chmod 700 /var/www/html/sites/behat/run-isle-tests.sh\" sudo chmod -R 777 ~/isle/data/apache/html/sites/behat/debug And now we're ready to run tests: docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/behat && ./run-isle-tests.sh --run=services\" docker exec -it isle-apache-td bash -c \"cd /var/www/html/sites/behat && ./run-isle-tests.sh --run=apache\"","title":"Installation Instructions:"},{"location":"optional-components/automated-testing/#customizing-your-own-behat-suite","text":"If you are interested in customizing the Behat suite so that you can run it in a test environment against your themed site, follow these directions. Once you have the tests passing, you could run this in other environments - one important goal of the test suite creation was to \"do no harm.\" Create your own fork of isle-behat found at https://github.com/Islandora-Collaboration-Group/isle-behat In your ISLE installation, edit your .circleci/config.yml file to pull in your customized behat repo instead of the generic repo. Edit this snippet: Replace the url to the generic isle-behat repo with the one for your specific behat repo: bash - run: name: Fetch behat suite repo command: | mkdir data cd ~/isle git clone https://github.com/Islandora-Collaboration-Group/isle-behat.git isle-behat If your test repo is not public then you will want to clone it using ssh instead of https. In this case you will need to create and add an ssh key to your .circleci/config.yml file using these instructions: https://circleci.com/docs/2.0/add-ssh-key/ and https://circleci.com/docs/2.0/gh-bb-integration/ Edit your .circleci/config.yml file to use your code, database, and Drupal files, instead of those for a generic ISLE installation. First get a copy of your database and drupal files. Then put them in a location where CircleCi will be able to access them. This works best if you put them in a location that allows SSH access. Then comment out this section: bash - run: name: Start container and verify that it works command: | set -x docker exec -it isle-apache-td bash /utility-scripts/isle_drupal_build_tools/isle_islandora_installer.sh no_output_timeout: 20m Next add in steps that fetch your sql database and drupal files from your pre-created location. When writing these steps it will be useful to compare the steps in the .circleci/config.yml to the steps necessary to create your local, as you will need to import your database into your docker container, among other steps. Add steps that will disable any security features that might prevent Behat from logging in to the test environment version of your site. One example of this is CAS, or any other LDAP/SSO integration. If you need to disable CAS add in this step, or customize to your needs: bash - run: name: Disable CAS command: | docker exec -it isle-apache-td bash -c \"cd /var/www/html/ && drush dis cas -y\" Start running CircleCi. Problem solve by editing your Behat tests as necessary, pushing changes to your new institutional isle-behat fork. Add the ICG isle-behat as an upstream so you can pull in future updates just like you do with your main ISLE repo. When you first run the automated test suite it is quite likely that you will have some failures. You will then need to edit your specific behat tests to address differences between your site and a generic Islandora site.","title":"Customizing Your Own Behat Suite"},{"location":"optional-components/automated-testing/#automated-test-triggers","text":"CircleCI runs these tests every time an update is pushed to the main ISLE repo. Sometimes things fail because the wind was blowing the wrong way, so we run it again and it will pass.","title":"Automated Test Triggers"},{"location":"optional-components/automated-testing/#troubleshooting","text":"Come discuss on the ISLE Interest Group email list and/or bi-weekly meetings.","title":"Troubleshooting"},{"location":"optional-components/automated-testing/#test-coverage","text":"","title":"Test Coverage"},{"location":"optional-components/automated-testing/#isledocker-images","text":"1-1 Able to create new ISLE instance? N/A - our CI tool can set up various situations, one of which could be a new ISLE instance. 1-2 Able to view Traefik admin port? Covered by isle-services.feature \"traefik online\" 1-3 Able to view Portainer Admin panel? Covered by isle-services.feature \"portainer online\" 1-4 Able to view Tomcat admin panel for solr container? Covered by isle-services.feature \"solr online\" 1-5 Able to view the Solr admin panel for solr container? Covered by isle-services.feature \"solr online\" 1-6 Able to view Tomcat admin panel for image-services container? Covered by isle-services.feature \"imageservices online 1-7 Able to view Cantaloupe admin panel for image-services container? Covered by isle-services.feature \"imageservices online\" 1-9 Able to view Tomcat admin panel for fedora container? Covered by isle-services.feature \"fedora online\" 1-10 Able to view Fedora services panels e.g. /objects, /describe, etc. Covered by isle-services.feature \"fedora online\" 1-11 Able to view Fedoragsearch panels e.g. /fedoragsearch/rest?operation=updateIndex Covered by isle-services.feature \"fedora online\"","title":"ISLE/DOCKER IMAGES"},{"location":"optional-components/automated-testing/#drupal-installation","text":"2-1 Able to view domain / website url as anonymous user? Covered by isle-drupal.feature \"Viewing homepage\" 2-2 Able to login to Drupal site as an admin user? Covered by isle-drupal.feature \"Viewing login page as admin\" 2-3 Able to view persistent data folders for xml/xslt/sites and for fedora data store? WONTFIX- N/A 2-4 If Drupal multisite, able to login to multisite (not parent) site? MAYBE TODO Not covered. Need test case? 2-5 Drupal Status Report not showing errors? https:// /admin/reports/status WONTFIX- Intentionally commented out, but left relic in isle-drupal.feature","title":"DRUPAL INSTALLATION"},{"location":"optional-components/automated-testing/#sample-object-ingestion","text":"","title":"SAMPLE OBJECT INGESTION"},{"location":"optional-components/automated-testing/#collections","text":"3-1 Able to create a new collection e.g. test:collection? This currently happens on test setup 3-2 Able to modify a new collection's Collection policies and add Content Models? Covered in the first steps of almost all content model feature files","title":"Collections"},{"location":"optional-components/automated-testing/#audio-content-model","text":"3-3 Able to ingest the test AUDIO sample objects? Covered by audio.feature: \"Ingest Audio Sample Object\" 3-4 Able to upload thumbnail for Audio object? Covered by audio.feature: \"Replace Audio Thumbnail 3-5 Able to view / hear an AUDIO object? WONTFIX Not covered - does not appear to be possible? 3-6 Able to download an AUDIO object? Covered by audio.feature: \"Check for Audio OBJ download\" 3-7 Able to search for newly ingested AUDIO object using Islandora simple search? Covered by audio.feature: \"Check for Audio Objects using simple search\" 3-8 Able to edit AUDIO object's title using the XML form? Covered by audio.feature: \"Edit Audio object title\" 3-9 Able to search for newly edited AUDIO object's title using Islandora simple search? Covered by audio.feature: \"Edit Audio object title\" 3-10 Able to edit the Item Label of an AUDIO object's Properties? Covered by audio.feature: \"Edit Audio object Item Label\" 3-11 Able to search for newly edited Item Label of an AUDIO object's Properties using Islandora simple search? Covered by audio.feature: \"Edit Audio object Item Label\" 3-12 Able to edit MODS datastream for AUDIO object? Covered by audio.feature: \"Replace MODS datastream for Audio Object\" 3-13 Able to search for newly edited MODS datastream for AUDIO object using Islandora simple search? Covered by audio.feature: \"Replace MODS datastream for Audio Object\" 3-14 Able to delete TN derivative for AUDIO object? Covered by audio.feature: \"Delete TN derivative for Audio Object\" 3-15 Able to regenerate all derivatives for AUDIO object? Covered by audio.feature: \"Regenerate all derivatives for Audio Object\"","title":"Audio Content Model"},{"location":"optional-components/automated-testing/#basic-image-content-model","text":"3-16 Able to ingest these test BASIC IMAGE sample objects? Covered by basicimage.feature: \"Ingest Basic Image Sample Object\" 3-17 Able to view a BASIC IMAGE object? Covered by basicimage.feature: \"Check for Basic Image OBJ download\" 3-18 Able to download a BASIC IMAGE object? Covered by basicimage.feature: \"Check for Basic Image OBJ download\" 3-19 Able to search for newly ingested BASIC IMAGE object using Islandora simple search? Covered by basicimage.feature: \"Check for Basic Image Objects using simple search\" 3-20 Able to edit BASIC IMAGE object's title using the XML form? Covered by basicimage.feature: \"Edit Basic Image object title\" 3-21 Able to search for newly edited BASIC IMAGE object's title using Islandora simple search? Covered by basicimage.feature: \"Edit Basic Image object title\" 3-22 Able to edit the Item Label of an BASIC IMAGE object's Properties? Covered by basicimage.feature: \"Edit Basic Image object Item Label\" 3-23 Able to search for newly edited Item Label of an BASIC IMAGE object's Properties using Islandora simple search? Covered by basicimage.feature: \"Edit Basic Image object Item Label\" 3-24 Able to edit MODS datastream for BASIC IMAGE object? Covered by basicimage.feature: \"Replace MODS datastream for Basic Image Object\" 3-25 Able to search for newly edited MODS datastream for BASIC IMAGE object using Islandora simple search? Covered by basicimage.feature: \"Replace MODS datastream for Basic Image Object\" 3-26 Able to delete TN derivative for BASIC IMAGE object? Covered by basicimage.feature: \"Delete TN derivative for Basic Image Object\" 3-27 Able to regenerate all derivatives for BASIC IMAGE object? Covered by basicimage.feature: \"Regenerate all derivatives for Basic Image Object\"","title":"Basic Image Content Model"},{"location":"optional-components/automated-testing/#book-content-model","text":"3-28 Able to ingest these test BOOK sample objects? Covered by book.feature: \"Ingest Book Sample Object\" 3-29 Able to view a BOOK object? Covered by book.feature: \"Check for BOOK OBJ download\" 3-30 Able to download a BOOK object? Covered by book.feature: \"Check for BOOK OBJ download\" 3-31 Able to search for newly ingested BOOK object using Islandora simple search? Covered by book.feature: \"Check for BOOK Objects using simple search\" 3-32 Able to edit BOOK object's title using the XML form? Covered by book.feature: \"Edit BOOK object title\" 3-33 Able to search for newly edited BOOK object's title using Islandora simple search? Covered by book.feature: \"Edit BOOK object title\" 3-34 Able to edit the Item Label of an BOOK object's Properties? Covered by book.feature: \"Edit BOOK object Item Label\" 3-35 Able to search for newly edited Item Label of an BOOK object's Properties using Islandora simple search? Covered by book.feature: \"Edit BOOK object Item Label\" 3-36 Able to edit MODS datastream for BOOK object? Covered by book.feature: \"Replace MODS datastream for BOOK Object\" 3-37 Able to search for newly edited MODS datastream for BOOK object using Islandora simple search? Covered by book.feature: \"Replace MODS datastream for BOOK Object\" 3-38 Able to delete TN derivative for BOOK object? Covered by book.feature: \"Delete TN derivative for BOOK Object\" 3-39 Able to regenerate all derivatives for BOOK object? Covered by book.feature: \"Regenerate all derivatives for BOOK Object\"","title":"Book Content Model"},{"location":"optional-components/automated-testing/#compound-object-content-model","text":"3-40 Able to ingest these test COMPOUND OBJECT sample objects? Covered by compound.feature: \"Ingest Compound Object Sample Object\" 3-41 Able to view a COMPOUND OBJECT object? This is theme specific. 3-42 Able to download a COMPOUND OBJECT object? This is theme specific. 3-43 Able to search for newly ingested COMPOUND OBJECT object using Islandora simple search? Covered by compound.feature: \"Check for Compound Object Objects using simple search\" 3-44 Able to edit COMPOUND OBJECT object's title using the XML form? Covered by compound.feature: \"Edit Compound Object object title\" 3-45 Able to search for newly edited COMPOUND OBJECT object's title using Islandora simple search? Covered by compound.feature: \"Edit Compound Object object title\" 3-46 Able to edit the Item Label of an COMPOUND OBJECT object's Properties? Covered by compound.feature: \"Edit Compound Object object Item Label\" 3-47 Able to search for newly edited Item Label of an COMPOUND OBJECT object's Properties using Islandora simple search? Covered by compound.feature: \"Edit Compound Object object Item Label\" 3-48 Able to edit MODS datastream for COMPOUND OBJECT object? Covered by compound.feature: \"Replace MODS datastream for Compound Object Object\" 3-49 Able to search for newly edited MODS datastream for COMPOUND OBJECT object using Islandora simple search? Covered by compound.feature: \"Replace MODS datastream for Compound Object Object 3-50 Able to delete TN derivative for COMPOUND OBJECT object? Covered by compound.feature: \"Delete TN derivative for Compound Object Object\" 3-51 Able to regenerate all derivatives for COMPOUND OBJECT object? WONTFIX- Does not appear to be possible as derivatives are tied to child objects Testing regen derivs is already covered in the other content types that appear as children of compounds Testing viewers WONTFIX- this is theme dependent. All we do is ingest and test relationships and data integrity","title":"Compound Object Content Model"},{"location":"optional-components/automated-testing/#large-image-content-model","text":"3-52 Able to ingest these test LARGE IMAGE sample objects? Covered by largeimage.feature: \"Ingest Large Image Sample Object\" 3-53 Able to view a LARGE IMAGE object? Covered by largeimage.feature: \"Check for Large Image OBJ download\" 3-54 Able to download a LARGE IMAGE object? Covered by largeimage.feature: \"Check for Large Image OBJ download\" 3-55 Able to search for newly ingested LARGE IMAGE object using Islandora simple search? Covered by largeimage.feature: \"Check for Large Image Objects using simple search\" 3-56 Able to edit LARGE IMAGE object's title using the XML form? Covered by largeimage.feature: \"Edit Large Image object title\" 3-57 Able to search for newly edited LARGE IMAGE object's title using Islandora simple search? Covered by largeimage.feature: \"Edit Large Image object title\" 3-58 Able to edit the Item Label of an LARGE IMAGE object's Properties? Covered by largeimage.feature: \"Edit Large Image object Item Label\" 3-59 Able to search for newly edited Item Label of an LARGE IMAGE object's Properties using Islandora simple search? Covered by largeimage.feature: \"Edit Large Image object Item Label\" 3-60 Able to edit MODS datastream for LARGE IMAGE object? Covered by largeimage.feature: \"Replace MODS datastream for Large Image Object\" 3-61 Able to search for newly edited MODS datastream for LARGE IMAGE object using Islandora simple search? Covered by largeimage.feature: \"Replace MODS datastream for Large Image Object\" 3-62 Able to delete TN derivative for LARGE IMAGE object? Covered by largeimage.feature: \"Delete TN derivative for Large Image Object\" 3-63 Able to regenerate all derivatives for LARGE IMAGE object? Covered by largeimage.feature: \"Regenerate all derivatives for Large Image Object\"","title":"Large Image Content Model"},{"location":"optional-components/automated-testing/#newspaper-content-model","text":"3-64 Able to ingest these test NEWSPAPER sample objects? Covered by newspaper.feature: \"Ingest Newspaper Sample Object\" 3-65 Able to view a NEWSPAPER object? Covered by newspaper.feature: \"Check for Newspaper OBJ download\" 3-66 Able to download a NEWSPAPER object? Covered by newspaper.feature: \"Check for Newspaper OBJ download\" 3-67 Able to search for newly ingested NEWSPAPER object using Islandora simple search? Covered by newspaper.feature: \"Check for Newspaper Objects using simple search\" 3-68 Able to edit NEWSPAPER object's title using the XML form? Covered by newspaper.feature: \"Edit Newspaper object title\" 3-69 Able to search for newly edited NEWSPAPER object's title using Islandora simple search? Covered by newspaper.feature: \"Edit Newspaper object title\" 3-70 Able to edit the Item Label of an NEWSPAPER object's Properties? Covered by newspaper.feature: \"Edit Newspaper object Item Label\" 3-71 Able to search for newly edited Item Label of an NEWSPAPER object's Properties using Islandora simple search? Covered by newspaper.feature: \"Edit Newspaper object Item Label\" 3-72 Able to edit MODS datastream for NEWSPAPER object? Covered by newspaper.feature: \"Replace MODS datastream for Newspaper Object\" 3-73 Able to search for newly edited MODS datastream for NEWSPAPER object using Islandora simple search? Covered by newspaper.feature: \"Replace MODS datastream for Newspaper Object\" 3-74 Able to delete TN derivative for NEWSPAPER object? Covered by newspaper.feature: \"Delete TN derivative for Newspaper Object\" 3-75 Able to regenerate all derivatives for NEWSPAPER object? Covered by newspaper.feature: \"Regenerate all derivatives for Newspaper Object\"","title":"Newspaper Content Model"},{"location":"optional-components/automated-testing/#oral-history-content-model","text":"3-76 Able to ingest these test ORAL HISTORY sample objects? Covered by oralhistories.feature: \"Ingest ORAL HISTORIES Sample Object\" 3-77 Able to view a ORAL HISTORY object? Covered by oralhistories.feature: \"Check for ORAL HISTORIES OBJ download\" 3-78 Able to download a ORAL HISTORY object? Covered by oralhistories.feature: \"Check for ORAL HISTORIES OBJ download\" 3-79 Able to search for newly ingested ORAL HISTORY object using Islandora simple search? Covered by oralhistories.feature: \"Check for ORAL HISTORIES Objects using simple search\" 3-80 Able to edit ORAL HISTORY object's title using the XML form? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object title\" 3-81 Able to search for newly edited ORAL HISTORY object's title using Islandora simple search? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object title\" 3-82 Able to edit the Item Label of an ORAL HISTORY object's Properties? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object Item Label\" 3-83 Able to search for newly edited Item Label of an ORAL HISTORY object's Properties using Islandora simple search? Covered by oralhistories.feature: \"Edit ORAL HISTORIES object Item Label\" 3-84 Able to edit MODS datastream for ORAL HISTORY object? Covered by oralhistories.feature: \"Replace MODS datastream for ORAL HISTORIES Object\" 3-85 Able to search for newly edited MODS datastream for ORAL HISTORY object using Islandora simple search? Covered by oralhistories.feature: \"Replace MODS datastream for ORAL HISTORIES Object\" 3-86 Able to delete TN derivative for ORAL HISTORY object? Covered by oralhistories.feature: \"Delete TN derivative for ORAL HISTORIES Object\" 3-87 Able to regenerate all derivatives for ORAL HISTORY object? Covered by oralhistories.feature: \"Regenerate all derivatives for ORAL HISTORIES Object\"","title":"Oral History Content Model"},{"location":"optional-components/automated-testing/#pdf-content-model","text":"3-88 Able to ingest these test PDF sample objects? Covered by pdf.feature: \"Ingest PDF Sample Object\" 3-89 Able to view a PDF object? Covered by pdf.feature: \"Check for PDF OBJ download\" 3-90 Able to download a PDF object? Covered by pdf.feature: \"Check for PDF OBJ download\" 3-91 Able to search for newly ingested PDF object using Islandora simple search? Covered by pdf.feature: \"Check for PDF Objects using simple search\" 3-92 Able to edit PDF object's title using the XML form? Covered by pdf.feature: \"Edit PDF object title\" 3-93 Able to search for newly edited PDF object's title using Islandora simple search? Covered by pdf.feature: \"Edit PDF object title\" 3-94 Able to edit the Item Label of an PDF object's Properties? Covered by pdf.feature: \"Edit PDF object Item Label\" 3-95 Able to search for newly edited Item Label of an PDF object's Properties using Islandora simple search? Covered by pdf.feature: \"Edit PDF object Item Label\" 3-96 Able to edit MODS datastream for PDF object? Covered by pdf.feature: \"Replace MODS datastream for PDF Object\" 3-97 Able to search for newly edited MODS datastream for PDF object using Islandora simple search? Covered by pdf.feature: \"Replace MODS datastream for PDF Object\" 3-98 Able to delete TN derivative for PDF object? Covered by pdf.feature: \"Delete TN derivative for PDF Object\" 3-99 Able to regenerate all derivatives for PDF object? Covered by pdf.feature: \"Regenerate all derivatives for PDF Object\"","title":"PDF Content Model"},{"location":"optional-components/automated-testing/#video-content-model","text":"3-100 Able to ingest these test VIDEO sample objects? Covered by video.feature: \"Ingest Video Sample Object\" 3-101 Able to view a VIDEO object? Covered by video.feature: \"Check for Video OBJ download\" 3-102 Able to download a VIDEO object? Covered by video.feature: \"Check for Video OBJ download\" 3-103 Able to search for newly ingested VIDEO object using Islandora simple search? Covered by video.feature: \"Check for Video Objects using simple search\" 3-104 Able to edit VIDEO object's title using the XML form? Covered by video.feature: \"Edit Video object title\" 3-105 Able to search for newly edited VIDEO object's title using Islandora simple search? Covered by video.feature: \"Edit Video object title\" 3-106 Able to edit the Item Label of an VIDEO object's Properties? Covered by video.feature: \"Edit Video object Item Label\" 3-107 Able to search for newly edited Item Label of an VIDEO object's Properties using Islandora simple search? Covered by video.feature: \"Edit Video object Item Label\" 3-108 Able to edit MODS datastream for VIDEO object? Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-109 Able to search for newly edited MODS datastream for VIDEO object using Islandora simple search? Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-110 Able to replace MODS datastreams Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-111 Able to search for newly replaced MODS datastreams using Islandora simple search? Covered by video.feature: \"Replace MODS datastream for Video Object\" 3-112 Able to delete TN derivative for VIDEO object? Covered by video.feature: \"Delete TN derivative for Video Object\" 3-113 Able to regenerate all derivatives for VIDEO object? Covered by video.feature: \"Regenerate all derivatives for Video Object\"","title":"Video Content Model"},{"location":"optional-components/automated-testing/#warc-content-model","text":"3-114 Able to ingest these test WEB ARCHIVE sample objects? Covered by warc.feature: \"Ingest WARC Sample Object\" 3-115 Able to view a WEB ARCHIVE object? N/A There is no WARC viewer 3-116 Able to download a WEB ARCHIVE object? Covered by warc.feature: \"Check for WARC OBJ download\" 3-117 Able to search for newly ingested WEB ARCHIVE object using Islandora simple search? Covered by warc.feature: \"Check for WARC Objects using simple search\" 3-118 Able to edit WEB ARCHIVE object's title using the XML form? Covered by warc.feature: \"Edit WARC object title\" 3-119 Able to search for newly edited WEB ARCHIVE object's title using Islandora simple search? Covered by warc.feature: \"Edit WARC object title\" 3-120 Able to edit the Item Label of an WEB ARCHIVE object's Properties? Covered by warc.feature: \"Edit WARC object Item Label\" 3-121 Able to search for newly edited Item Label of an WEB ARCHIVE object's Properties using Islandora simple search? Covered by warc.feature: \"Edit WARC object Item Label\" 3-122 Able to edit MODS datastream for WEB ARCHIVE object? Covered by warc.feature: \"Replace MODS datastream for WARC Object\" 3-123 Able to search for newly edited MODS datastream for WEB ARCHIVE object using Islandora simple search? Covered by warc.feature: \"Replace MODS datastream for WARC Object\" 3-124 Able to delete TN derivative for WEB ARCHIVE object? Covered by warc.feature: \"Delete TN derivative for WARC Object\" 3-125 Able to regenerate all derivatives for WEB ARCHIVE object? Covered by warc.feature: \"Regenerate all derivatives for WARC Object\"","title":"WARC Content Model"},{"location":"optional-components/automated-testing/#maintenance-tasks","text":"4-1 Able to view the expected number of data objects? N/A 4-2 Able to run Drupal cron manuall as signed in user? Covered by )-sile-drupal.feature: \"Run cron\" 4-3 Confirm that Drupal cron runs automatically as scheduled? N/A 4-4 Able to view / tail logs from within containers N/A 4-5 Able to view / tail logs on Host server? N/A 4-6 Able to run a Solr search from website and find ingested objects? Covered above 4-7 Able to reindex / rebuild Fedora RI? * 4-8 Able to reindex / rebuild Fedora db MYSQL? 4-9 Able to reindex SOLR?","title":"MAINTENANCE TASKS"},{"location":"optional-components/automated-testing/#additional-testing","text":"5-1 Able to create single host server with multi-sites (link to Ben's instructions) WONTFIX - ISLE doesn't support this anymore 5-2 Able to use mounts instead of Docker N/A - To be covered by one or more CI configurations 5-3 Able to create new config directories for services N/A - To be covered by one or more CI configurations","title":"Additional Testing"},{"location":"optional-components/automated-testing/#fedora-able-to-override-existing-settings-for","text":"5-4 - ./config/fedora/akubra-llstore.xml:/usr/local/fedora/server/config/spring/akubra-llstore.xml (Allows for deeper hash directories for larger Fedora collections) N/A - To be covered by one or more CI configurations 5-5 foxmltoSolr.xslt N/A - To be covered by one or more CI configurations 5-6 islandora_transforms N/A - To be covered by one or more CI configurations","title":"FEDORA - Able to Override Existing Settings For:"},{"location":"optional-components/automated-testing/#solr-able-to-override-existing-settings-for","text":"5-7 schema.xml N/A - To be covered by one or more CI configurations 5-8 solrconfig.xml N/A - To be covered by one or more CI configurations 5-9 Use IMI for sample ingest testing to speed things up N/A 5-10 Test bind mounting - with nested ancestors set to true foxmltoSolr.xslt and all islandora_transforms, along with solrconfig and schemas N/A - To be covered by one or more CI configurations","title":"SOLR - Able to Override Existing Settings For:"},{"location":"optional-components/automated-testing/#additional-resources","text":"","title":"Additional Resources"},{"location":"optional-components/blazegraph/","text":"Replacing Mulgara with Blazegraph for High-Performance Low-Level Storage Use Cases & User Stories As a repository administrator, I expect to be able to ingest millions of objects into an ISLE-based system without incurring significant performance degradation. New Functionality The new isle-blazegraph image was built using Blazegraph\u2122 which is a ultra high-performance graph database supporting Apache TinkerPop\u2122 and RDF/SPARQL APIs. It supports up to 50 Billion edges on a single machine. Formerly known as BigData. The intended use is solely for maintaining performant support of large Fedora repositories containing millions of objects. Why use this component with ISLE? Islandora users who have Fedora repositories with over 600K~ objects ingested have reported issues with using the default Mulgara triplestore used for indexing objects ingested into the Fedora repository. These issues include crashes, extreme performance slowdowns, system timeouts and more. Blazegraph is used to replace Mulgara as the triplestore and to deliver a higher level of performance for larger Fedora repositories. Please note the threshold given above for object count is an compilation of the anecdotal ranges gathered by the Islandora community. In some cases the number is as low as 600K~ when end users report challenges, others haven't encountered issues until the 1 million object count. How can I tell how many Fedora objects I have to determine if I should use this component? Walkthrough on getting triple counts. (TO DO) A new Fedora image that has slight image and functional changes is required to be used in tandem with Blazegraph. These image changes are primarily edits to the fedora.fcg file to use Blazegraph instead of Mulgara. Additionally, a new confd configuration within the Fedora image and linked environmental variable has been added to the .env to allow users to \"toggle\" between Blazegraph and Mulgara as desired. In the event a user toggles between either desired triplestore, a reindex of the Fedora repository is required. With Fedora repositories of 600K+ objects or more, the indexing process will take double-digit hours to days depending on the complexity of the object relationships, ontology, etc. No new software is required to be installed on the ISLE host machine, only new Docker containers, images and configurations are added to the ISLE platform. System Requirements ISLE release version 1.4.2 git clone https://github.com/Islandora-Collaboration-Group/ISLE.git ISLE Images Service Repository Tag Apache islandoracollabgroup/isle-apache 1.4.2 Blazegraph islandoracollabgroup/isle-blazegraph 1.4.2 Fedora islandoracollabgroup/isle-fedora 1.4.2 Image-services islandoracollabgroup/isle-imageservices 1.4.2 MySQL islandoracollabgroup/isle-mysql 1.4.2 Portainer portainer/portainer latest Solr islandoracollabgroup/isle-solr 1.4.2 Traefik traefik/traefik 1.7.9 Additional systems overhead, including: Add an additional 2 GB RAM in total ISLE Host memory for Blazegraph to run Plan on an additional 25-100+ GB disk space for \"big_data\" resource index persistence if running on Staging and/or Production ISLE instances. This index ( /var/bigdata/bigdata.jnl ) will grow quickly overtime and file sizes of over 25GB or more are possible with Fedora repositories that have over 1 million objects. To persist this file and directory in a bind-mount instead of a Docker volume, an edit will need to be made to the docker-compose.yml file in the blazegraph service, volume section. Change isle-blazegraph-data to your ISLE Host system specific bind-mount path. Example: - /mnt/isle-blazegraph-data:/var/bigdata This disk should be a separate data disk that should be 25-100+ GB in capacity. Plan on resizing this disk when using Blazegraph with large Fedora repositories of over 600K+ of objects. Adoption Process Overview The installation instructions below will walk you through how to setup and run the optional Blazegraph container for use as an replacement triplestore for Fedora repositories with 600K+ of objects on either an ISLE demo or local instance. You'll start by backing up all important data as needed. You'll stop any running containers You'll download ISLE images including a new ISLE image called isle-blazegraph You'll make additional edits and modifications to the following ISLE configuration files: docker-compose.local.yml local.env You'll restart your containers with the new services having been added and configured. You'll re-index your Fedora Resource & SQL indices and ensure that the new Blazegraph triplestore is displaying triples. You can optionally use and/or setup the new TICK stack to monitor this container and service on Staging and Production instances. Installation Assumptions Prior to installation, end user will have a running ISLE system using the current release of 1.4.2 images. This installation process will give the functionality as stated in the Systems Requirements image table above for Blazegraph testing and even TICK stack usage. Assumes you're prepared to configure your ISLE system to use Blazegraph instead of the default Mulgara triplestore. Assumes the new Blazegraph port 8084 will not be open to the public Internet only to select trusted administrators. Installation Instructions Shut down your running containers if any. Precautionary step. docker-compose down Within the environment (.env files e.g. demo.env, local.env etc) there is a new block of ENV variables to use. If using Blazegraph, you will have to change the FEDORA_RESOURCE_INDEX=mulgara to FEDORA_RESOURCE_INDEX=blazegraph Whether using Mulgara or Blazegraph, please leave the FEDORA_WEBAPP_HOME value to the default below. Example: ### Fedora Resource Index # # Only one of two values (mulgara) or (blazegraph) can be used below for FEDORA_RESOURCE_INDEX # By DEFAULT the value of (mulgara) is used to set which type of Fedora Resource Index can be used # https://wiki.lyrasis.org/display/FEDORA38/Resource+Index # If you would like to use blazegraph instead, you'll also need to use its image # https://github.com/Islandora-Collaboration-Group/isle-blazegraph # Please note: If you mistype or leave this value blank, more than likely Fedora won't work properly. FEDORA_RESOURCE_INDEX=mulgara # Set below as a variable for Fedora to start up properly, helps with env-set.sh FEDORA_WEBAPP_HOME=/usr/local/tomcat/webapps/fedora ## End Fedora Repository On the demo and/or local instance, you will have to uncomment the volume at the bottom of the docker-compose.demo.yml or docker-compose.local.yml file to use Blazegraph. Pull down the new isle images docker-compose pull Spin up new containers docker-compose up -d Wait a few minutes ( 3-8 depending on the size of your site ) for the site and services to come up. Check & Rebuild Fedora When Using Blazegraph Question: Does Fedora start up properly? Navigate to your domain e.g. http://yourdomain:8081/manager/html Login using the correct admin / tomcat pw ) (check tomcat.env) Click on the Fedora link or navigate to http://yourdomain:8081/fedora/objects and click search. Objects might appear if working but they should only be a small amount of content models at this point. If you have switched to Blazegraph, then you'll need to re-index the Fedora repository so that the new Blazegraph triplestore is used instead of the previously used Mulgara triplestore. WARNING - With Fedora repositories of 600K+ objects or more, these indexing processes will take double-digit hours to days depending on the complexity of the object relationships, ontology, etc. when re-indexing on Staging or Production systems. When re-indexing in this manner, we recommend the use of the screen program which will allow an end-user to disengage from a long continuous bash session and terminal based command without breaking the process. ( optional and typically used more often in a Staging and/or Production environment ). You may need to install screen on your ISLE host server. Skip this if using on a demo or local instance. Ubuntu - sudo apt-get install screen CentOS - sudo yum install screen Once installed simply run screen in your terminal. You might be instructed to hit the Spacebar or the Return key to proceed with the screen session. docker-exec -it isle-fedora-ld bash ( Example for demo and/or local ) cd utility_scripts ./rebuildFedora.sh This process should start spewing out a large column of data To disengage hold down the control key and the a key, then tap the d key. This will get you out of the screen session. To check on the progress, simply type screen -r , check the progress and then disengage again. Once that is complete run the SOLR reindex script docker-exec -it isle-fedora-ld bash -c \"/bin/sh /utility_scripts/updateSolrIndex.sh Verify it's working: Navigate to \"https://yourdomain\" and you can still see the Drupal site. This may take a few minutes depending on the size of the site. Check the Blazegraph Triples Count Checking the triples count is an easy way to double-check if objects are being indexed properly and added to Blazegraph's triplestore. To check the triples count in Blazegraph: Navigate to the Blazegraph Admin panel http://isle.localdomain:8084/blazegraph/#query Replace isle.localdomain with your real domain when using in a Local, Staging or Production Copy and paste the following query into the field with the text ( Input a SPARQL query ): SELECT (COUNT(*) AS ?triples) WHERE {?s ?p ?o} Click the Execute button. The output at the bottom will be a numerical value that will look something like: ----------- | triples | | ------- | | 8280864 | ----------- This value should increase as more objects are ingested and indexed by Fedora. The difference is that instead of these values being in the previously used Mulgara triplestore, they are now handled by Blazegraph. Using Blazegraph & the TICK Stack If you're pushing log events to TICK , add this snippet of code below ( logging instructions ) to the bottom of every ISLE service within your docker-compose.yml file. logging: driver: syslog options: tag: \"{{.Name}}\" Example: Example is for a Staging instance isle-blazegraph: image: islandoracollabgroup/isle-blazegraph:1.5.0 container_name: isle-blazegraph-${CONTAINER_SHORT_ID} environment: - JAVA_MAX_MEM=4096M - JAVA_MIN_MEM=1024M env_file: - staging.env networks: - isle-internal ports: - \"8084:8080\" volumes: - isle-blazegraph-data:/var/bigdata logging: driver: syslog options: tag: \"{{.Name}}\" Uninstallation Instructions Comment out the isle-blazegraph service again within your docker-compose.*.yml file Change the the blazegraph back to mulgara within your local.env or demo.env file Start up the ISLE containers again. Re-index Fedora following the Fedora re-indexing steps provided in the Check & Rebuild Fedora when using Blazegraph section. Need Help? We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here. Additional Resources Blazegraph Documentation","title":"Blazegraph"},{"location":"optional-components/blazegraph/#replacing-mulgara-with-blazegraph-for-high-performance-low-level-storage","text":"","title":"Replacing Mulgara with Blazegraph for High-Performance Low-Level Storage"},{"location":"optional-components/blazegraph/#use-cases-user-stories","text":"As a repository administrator, I expect to be able to ingest millions of objects into an ISLE-based system without incurring significant performance degradation.","title":"Use Cases &amp; User Stories"},{"location":"optional-components/blazegraph/#new-functionality","text":"The new isle-blazegraph image was built using Blazegraph\u2122 which is a ultra high-performance graph database supporting Apache TinkerPop\u2122 and RDF/SPARQL APIs. It supports up to 50 Billion edges on a single machine. Formerly known as BigData. The intended use is solely for maintaining performant support of large Fedora repositories containing millions of objects. Why use this component with ISLE? Islandora users who have Fedora repositories with over 600K~ objects ingested have reported issues with using the default Mulgara triplestore used for indexing objects ingested into the Fedora repository. These issues include crashes, extreme performance slowdowns, system timeouts and more. Blazegraph is used to replace Mulgara as the triplestore and to deliver a higher level of performance for larger Fedora repositories. Please note the threshold given above for object count is an compilation of the anecdotal ranges gathered by the Islandora community. In some cases the number is as low as 600K~ when end users report challenges, others haven't encountered issues until the 1 million object count. How can I tell how many Fedora objects I have to determine if I should use this component? Walkthrough on getting triple counts. (TO DO) A new Fedora image that has slight image and functional changes is required to be used in tandem with Blazegraph. These image changes are primarily edits to the fedora.fcg file to use Blazegraph instead of Mulgara. Additionally, a new confd configuration within the Fedora image and linked environmental variable has been added to the .env to allow users to \"toggle\" between Blazegraph and Mulgara as desired. In the event a user toggles between either desired triplestore, a reindex of the Fedora repository is required. With Fedora repositories of 600K+ objects or more, the indexing process will take double-digit hours to days depending on the complexity of the object relationships, ontology, etc. No new software is required to be installed on the ISLE host machine, only new Docker containers, images and configurations are added to the ISLE platform.","title":"New Functionality"},{"location":"optional-components/blazegraph/#system-requirements","text":"ISLE release version 1.4.2 git clone https://github.com/Islandora-Collaboration-Group/ISLE.git","title":"System Requirements"},{"location":"optional-components/blazegraph/#isle-images","text":"Service Repository Tag Apache islandoracollabgroup/isle-apache 1.4.2 Blazegraph islandoracollabgroup/isle-blazegraph 1.4.2 Fedora islandoracollabgroup/isle-fedora 1.4.2 Image-services islandoracollabgroup/isle-imageservices 1.4.2 MySQL islandoracollabgroup/isle-mysql 1.4.2 Portainer portainer/portainer latest Solr islandoracollabgroup/isle-solr 1.4.2 Traefik traefik/traefik 1.7.9 Additional systems overhead, including: Add an additional 2 GB RAM in total ISLE Host memory for Blazegraph to run Plan on an additional 25-100+ GB disk space for \"big_data\" resource index persistence if running on Staging and/or Production ISLE instances. This index ( /var/bigdata/bigdata.jnl ) will grow quickly overtime and file sizes of over 25GB or more are possible with Fedora repositories that have over 1 million objects. To persist this file and directory in a bind-mount instead of a Docker volume, an edit will need to be made to the docker-compose.yml file in the blazegraph service, volume section. Change isle-blazegraph-data to your ISLE Host system specific bind-mount path. Example: - /mnt/isle-blazegraph-data:/var/bigdata This disk should be a separate data disk that should be 25-100+ GB in capacity. Plan on resizing this disk when using Blazegraph with large Fedora repositories of over 600K+ of objects.","title":"ISLE Images"},{"location":"optional-components/blazegraph/#adoption-process-overview","text":"The installation instructions below will walk you through how to setup and run the optional Blazegraph container for use as an replacement triplestore for Fedora repositories with 600K+ of objects on either an ISLE demo or local instance. You'll start by backing up all important data as needed. You'll stop any running containers You'll download ISLE images including a new ISLE image called isle-blazegraph You'll make additional edits and modifications to the following ISLE configuration files: docker-compose.local.yml local.env You'll restart your containers with the new services having been added and configured. You'll re-index your Fedora Resource & SQL indices and ensure that the new Blazegraph triplestore is displaying triples. You can optionally use and/or setup the new TICK stack to monitor this container and service on Staging and Production instances.","title":"Adoption Process Overview"},{"location":"optional-components/blazegraph/#installation","text":"","title":"Installation"},{"location":"optional-components/blazegraph/#assumptions","text":"Prior to installation, end user will have a running ISLE system using the current release of 1.4.2 images. This installation process will give the functionality as stated in the Systems Requirements image table above for Blazegraph testing and even TICK stack usage. Assumes you're prepared to configure your ISLE system to use Blazegraph instead of the default Mulgara triplestore. Assumes the new Blazegraph port 8084 will not be open to the public Internet only to select trusted administrators.","title":"Assumptions"},{"location":"optional-components/blazegraph/#installation-instructions","text":"Shut down your running containers if any. Precautionary step. docker-compose down Within the environment (.env files e.g. demo.env, local.env etc) there is a new block of ENV variables to use. If using Blazegraph, you will have to change the FEDORA_RESOURCE_INDEX=mulgara to FEDORA_RESOURCE_INDEX=blazegraph Whether using Mulgara or Blazegraph, please leave the FEDORA_WEBAPP_HOME value to the default below. Example: ### Fedora Resource Index # # Only one of two values (mulgara) or (blazegraph) can be used below for FEDORA_RESOURCE_INDEX # By DEFAULT the value of (mulgara) is used to set which type of Fedora Resource Index can be used # https://wiki.lyrasis.org/display/FEDORA38/Resource+Index # If you would like to use blazegraph instead, you'll also need to use its image # https://github.com/Islandora-Collaboration-Group/isle-blazegraph # Please note: If you mistype or leave this value blank, more than likely Fedora won't work properly. FEDORA_RESOURCE_INDEX=mulgara # Set below as a variable for Fedora to start up properly, helps with env-set.sh FEDORA_WEBAPP_HOME=/usr/local/tomcat/webapps/fedora ## End Fedora Repository On the demo and/or local instance, you will have to uncomment the volume at the bottom of the docker-compose.demo.yml or docker-compose.local.yml file to use Blazegraph. Pull down the new isle images docker-compose pull Spin up new containers docker-compose up -d Wait a few minutes ( 3-8 depending on the size of your site ) for the site and services to come up.","title":"Installation Instructions"},{"location":"optional-components/blazegraph/#check-rebuild-fedora-when-using-blazegraph","text":"Question: Does Fedora start up properly? Navigate to your domain e.g. http://yourdomain:8081/manager/html Login using the correct admin / tomcat pw ) (check tomcat.env) Click on the Fedora link or navigate to http://yourdomain:8081/fedora/objects and click search. Objects might appear if working but they should only be a small amount of content models at this point. If you have switched to Blazegraph, then you'll need to re-index the Fedora repository so that the new Blazegraph triplestore is used instead of the previously used Mulgara triplestore. WARNING - With Fedora repositories of 600K+ objects or more, these indexing processes will take double-digit hours to days depending on the complexity of the object relationships, ontology, etc. when re-indexing on Staging or Production systems. When re-indexing in this manner, we recommend the use of the screen program which will allow an end-user to disengage from a long continuous bash session and terminal based command without breaking the process. ( optional and typically used more often in a Staging and/or Production environment ). You may need to install screen on your ISLE host server. Skip this if using on a demo or local instance. Ubuntu - sudo apt-get install screen CentOS - sudo yum install screen Once installed simply run screen in your terminal. You might be instructed to hit the Spacebar or the Return key to proceed with the screen session. docker-exec -it isle-fedora-ld bash ( Example for demo and/or local ) cd utility_scripts ./rebuildFedora.sh This process should start spewing out a large column of data To disengage hold down the control key and the a key, then tap the d key. This will get you out of the screen session. To check on the progress, simply type screen -r , check the progress and then disengage again. Once that is complete run the SOLR reindex script docker-exec -it isle-fedora-ld bash -c \"/bin/sh /utility_scripts/updateSolrIndex.sh Verify it's working: Navigate to \"https://yourdomain\" and you can still see the Drupal site. This may take a few minutes depending on the size of the site.","title":"Check &amp; Rebuild Fedora When Using Blazegraph"},{"location":"optional-components/blazegraph/#check-the-blazegraph-triples-count","text":"Checking the triples count is an easy way to double-check if objects are being indexed properly and added to Blazegraph's triplestore. To check the triples count in Blazegraph: Navigate to the Blazegraph Admin panel http://isle.localdomain:8084/blazegraph/#query Replace isle.localdomain with your real domain when using in a Local, Staging or Production Copy and paste the following query into the field with the text ( Input a SPARQL query ): SELECT (COUNT(*) AS ?triples) WHERE {?s ?p ?o} Click the Execute button. The output at the bottom will be a numerical value that will look something like: ----------- | triples | | ------- | | 8280864 | ----------- This value should increase as more objects are ingested and indexed by Fedora. The difference is that instead of these values being in the previously used Mulgara triplestore, they are now handled by Blazegraph.","title":"Check the Blazegraph Triples Count"},{"location":"optional-components/blazegraph/#using-blazegraph-the-tick-stack","text":"If you're pushing log events to TICK , add this snippet of code below ( logging instructions ) to the bottom of every ISLE service within your docker-compose.yml file. logging: driver: syslog options: tag: \"{{.Name}}\" Example: Example is for a Staging instance isle-blazegraph: image: islandoracollabgroup/isle-blazegraph:1.5.0 container_name: isle-blazegraph-${CONTAINER_SHORT_ID} environment: - JAVA_MAX_MEM=4096M - JAVA_MIN_MEM=1024M env_file: - staging.env networks: - isle-internal ports: - \"8084:8080\" volumes: - isle-blazegraph-data:/var/bigdata logging: driver: syslog options: tag: \"{{.Name}}\"","title":"Using Blazegraph &amp; the TICK Stack"},{"location":"optional-components/blazegraph/#uninstallation-instructions","text":"Comment out the isle-blazegraph service again within your docker-compose.*.yml file Change the the blazegraph back to mulgara within your local.env or demo.env file Start up the ISLE containers again. Re-index Fedora following the Fedora re-indexing steps provided in the Check & Rebuild Fedora when using Blazegraph section.","title":"Uninstallation Instructions"},{"location":"optional-components/blazegraph/#need-help","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Need Help?"},{"location":"optional-components/blazegraph/#additional-resources","text":"Blazegraph Documentation","title":"Additional Resources"},{"location":"optional-components/components/","text":"Overview: Optional ISLE Components These ISLE components are optional, powerful, and are built to be modular such that they can be installed independently or can work together. Automated Testing : Utilize and extend ISLE's test suite for use with your institution's repository. Blazegraph : High-performance replacement triplestore for larger Fedora repositories. Loc.gov Proxy : Creates a local cache of Library of Congress standards to improve performance, especially during high-volume ingests. Matomo : Usage analytics package. TICK Stack : A suite of open-source applications that are used together for the storing, visualization and monitoring of data (time series metrics) gathered from running systems. Varnish : HTTP accelerator and caching designed for content-heavy dynamic web sites.","title":"Overview"},{"location":"optional-components/components/#overview-optional-isle-components","text":"These ISLE components are optional, powerful, and are built to be modular such that they can be installed independently or can work together. Automated Testing : Utilize and extend ISLE's test suite for use with your institution's repository. Blazegraph : High-performance replacement triplestore for larger Fedora repositories. Loc.gov Proxy : Creates a local cache of Library of Congress standards to improve performance, especially during high-volume ingests. Matomo : Usage analytics package. TICK Stack : A suite of open-source applications that are used together for the storing, visualization and monitoring of data (time series metrics) gathered from running systems. Varnish : HTTP accelerator and caching designed for content-heavy dynamic web sites.","title":"Overview: Optional ISLE Components"},{"location":"optional-components/loc-proxy/","text":"Library of Congress Standards Proxy for High Volume Ingest Installation Assumptions Previously installed and running Local, Production and Staging ISLE Host systems are in place already You'll need to use the ISLE images tagged as 1.3.0 and higher. See also: Resource Allocation: High Volume Ingest Installation Instructions To cache the Library of Congress (LOC) MODS standards, please take these steps below: Shut down all running ISLE containers. Edit 1: Add a New Apache Alias Within your docker-compose.*.yml , add the following alias code snippet to the Apache service section under the networks: area so that: Code snippet: aliases: - www.loc.gov Example: networks: isle-internal: depends_on: becomes Example: networks: isle-internal: aliases: - www.loc.gov depends_on: Please note the alignment and positioning of the snippet. Edit 2: Add a New Apache Bind Mount There is a new directory within the ISLE config/apache/ directory called loc_proxy which contains a file named loc-proxy-cache.conf . This file is a new Apache site configuration to enable caching and proxying for https://www.loc.gov/standards . Within your docker-compose.*.yml , add the following bind-mount code snippet to the Apache service section under the volumes area so that: Code snippet: - ./config/apache/loc-proxy-cache.conf:/etc/apache2/sites-enabled/loc-proxy-cache.conf Example on a Production system # Ensure that the values from the production.env have been inserted in the corresponding ISLE configuration sections of the settings.production.php - ./config/apache/settings_php/settings.production.php:/var/www/html/sites/default/settings.php ## (Optional): Uncomment line below to allow bind mounting of the php.ini file for editing of php memory, upload and max_post values. #- ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini becomes Example on a Production system # Ensure that the values from the production.env have been inserted in the corresponding ISLE configuration sections of the settings.production.php - ./config/apache/settings_php/settings.production.php:/var/www/html/sites/default/settings.php ## (Optional): Uncomment line below to allow bind mounting of the php.ini file for editing of php memory, upload and max_post values. #- ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini - ./config/apache/loc-proxy-cache.conf:/etc/apache2/sites-enabled/loc-proxy-cache.conf Please note: The examples above are for a Production system but this can be added to any ISLE environment. Edit 3: Add a New Apache Host for www.loc.gov Within your docker-compose.*.yml , add the following host code snippet to the Apache service section under the labels area so that: Code snippet: ,Host:www-loc.gov Example on a Production system labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" becomes Example on a Production system labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN},Host:www-loc.gov; PathPrefix: /, /cantaloupe\" Please note: There is no space between ${BASE_DOMAIN},Host:www-loc.gov; Start up the ISLE Docker containers again. docker-compose up -d Testing Shell into the Apache container docker exec -it isle-apache-{{ container id }} bash curl -O http://www.loc.gov/standards/mods/xml.xsd curl http://www.loc.gov/standards/mods/xml.xsd ls -lha /var/cache/apache2/mod_cache_disk/ - Is there a new hash created? echo \"TEST 123 TEST 123\" >> /var/cache/apache2/mod_cache_disk/Fr/m6/gz8YIqKWS_tQjfBGgw.header.vary/HM/wl/M1FJKOuWg0YokaKfCA.data - Check if the file is being pulled locally from the cache by editing it. curl http://www.loc.gov/standards/mods/xml.xsd - you should now see TEST 123 TEST 123 at the bottom of the file. Need Help? We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Loc.gov Proxy"},{"location":"optional-components/loc-proxy/#library-of-congress-standards-proxy-for-high-volume-ingest","text":"","title":"Library of Congress Standards Proxy for High Volume Ingest"},{"location":"optional-components/loc-proxy/#installation","text":"","title":"Installation"},{"location":"optional-components/loc-proxy/#assumptions","text":"Previously installed and running Local, Production and Staging ISLE Host systems are in place already You'll need to use the ISLE images tagged as 1.3.0 and higher. See also: Resource Allocation: High Volume Ingest","title":"Assumptions"},{"location":"optional-components/loc-proxy/#installation-instructions","text":"To cache the Library of Congress (LOC) MODS standards, please take these steps below: Shut down all running ISLE containers.","title":"Installation Instructions"},{"location":"optional-components/loc-proxy/#edit-1-add-a-new-apache-alias","text":"Within your docker-compose.*.yml , add the following alias code snippet to the Apache service section under the networks: area so that: Code snippet: aliases: - www.loc.gov Example: networks: isle-internal: depends_on: becomes Example: networks: isle-internal: aliases: - www.loc.gov depends_on: Please note the alignment and positioning of the snippet.","title":"Edit 1: Add a New Apache Alias"},{"location":"optional-components/loc-proxy/#edit-2-add-a-new-apache-bind-mount","text":"There is a new directory within the ISLE config/apache/ directory called loc_proxy which contains a file named loc-proxy-cache.conf . This file is a new Apache site configuration to enable caching and proxying for https://www.loc.gov/standards . Within your docker-compose.*.yml , add the following bind-mount code snippet to the Apache service section under the volumes area so that: Code snippet: - ./config/apache/loc-proxy-cache.conf:/etc/apache2/sites-enabled/loc-proxy-cache.conf Example on a Production system # Ensure that the values from the production.env have been inserted in the corresponding ISLE configuration sections of the settings.production.php - ./config/apache/settings_php/settings.production.php:/var/www/html/sites/default/settings.php ## (Optional): Uncomment line below to allow bind mounting of the php.ini file for editing of php memory, upload and max_post values. #- ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini becomes Example on a Production system # Ensure that the values from the production.env have been inserted in the corresponding ISLE configuration sections of the settings.production.php - ./config/apache/settings_php/settings.production.php:/var/www/html/sites/default/settings.php ## (Optional): Uncomment line below to allow bind mounting of the php.ini file for editing of php memory, upload and max_post values. #- ./config/apache/php_ini/php.production.ini:/etc/php/7.1/apache2/php.ini - ./config/apache/loc-proxy-cache.conf:/etc/apache2/sites-enabled/loc-proxy-cache.conf Please note: The examples above are for a Production system but this can be added to any ISLE environment.","title":"Edit 2: Add a New Apache Bind Mount"},{"location":"optional-components/loc-proxy/#edit-3-add-a-new-apache-host-for-wwwlocgov","text":"Within your docker-compose.*.yml , add the following host code snippet to the Apache service section under the labels area so that: Code snippet: ,Host:www-loc.gov Example on a Production system labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" becomes Example on a Production system labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN},Host:www-loc.gov; PathPrefix: /, /cantaloupe\" Please note: There is no space between ${BASE_DOMAIN},Host:www-loc.gov; Start up the ISLE Docker containers again. docker-compose up -d","title":"Edit 3: Add a New Apache Host for www.loc.gov"},{"location":"optional-components/loc-proxy/#testing","text":"Shell into the Apache container docker exec -it isle-apache-{{ container id }} bash curl -O http://www.loc.gov/standards/mods/xml.xsd curl http://www.loc.gov/standards/mods/xml.xsd ls -lha /var/cache/apache2/mod_cache_disk/ - Is there a new hash created? echo \"TEST 123 TEST 123\" >> /var/cache/apache2/mod_cache_disk/Fr/m6/gz8YIqKWS_tQjfBGgw.header.vary/HM/wl/M1FJKOuWg0YokaKfCA.data - Check if the file is being pulled locally from the cache by editing it. curl http://www.loc.gov/standards/mods/xml.xsd - you should now see TEST 123 TEST 123 at the bottom of the file.","title":"Testing"},{"location":"optional-components/loc-proxy/#need-help","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Need Help?"},{"location":"optional-components/matomo/","text":"Matomo - Analytics Package Installation Assumptions Previously installed and running Local, Production and Staging ISLE Host systems are in place already. You'll need to use the ISLE images tagged as 1.3.0 and higher. Installation Instructions Adapted from @DiegoPino's original example ISLE config: https://github.com/Islandora-Collaboration-Group/isle_matomo_docker Edit 1: Modify Docker-Compose & .env files Create a data/matomo directory to persist your Matomo application. You will probably want to put this in a git repo if you're deploying to multiple servers and don't want to have to re-install plugins/etc for each environment. We recommend using an appropriate .gitignore before checking that in (e.g. https://raw.githubusercontent.com/matomo-org/matomo/4.x-dev/.gitignore) Copy the files in config/matomo into a new directory data/matomo/config to seed your Matomo application's config. You'll want to commit this to your new Git repo. If you are going to use the instructions below to run Matomo through your main domain (via a /matomo proxy URL) you will need to add proxy_uri_header = 1 to your config/config.ini.php file's \"General\" section. Within your docker-compose.*.yml , add the following blocks to enable new services: matomo: image: matomo:3-fpm container_name: isle-matomo-${CONTAINER_SHORT_ID} env_file: - .env networks: isle-internal: links: - mysql depends_on: - mysql - traefik volumes: - ./data/matomo/html/:/var/www/html labels: - traefik.enable=false matomo-nginx: image: nginx container_name: isle-matomo-nginx-${CONTAINER_SHORT_ID} volumes: - ./config/matomo-nginx/ngix.conf:/etc/nginx/nginx.conf:ro - ./data/matomo/html/:/var/www/html links: - matomo networks: - isle-internal ports: - \"9002:9020\" labels: - traefik.enable=true - traefik.backend=matomo - traefik.frontend.entryPoints=https - traefik.port=9020 - traefik.frontend.passHostHeader=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefixStrip: /matomo;\" - traefik.docker.network==${COMPOSE_PROJECT_NAME}_isle-internal whoami: image: containous/whoami # A container that exposes an API to show its IP address container_name: isle-whoami-${CONTAINER_SHORT_ID} labels: - \"traefik.frontend.rule=Host:whoami.${BASE_DOMAIN};\" Your traefik service ports definition needs modifying like this: ports: - \"80:80\" - target: 443 published: 443 protocol: tcp mode: host - \"8080:8080\" Your traefik labels definition needs an extra line before the line selecting port 8080: - traefik.frontend.passHostHeader=true Your apache service needs to have any PathPrefix removed from the frontendrule. It was probably like this: - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" So now this rule should be changed such that apache doesn't intercept /matomo requests through the main domain. This new edit shouldn't interfere with other ISLE operations: - \"traefik.frontend.rule=Host:${BASE_DOMAIN};\" Start up the ISLE Docker containers again. docker-compose up -d Install and Configure Matomo Create your new Matomo database and call it matomo_db . Drush should be able to do this, e.g. drush sql-create --db-su=\"root\" --db-su-pw=\"MYQSL_ROOT_PWD\" --db-url=\"mysql://DRUPAL_DB_USER:DRUPAL_DB_PWD@mysql/matomo_db\" . If you use a different method, ensure that you make a database user and password to access the database rather than using root credentials below. Add <yourdomain> to your /etc/hosts file and visit that URL. You should see a Matomo install dialog at https://<yourdomain>/matomo . Additional support may be found here: https://matomo.org/docs/installation/ Use the following values for Database Setup: Database Server: \"mysql\" Login: the value of DRUPAL_DB_USER in your local.env file Password: the value of DRUPAL_DB_PASS in your local.env file Database Name: \"matomo_db\" Table Prefix: \"matomo_\" Adapter: PDO\\MYSQL This creates files in a config folder and you'll need to do this for each environment or manually copy (or use Git to sync) those files between environments. Click \"Next\" a couple times until you get to the \"Super User\" creation page. Enter (and save!) credentials for your Matomo login. The next screen prompts you to \"Setup a Website\". Enter your website name (\"Islandora\" is good, if you're planning on following the LASIR instructions for integrating with Islandora), the URL you're using for the environment you're in, and a timezone. Select \"Not an Ecommerce site\". The next screen will provide you with a tracking code block. Copy it out for use later, or plan to log into the Matomo dashboard later to fetch it again. Log in. Allow Matomo to update if it wants to. You may have to do this in order to access the settings areas. Don't forget to check in all the new files in your Matomo Git repo, if you're tracking it that way. Configure Islandora to coordinate with Matomo Now you can pick up from here: https://github.com/Islandora-Collaboration-Group/islandora_matomo#setup-matomo-for-this-module Important sub-steps: Create an extra \"website\" if you need to track Authors/Department data. Install the \"Plugin\" for \"Custom Dimensions\" to enable Islandora integration. Add the \"Custom Dimensions\" in the order requested Fetch your API code to paste into Islandora admin. Testing Need Help? We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Matomo Analytics Platform"},{"location":"optional-components/matomo/#matomo-analytics-package","text":"","title":"Matomo - Analytics Package"},{"location":"optional-components/matomo/#installation","text":"","title":"Installation"},{"location":"optional-components/matomo/#assumptions","text":"Previously installed and running Local, Production and Staging ISLE Host systems are in place already. You'll need to use the ISLE images tagged as 1.3.0 and higher.","title":"Assumptions"},{"location":"optional-components/matomo/#installation-instructions","text":"Adapted from @DiegoPino's original example ISLE config: https://github.com/Islandora-Collaboration-Group/isle_matomo_docker","title":"Installation Instructions"},{"location":"optional-components/matomo/#edit-1-modify-docker-compose-env-files","text":"Create a data/matomo directory to persist your Matomo application. You will probably want to put this in a git repo if you're deploying to multiple servers and don't want to have to re-install plugins/etc for each environment. We recommend using an appropriate .gitignore before checking that in (e.g. https://raw.githubusercontent.com/matomo-org/matomo/4.x-dev/.gitignore) Copy the files in config/matomo into a new directory data/matomo/config to seed your Matomo application's config. You'll want to commit this to your new Git repo. If you are going to use the instructions below to run Matomo through your main domain (via a /matomo proxy URL) you will need to add proxy_uri_header = 1 to your config/config.ini.php file's \"General\" section. Within your docker-compose.*.yml , add the following blocks to enable new services: matomo: image: matomo:3-fpm container_name: isle-matomo-${CONTAINER_SHORT_ID} env_file: - .env networks: isle-internal: links: - mysql depends_on: - mysql - traefik volumes: - ./data/matomo/html/:/var/www/html labels: - traefik.enable=false matomo-nginx: image: nginx container_name: isle-matomo-nginx-${CONTAINER_SHORT_ID} volumes: - ./config/matomo-nginx/ngix.conf:/etc/nginx/nginx.conf:ro - ./data/matomo/html/:/var/www/html links: - matomo networks: - isle-internal ports: - \"9002:9020\" labels: - traefik.enable=true - traefik.backend=matomo - traefik.frontend.entryPoints=https - traefik.port=9020 - traefik.frontend.passHostHeader=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefixStrip: /matomo;\" - traefik.docker.network==${COMPOSE_PROJECT_NAME}_isle-internal whoami: image: containous/whoami # A container that exposes an API to show its IP address container_name: isle-whoami-${CONTAINER_SHORT_ID} labels: - \"traefik.frontend.rule=Host:whoami.${BASE_DOMAIN};\" Your traefik service ports definition needs modifying like this: ports: - \"80:80\" - target: 443 published: 443 protocol: tcp mode: host - \"8080:8080\" Your traefik labels definition needs an extra line before the line selecting port 8080: - traefik.frontend.passHostHeader=true Your apache service needs to have any PathPrefix removed from the frontendrule. It was probably like this: - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" So now this rule should be changed such that apache doesn't intercept /matomo requests through the main domain. This new edit shouldn't interfere with other ISLE operations: - \"traefik.frontend.rule=Host:${BASE_DOMAIN};\" Start up the ISLE Docker containers again. docker-compose up -d","title":"Edit 1: Modify Docker-Compose &amp; .env files"},{"location":"optional-components/matomo/#install-and-configure-matomo","text":"Create your new Matomo database and call it matomo_db . Drush should be able to do this, e.g. drush sql-create --db-su=\"root\" --db-su-pw=\"MYQSL_ROOT_PWD\" --db-url=\"mysql://DRUPAL_DB_USER:DRUPAL_DB_PWD@mysql/matomo_db\" . If you use a different method, ensure that you make a database user and password to access the database rather than using root credentials below. Add <yourdomain> to your /etc/hosts file and visit that URL. You should see a Matomo install dialog at https://<yourdomain>/matomo . Additional support may be found here: https://matomo.org/docs/installation/ Use the following values for Database Setup: Database Server: \"mysql\" Login: the value of DRUPAL_DB_USER in your local.env file Password: the value of DRUPAL_DB_PASS in your local.env file Database Name: \"matomo_db\" Table Prefix: \"matomo_\" Adapter: PDO\\MYSQL This creates files in a config folder and you'll need to do this for each environment or manually copy (or use Git to sync) those files between environments. Click \"Next\" a couple times until you get to the \"Super User\" creation page. Enter (and save!) credentials for your Matomo login. The next screen prompts you to \"Setup a Website\". Enter your website name (\"Islandora\" is good, if you're planning on following the LASIR instructions for integrating with Islandora), the URL you're using for the environment you're in, and a timezone. Select \"Not an Ecommerce site\". The next screen will provide you with a tracking code block. Copy it out for use later, or plan to log into the Matomo dashboard later to fetch it again. Log in. Allow Matomo to update if it wants to. You may have to do this in order to access the settings areas. Don't forget to check in all the new files in your Matomo Git repo, if you're tracking it that way.","title":"Install and Configure Matomo"},{"location":"optional-components/matomo/#configure-islandora-to-coordinate-with-matomo","text":"Now you can pick up from here: https://github.com/Islandora-Collaboration-Group/islandora_matomo#setup-matomo-for-this-module Important sub-steps: Create an extra \"website\" if you need to track Authors/Department data. Install the \"Plugin\" for \"Custom Dimensions\" to enable Islandora integration. Add the \"Custom Dimensions\" in the order requested Fetch your API code to paste into Islandora admin.","title":"Configure Islandora to coordinate with Matomo"},{"location":"optional-components/matomo/#testing","text":"","title":"Testing"},{"location":"optional-components/matomo/#need-help","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Need Help?"},{"location":"optional-components/tickstack/","text":"TICK Stack: Dashboard Visualization for Systems Metrics and Logging Events Use Cases & User Stories As a repository administrator, I expect to be able to view real-time and some historic systems/performance metrics without digging around in server logs. As a repository administrator, I should be able to use the dashboard to troubleshoot the repository ( like when it's hanging or objects are slow to load ) As a repository owner/manager, I expect logging to be handled in a way that does not endanger my systems health and performance over time. As a repository owner/manager, I expect to be able to set logging levels for all relevant log streams. As a repository administrator, I expect to be able to view in a web dashboard: Real-time and recent historic systems/performance metrics Real-time and recent historic system and application logs As a repository administrator, I expect to be able to use monitoring tools that do not burden the target server thus I can setup monitoring tools remotely and pull data from the ISLE server for review. New Functionality The \"TICK\" stack is a suite of open-source applications that are used together for the storing, visualization and monitoring of data (time series metrics) gathered from running systems. The TICK stack was created and is developed by Influxdata which is \"...dedicated to open source and truly cares about helping developers get to results faster with less complexity and less code.\" The TICK stack is used with ISLE to: Monitor running systems in Development, Staging or Production Do note that users can monitor ANY system or systems with these tools, not just ISLE-related platforms. Create alerts that can be sent to email, text or Slack\u2122 to warn users, system-administrators of potential issues, storage or memory challenges and much more. As a one-stop \"search-engine\" of log and metric data for all ISLE containers, services and applications, host servers, etc. Help ISLE users to better understand how their systems work, how Islandora works and to greatly improve visibility on applications, services and processes within ISLE The use and setup of TICK within the ISLE platform is as an optional sidecar to ISLE. There are various ways one can setup TICK in general as a software, as services on the ISLE Host server or to be run as Docker containers. TICK is comprised of the following main services and software: T elegraf - a plugin-driven server agent for collecting and sending metrics and events from databases, systems, and IoT sensors. I nfluxdb - the open source time series database is designed to handle high write and query loads and provides a SQL-like query language called InfluxQL for interacting with data. C hronograf - the user interface and administrative component for using templates and libraries to rapidly build dashboards with real-time visualizations. K apacitor - the native data processing engine which can process both stream and batch data from InfluxDB, acting on this data in real-time via its programming language TICKscript. System Requirements ISLE release version 1.4.2 git clone https://github.com/Islandora-Collaboration-Group/ISLE.git ISLE Images Following the installation steps below, an end user will configure / edit their ISLE running system(s) to ultimately use the following images and tags from Docker-Hub: Service Repository Tag Apache islandoracollabgroup/isle-apache 1.4.2 Fedora islandoracollabgroup/isle-fedora 1.4.2 Image-services islandoracollabgroup/isle-imageservices 1.4.2 MySQL islandoracollabgroup/isle-mysql 1.4.2 Portainer portainer/portainer latest Solr islandoracollabgroup/isle-solr 1.4.2 Traefik traefik/traefik 1.7.9 Additional systems overhead, including: For any system that is running the full TICK stack as a side car Recommend an additional 2-3 GB of RAM Recommend an additional 5-10 GB of storage disk space For any system that is running the Telegraf agent only Recommend an additional 512MB to 1 GB of RAM Use the docker-compose-tick.yml file for setup and/or modification. This file will have not only the correct setup with the TICK stack but the necessary syslog driver code and tagging. Use the latest tags for the TICK base images image: telegraf:latest image: influxdb:latest image: chronograf:latest image: kapacitor:latest Rsyslog has to be installed on any ISLE Host server that is to be monitored whether that system is running fullstack TICK or simply the Telegraf agent. Rsyslog is used to help the Telegraf agent forward log messages from Docker, the running ISLE containers and the host system to Influxdb. Use the default Ansible script in the ISLE repository that can install rsyslog on any host server. Manual options Red Hat / CentOS Ubuntu / Debian ( Optional ) Use some of the \"canned\" .tick ( tickscript ) templates to create dashboards and alerts provided in the ./config/tick/chronograf/tickscripts directory. See the section Templates for more detail. (TO DO) Telegraf Agent Reporting Plugins The Telegraf agent used for ISLE has a default configuration which runs the following plugins to monitor various services whether it is on a Production or Staging system. There are three .conf files found within ./config/tick/telegraf telegraf.conf - Use this as a generic configuration for any system you'd like to monitor. Use this template file as a method to monitor ISLE environments that are not Staging or Production telegraf.staging.conf - Edit this file to run a full TICK stack on your ISLE Staging server which can monitor both your Staging and Production systems. telegraf.production.conf - Edit this file to point to your full TICK stack running on your ISLE Staging server. To review or configure plugins, edit the appropriate telegraf.conf file for your environment and navigate to the INPUT PLUGINS section. If an ISLE User would like to add a plugin to monitor additional services, please review the additional information below on Telegraf plugins which can be found in two places: Telegraf Plugins Documentation https://docs.influxdata.com/telegraf/v1.10/plugins/inputs/ Individual plugin's README.md files on github.com https://github.com/influxdata/telegraf List of Telegraf Agent Plugins Used for ISLE: inputs.cpu - Read metrics about cpu usage inputs.disk - Read metrics about disk usage by mount point inputs.diskio - Read metrics about disk IO by device inputs.kernel - Get kernel statistics from /proc/stat inputs.mem - Read metrics about memory usage inputs.swap - Read metrics about swap memory usage inputs.system - Read metrics about system load & uptime inputs.docker - Read metrics about docker containers inputs.mysql - Gathers the statistics data from MySQL servers inputs.net - Gathers metrics about network interface usage (Linux only). inputs.solr - Gathers Solr stats inputs.syslog - Gather metrics from the host syslog service and for log sending inputs.varnish - Gather metrics from a Varnish cache Adoption Process Overview The installation instructions below will walk you through how to run the full TICK stack on a Staging ISLE host system but only run a Telegraf container (agent) on the Production system. This will be referred to from now on as the \"sidecar\" setup. The data from both systems will be collected, analyzed and accessed on / from the the Staging host system via a dashboard called Chronograf. You can also setup alerts from this dashboard too. You'll start by backing up all important data as needed. You'll stop any running containers You'll download new ISLE images tagged as 1.4.2 You'll copy over a new configuration file for a service called rsyslog . This will allow TICK to get information from the ISLE Host server syslog logger. You may also need to ensure that the rsyslog service and software is installed on your ISLE Host Server as well. You'll copy over a new Docker daemon.json file to get Docker the right log driver; which will change from json to syslog . You'll make additional edits and modifications to the following ISLE configuration files: docker-compose.staging.yml docker-compose.production.yml staging.env production.env You'll edit the Staging Telegraf Agent's empty or default settings to properly monitor the various local ISLE services and send metrics to the local Influxdb database on the Staging system. You'll restart your containers with the new services having been added and configured. Using a web browser, you'll navigate to the new Chronograf dashboard on the Staging server and complete the configuration of the Influxdb, Chronograf and Kapacitor services. You'll have the option to create new dashboards If desired, you'll add additional alerts You'll repeat the steps to edit the Telegraf Agent's configuration for your Production system only. You do not need to install the remaining \"ICK\" stack on Production though. You can then review the Using Chronograf section to learn how to review the new added hosts, dashboards and Log Viewer to review ISLE services log streams. Lastly and optionally, you can setup alerts in Chronograf to warn you and your team of when certain events or issues have occurred on your newly monitored systems. Installation Assumptions Previously installed and running Production and Staging ISLE Host systems are in place already You'll need to use the ISLE images tagged as 1.4.2 and higher for the syslog driver changes to be in place. That the \"sidecar\" method will be the installation type running on the Staging system to receive data from Staging and Production. A firewall configuration that allows incoming public traffic to port 8086 traffic A firewall configuration that allows incoming private traffic access to port 8888 . It is recommended that this not be general public access but allowlisted to a select range of IP addresses given this will be the Chronograf dashboard port. Trusted users only please. Only installation on Linux based host systems e.g. Debian / Ubuntu 18.04+ and Red Hat / CentOS 7.x+ Attempting to run TICK locally on a MacOS system can fail https://github.com/docker/for-mac/issues/3303 Other TICK / ISLE configurations are possible but are not supported or detailed as of yet in this documentation. End users seeking alternative setup possibilities are encouraged to further review and mine from the official Influxdata documentation . Installation Instructions Shut down all running ISLE containers, Staging first, then production second once Staging is up and running again. 01. Docker syslog Driver Setup You will need to use the sudo command or become the root user for the steps below. Copying this file allows the Docker Daemon to use the syslog driver for log files and reporting to the telegraf agent. Check if you already have an existing /etc/docker/daemon.json file. If YES , add / merge the contents of ./config/tick/docker/daemon.json with your current /etc/docker/daemon.json file. If NO , copy ./config/tick/docker/daemon.json to /etc/docker/ Example: sudo cp ./config/tick/docker/daemon.json /etc/docker/ Restart the Docker service sudo service docker restart or sudo systemctl restart docker You can check if the service is running with sudo service docker status 02. Rsyslog Setup You will need to use the sudo command or become the root user for the steps below. Copying this file allows the information from the host syslog be forwarded to the telegraf agent. Copy the Telegraf configuration file to the Rsyslog.d directory so Rsyslog will forward logs to the Telegraf agent with correct formatting. Assumes you are in the ISLE project root directory. sudo cp ./config/tick/rsyslog/50-telegraf.conf /etc/rsyslog.d/ Please note on Ubuntu systems, you will need to also reset the /var/spool/rsyslog permissions due to a bug. This has not been observed behavior on CentOS Host servers yet . Reset permissions process: sudo chown -Rv syslog:adm /var/spool/rsyslog Restart the rsyslog service sudo service rsyslog restart or sudo systemctl restart rsyslog You can check if the service is running sudo service rsyslog status Example output: \u25cf rsyslog.service - System Logging Service Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2019-06-04 10:56:26 EDT; 3s ago Docs: man:rsyslogd(8) http://www.rsyslog.com/doc/ Main PID: 11815 (rsyslogd) Tasks: 5 (limit: 4634) CGroup: /system.slice/rsyslog.service \u2514\u250011815 /usr/sbin/rsyslogd -n Jun 04 10:56:26 ip-172-31-40-28 systemd[1]: Starting System Logging Service... Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (fd 3) from systemd. [v8.32.0] Jun 04 10:56:26 ip-172-31-40-28 systemd[1]: Started System Logging Service. Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: rsyslogd's groupid changed to 106 Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: rsyslogd's userid changed to 102 Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: [origin software=\"rsyslogd\" swVersion=\"8.32.0\" x-pid=\"11815\" x-info=\"http://www.rsyslog.com\"] start You may find that that rsyslog starts to show errors, this is typically due to the containers not having been start up yet. You will restart this service in a later step to resolve these potential errors. sudo service rsyslog status \u25cf rsyslog.service - System Logging Service Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2019-08-13 17:15:46 UTC; 8min ago Docs: man:rsyslogd(8) http://www.rsyslog.com/doc/ Main PID: 9995 (rsyslogd) Tasks: 5 (limit: 4915) CGroup: /system.slice/rsyslog.service \u2514\u25009995 /usr/sbin/rsyslogd -n Aug 13 17:23:22 ip-172-31-69-204 rsyslogd[9995]: action 'action 8' resumed (module 'builtin:omfwd') [v8.32.0 try http://www.rsyslog.com/e/2359 ] Aug 13 17:23:32 ip-172-31-69-204 rsyslogd[9995]: omfwd: TCPSendBuf error -2027, destruct TCP Connection to 127.0.0.1:6514 [v8.32.0 try http://www.rsyslog.com/e/2027 ] Aug 13 17:23:32 ip-172-31-69-204 rsyslogd[9995]: action 'action 8' suspended (module 'builtin:omfwd'), retry 0. There should be messages before this one giving the reason for suspension. [v8.32.0 try http://www.rsyslog. 03. Edit File: docker-compose.staging.yml Edit the docker-compose.staging.yml file and uncomment lines to enable the new TICK services. There is a section called # Start - TICK stack services section , underneath that is all of the TICK code to be uncommented. ( remove the # before and ensure all code aligns properly like the services above it. ) At the end of every service definition ( mysql, fedora, solr, etc. ) within the docker-compose.staging.yml , uncomment the following: # logging: # driver: syslog # options: # tag: \"{{.Name}}\" Uncommented example: mysql: image: islandoracollabgroup/isle-mysql:1.5.0 container_name: isle-mysql-${CONTAINER_SHORT_ID} networks: - isle-internal ports: - \"3306:3306\" volumes: - isle-db-data:/var/lib/mysql - isle-mysql-log:/var/log/mysql logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines below for the TICK stack data volumes to the end of the volumes section of the docker-compose.staging.yml file. Uncommented TICK volumes example: volumes: isle-db-data: isle-solr-data: isle-portainer-data: isle-fedora-resourceIndex: isle-fedora-activemq: isle-fedora-XACML: isle-influxdb-data: isle-kapacitor-data: isle-chronograf-data: 04. Telegraf Agent Configuration on Staging Note: These instructions are for configuring the Telegraf Agent that runs on the same system as the \"ICK\" stack i.e. Influxdb, Chronograf and Kapacitor do, typically your ISLE Staging system. The instructions to setup only the Telegraf Agent on an ISLE system e.g. your Production system are found below in the section called 06. Telegraf Agent (Agent only) installation on Production . You'll need to edit the ./config/tick/telegraf/telegraf.staging.conf to add the following: hostname = \"\" Enter the name of the server you will be monitoring e.g. isle-server-staging or icg-staging , etc. This value can be a FQDN , an IP or any name really. database = \"telegraf\" By default, the ISLE TICK setup assumes this database as it is the easiest but pools all data received by individual monitored hosts into one database. For first time users, recommend leaving this value in place. Users are free to change this to any value to segregate data by systems, group, etc. Change servers = [\"root:<ISLE_ROOT_PASSWORD_HERE>@tcp(mysql:3306)/?tls=false\"] to use your Staging MySQL Root password. Typically this value is in your staging.env file. Swap out the <ISLE_ROOT_PASSWORD_HERE> with your Staging MySQL Root password. Start up the ISLE Docker containers again. docker-compose up -d Depending on your internet connection, this startup process may take a few minutes, as the new TICK images are being downloaded and started. As a precaution, restart the rsyslog service once the ISLE Docker containers have reported that they have started up without issue. sudo service rsyslog restart or sudo systemctl restart rsyslog You can check if the service is running: sudo service rsyslog status Note the any previous errors have stopped. sudo service rsyslog status \u25cf rsyslog.service - System Logging Service Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2019-08-13 17:24:49 UTC; 8s ago Docs: man:rsyslogd(8) http://www.rsyslog.com/doc/ Main PID: 28257 (rsyslogd) Tasks: 5 (limit: 4915) CGroup: /system.slice/rsyslog.service \u2514\u250028257 /usr/sbin/rsyslogd -n Aug 13 17:24:49 ip-172-31-69-204 systemd[1]: Starting System Logging Service... Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (fd 3) from systemd. [v8.32.0] Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: rsyslogd's groupid changed to 106 Aug 13 17:24:49 ip-172-31-69-204 systemd[1]: Started System Logging Service. Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: rsyslogd's userid changed to 102 Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: [origin software=\"rsyslogd\" swVersion=\"8.32.0\" x-pid=\"28257\" x-info=\"http://www.rsyslog.com\"] start 05. Chronograf Dashboard Setup on Staging To configure and setup your new TICK stack, navigate to http:// :8888 Click the Get Started button on the Welcome to Chronograf page. The InfluxDB connection page should now appear. Change the values within the following fields. Connection URL - Change http://localhost:8086 to http://influxdb:8086 Connection Name - Change Influx 1 to simply Influx Add a Username and / or Password . This can be any username & password combination of your choice. If you are just testing, you can leave this blank to move forward but this is not recommended. Telegraf Database Name : Keep this as the default telegraf . You can add additional databases and hosts as needed later. Default Retention Policy : Keep this blank as the default. Click the blue Add connection button at the bottom of the page. The Dashboards page should now appear. If using the default ISLE TICK setup, then we In the Suggested Dashboards for your Source section, single click all three of the following: MySQL Docker System They will get highlighted in green with a checkmark in the top left hand corner. Click the blue Create 3 Dashboards button The Kapacitor Connection page should now appear. Change the values within the following fields. Kapacitor URL - Change this from http://influxdb:9092/ to http://kapacitor:9092/ Name - Change New Kapacitor to simply Kapacitor Add a Username and / or Password . This can be any username & password combination of your choice. If you are just testing, you can leave this blank to move forward but this is not recommended. Click the blue Continue button The Setup Complete page should now appear. If everything is working properly, there should be green checkmarks below. Click the View All Connections button The Connections page should now appear. If everything is working properly, there should be in green Influx (Default) under the InfluxDB Connection section. 06. Telegraf Agent (Agent Only) Installation on Production Adoption Process Overview Use these instructions to add an additional Docker Telegraf container on a Production system. Once you've followed the instructions below, a new Production host will appear in your Chronograf dashboard for you to review alongside your previously configured Staging host. Assumptions A previously installed and running ISLE Host Production system is in place already. You'll need to use ISLE version 1.4.2 for the syslog driver changes to be in place. That the \"sidecar\" TICK installation is already in place on the Staging server prior. Your firewall allows outbound port 8086 traffic Installation In the recommended setup and usage of TICK, the Staging server will be running the full stack of TICK as a collection point for all Staging data and any Production system will only need the Telegraf agent installed. To install the Telegraf agent on a Production system: Shut down all running ISLE containers on the Production system You'll need to edit the ./config/tick/telegraf/telegraf.production.conf to add the following: hostname = \"\" Enter the name of the server you will be monitoring e.g. isle-server-prod or icg-production , etc. This value can be a FQDN i.e. production-server.domain.edu , an IP or any name really. Recommend a short name to be easily read and understood. urls = [\"http://influxdb:8086\"] Replace the influxdb value with the FQDN of the Staging server that is running the full TICK stack and that this Telegraf agent will be sending data to e.g. urls = [\"http://staging-server.domain.edu:8086\"] database = \"telegraf\" By default, the ISLE TICK setup assumes this database as it is the easiest but pools all data received by individual monitored hosts into one database. For first time users, recommend leaving this value in place. Users are free to change this to any value to segregate data by systems, group, etc. Change servers = [\"root:<ISLE_ROOT_PASSWORD_HERE>@tcp(mysql:3306)/?tls=false\"] to use your Production MySQL Root password. Typically this value is in your production.env file. Swap out the <ISLE_ROOT_PASSWORD_HERE> with your Production MySQL Root password. Edit File: docker-compose.production.yml Edit the docker-compose.production.yml file and uncomment lines to enable the new TICK - Telegraf agent / service. There is a section called # Start - TICK stack services section , underneath that is the TICK code to be uncommented. ( remove the # before and ensure all code aligns properly like the services above it. ) At the end of every service definition ( mysql, fedora, solr, etc. ) within the docker-compose.production.yml , uncomment the following: # logging: # driver: syslog # options: # tag: \"{{.Name}}\" Uncommented example: mysql: image: islandoracollabgroup/isle-mysql:1.5.0 container_name: isle-mysql-${CONTAINER_SHORT_ID} networks: - isle-internal ports: - \"3306:3306\" volumes: - isle-db-data:/var/lib/mysql - isle-mysql-log:/var/log/mysql logging: driver: syslog options: tag: \"{{.Name}}\" Copy the Telegraf configuration file to the Rsyslog.d directory so Rsyslog will forward logs to the Telegraf agent with correct formatting. Assumes you are in the ISLE project root directory. Example: sudo cp ./config/tick/rsyslog/50-telegraf.conf /etc/rsyslog.d/50-telegraf.conf Copy over the Docker log driver configuration and then restart the Docker service. Example: sudo cp ./config/tick/docker/daemon.json /etc/docker/daemon.json sudo service docker restart Start up the ISLE Docker containers again. docker-compose up -d Depending on your internet connection, this startup process may take a few minutes, as the new TICK images are being downloaded and started. Once the Production containers are back online, the services are running e.g. you see the Drupal site, etc. navigate to the Hosts section within the Chronograf dashboard. You should now see your new Production server name. This means the Telegraf Agent on your Production ISLE system is now reporting properly. Troubleshooting If you are not seeing your server(s) appear in the Hosts section nor seeing log information flowing into the Log Viewer section, recommend the following: Check that any potential firewalls are allowing communication between the Production and Staging servers on port 8086 Ensure that all configuration files have been copied over: The new Docker log driver configuration should be found here /etc/docker/daemon.json The new rsyslog / Telegraf configuration should be found here: /etc/rsyslog.d/50-telegraf.conf Check that the TICK related containers are running without exit codes. docker ps -a Check that the new Telegraf docker container is running on Production You can check if the Telegraf agent is communicating properly with the Influxdb database and if the Influxdb database is running by using the following command in your terminal: Shell into the telegraph container docker exec -it isle-telegraf-ld bash curl -I http://influxdb:8086/ping The output should confirm connectivity by looking like this: root@b2e3471b3bbb:/# curl -I http://influxdb:8086/ping HTTP/1.1 204 No Content Content-Type: application/json Request-Id: 9d832e9b-8924-11e9-9314-0242ac180005 X-Influxdb-Build: OSS X-Influxdb-Version: 1.7.6 X-Request-Id: 9d832e9b-8924-11e9-9314-0242ac180005 Date: Fri, 31 May 2019 13:03:16 GMT Repeat these instructions from the start if need be. Using Chronograf Adoption Process Overview Use these instructions below to learn how to view all monitored hosts, their services and log streams within Chronograf using dashboards and the built-in Log viewer. There are additional optional steps for setting up alerts to warn you and your team by email of when certain events happen e.g. running out of disk space, server crashes, etc. Viewing Host Systems Using a web browser, navigate to your new Chronograf dashboard e.g. http:// :8888 To view hosts, click the Host List button to the left. It should appear as an eye symbol in the left navigational panel. Your host(s) should appear in the Host List . You can click on the name to investigate the system further. By default in the Apps section, the three dashboards that you just setup i.e. system , docker and mysql should also appear. Click on any one of them to view stats specific to that reporting plugin. Viewing Logs To view logs ordered by hosts, click the Log Viewer button to the left. It should appear as cut log symbol in the left navigational panel. Your host(s) should appear in the Log Viewer . Note: This will be a lot of information at any given time especially if you connect multiple hosts. View Logs by Specific Host Within the Log Viewer page: Scroll at the bottom of the page over to the Host column in the viewer and click on the name e.g. your-hostname-here This should now filter out all other host information At the top left hand corner below the search bar, the following appears host == your-hostname-here . This is the syntax used for searching by host e.g. host == your-hostname-here this is the same shorthand name used to configure the Telegraf agent. Alternatively, you can now use this value host == your-hostname-here within the Search logs using keywords or regular expressions search bar. You can even single click into the host == your-hostname-here posted query and change the name to a different host. You can also search using ISLE key service words to drill down on log reporting. e.g. apache , fedora , varnish , etc Setting up Alerts in Chronograf Adoption Process Overview The instructions below are going to: Setup an \"alert handler\" in the Chronograf dashboard for delivery of alert messages. We'll use email as the example alert handler service. Show you how to set up two basic alerts using your new alert handler Deadman Alert - Alerts you when the ISLE host server is unresponsive, has crashed or is \"dead.\" Disk Space Alert - Alerts you when your disks are running out of space Assumptions Ability to send emails from the ISLE host server has already been setup. You may already be using an existing off host email server or service that is integrated with the ISLE Drupal site. Alternatively your IT dept may provide you with an existing email server or account details as well. We recommend setting up a SendGrid or MailGun account which are cloud-based email delivery platforms. While both these services have \"free\" tiers, both are commercial products. However, the ease of use in setting up, using and keeping your ISLE system free of additional complex email service or software installations are why they're recommended here. Additional alerts may be contributed by the ISLE maintainers and/or community over time. Chronograf Alert Handler - Email Setup While TICK supports a wide variety of alert types and delivery mechanisms we're going to configure the basic alerts using email . You can opt to setup additional alert handlers e.g. Slack, hipChat, pagerDuty and more using the official Chronograf documentation Assumptions Prior to starting, you will need to have your SMTP credentials (user name, password and location of the 3rd party email server) at the ready. This information may have been provided to you by your IT department or from when you may have used one of the recommended cloud-based email delivery platforms; SendGrid or MailGun . Please note for Sendgrid email users only , you'll need to create an appropriate API Key for each ISLE host server. Log into your Sendgrid account Navigate to Settings > API Keys Click on the Create API Key button Set the level of API Key Permissions ( recommend Restricted Access ) Set the appropriate level of permissions for each section Copy the generated API Key to a password manager or secure place for documents or documentation. This is the token you'll use to send email with. You'll need to use it again below. For more information as needed: Sendgrid SMTP Documentation Chronograf Alert Handler - Email Setup steps When you have these credentials, click on the Configuration (wrench icon) button on the left hand side of the Chronograf dashboard. Under the Kapacitor Connection column click into the Kapacitor settings dropdown click on the pencil symbol ( Not the trashcan ) If that doesn't work, try navigating to http://yourdomainhere:8888/sources/1/kapacitors/1/edit Within the Configure Alert Endpoints page, click on the SMTP section / button and fill in your creds. Please note, the directions below are for both conventional email and Sendgrid. Only pick one to follow please. For conventional email users: SMTP Host - change localhost to the correct host name SMTP Port - change 25 to the correct port e.g. 465 (SSL) or 587 (TLS) From Email - enter the email account you'll be using to send alerts with To Email - enter the email account you'll be sending alerts to User - enter the username for the email account you'll be using to send alerts with Password - enter the password for the email account you'll be using to send alerts with Click the Configuration Enabled checkbox Click the blue Save Changes button Click the Send Test Alert and confirm that a new test email has been sent to the email account you'll be receiving alerts to /at Move onto the next step, ignoring the Sendgrid information below. For Sendgrid email users only: SMTP Host - change localhost to smtp.sendgrid.net SMTP Port - change 25 to 587 From Email - enter the email account you'll be using to send alerts with To Email - enter the email account you'll be sending alerts to User - Enter the username of apikey Password - Enter the long API key generated from the above steps Click the Configuration Enabled checkbox Click the blue Save Changes button Click the Send Test Alert and confirm that a new test email has been sent to the email account you'll be receiving alerts to /at Move onto the next step. You can now use this delivery mechanism (alert handler) when you set up individual alerts. Alert - Deadman (system) The Deadman Alert handler can be used for any state, system or service. The instructions below are to setup an Alert on your monitored system to email you when the ISLE host system has been unresponsive for a period of time that you choose. This will mean the alert can be triggered by the following events: * The monitored ISLE host server: * has crashed or is \"dead\". * has been shutdown * The ISLE Docker containers: * have been shutdown For more details, please consult the official Kapacitor documentation for this alert handler. Assumptions: You have already setup an alert handler e.g. the Email Alert handler. Any testing of the alert and involved system should start with a non-production system to avoid downtime or confusion. Alert - Deadman setup steps Within your running TICK system dashboard, click on the Alerting section and from the dropdown choose the Manage Tasks link. Click on the blue Build Alert Rule button on the right. Within the Name section, enter a name of your choice for your alert Example: Offline Server Within the Alert Type section, select Deadman Within the Time Series section, select telegraf.autogen from the DB.RetentionPolicy section on the left. Within the Measurements & Tags section, scroll down to the bottom and expand system then host . Please note: There may be a number associated with host , e.g. host-8 , this is how many servers or systems you have reporting to this dashboard and TICK system. Select some or all appropriate hosts, you may have only two (Production and Staging) or you may have more. There will be green dots filling the previously empty checkbox to indicate a selected host. Once selected, click the Group By host button directly above this field. It should now be highlighted in blue. Within the Conditions section, select a value of time from the Send Alert if Data is missing for section's dropdown list. Recommendation: Select a value between 5 and 30 minutes per your alerting needs. Typically we recommend about 5 - 10 mins Within the Alert Handlers section, select email from the Send this Alert to section's dropdown list. This should pre-populate the appropriate fields with your previously configured email alert handler. You will need to add the apppropriate Recipient E-mail Addresses ( the email address you want these alerts to be sent to ) You can opt to add additional formatting for the body of the email as needed but we'll leave this field empty for the purposes of this setup. As a result, you'll get additional JSON formated output in the body of any sent alert email which can be useful for further debugging. Within the Message section, copy and paste the following starter message below into this blank field please. {{ .ID }} - {{ index .Tags \"host\" }} server is {{ .Level }}. Click on the green Save Rule button at the top right hand side of the dashboard. You should get a notification on the Alert webpage that your rule was saved. It is brief, small and disappears quickly. The Alert is now saved and active. You should now see 1 Alert Rule with the name of your alert e.g Offline Server in blue. You should now see 1 TICKscript with the name of your alert e.g Offline Server in green. These two entries are the same alert rule but if you wanted more granular changes, you could edit the green TICKscript to add more specific flux code. These changes once saved would also reflect in the blue Alert rule as well. One is really for GUI access the other for granular code. No further steps are needed other than testing your alert should you choose. (Optional) - Test your alert It is recommended that you test your alert by either: (Fast) - Shut down the ISLE Docker containers running on the monitored system. Shut down your ISLE containers on the monitored system. Wait for the alloted amount of time you choose above. Check your email account for the Alert message with (Critical) in the email header If you get your alert email, great! Restart your ISLE Docker containers Check your email account for the Alert message with (OK) in the email header (Long) _ Shut down your ISLE Docker containers running on the monitored system and then your ISLE host server. Shut down your ISLE containers on the monitored system. Shutdown your monitored ISLE host server. Wait for the alloted amount of time you choose above. Check your email account for the Alert message with (Critical) in the email header. You'll start getting one every minute. If you get your alert email, great! Now restart your server Now restart your Docker containers Check your email account for the Alert message with (OK) in the email header If the alert doesn't show up, then retrace your steps, perhaps use a lower value of time and tune as necessary. Repeat as necessary on either your Production or additional system(s) Please note: If you only want one alert when your server is down, you'll need to edit your TICKScript ( the green one ) and add the following piece of code .stateChangesOnly() to the end of the var trigger = data section, ensure that it is indented and is aligned with the line above it. Then click on the green Save Rule button at the top right hand side of the dashboard. Alert - Deadman Flux code explanation {{ .ID }} = Name of the Alert {{ index .Tags \"host\" }} = Name of server {{ .Level }}. = Critical or OK This message is slightly formatted for readability and context. By using this starter message via email effectively you'll get two alerts for the following conditions: When the system (server) is \"down\" or unreachable for the duration of time you selected, you'll get an alert email every minute. For example, the system name is acme-prod : Offline Server-host=acme-server - acme-prod server is CRITICAL. There may be additional information put in the email body for review. It will be formatted in JSON notation. If you only want one alert, you'll need to edit your TICKScript ( the green one ) and add the following piece of code .stateChangesOnly() to the end of the var trigger = data section, ensure that it is indented and is aligned with the line above it. Then click on the green Save Rule button at the top right hand side of the dashboard. Once you've taken manual steps on the affected server to restore connectivity and the ISLE system, its containers and services are effectively backup and running, you'll get a follow-up email that indicates that the server is back up and running. For example: Offline Server-host=acme-prod - acme-prod server is OK There may be additional information put in the email body for review. It will be formatted in JSON notation. Please note: The code suggestions above use Influxdata Flux syntax, for more information on how to change messages and their values please use the official Flux syntax basics documentation for more information. Alert - Disk Space The Disk Space Alert handler can be used to alert you when one or more of your disk(s) are potentially running out of space. The instructions below are to setup an Alert on your monitored ISLE host system to email you when the ISLE host system operating system disk has passed a threshold of 75% disk used (full) capacity. You are welcome to change this threshold to a lower or higher value as needed to give yourself or your IT staff time to anticipate the potential disk growth prior to system challenges or errors. This will mean the alert can be triggered by the following events: * An increase in disk usage by the ISLE host system operating system disk that surpasses 75% usage Assumptions: You have already setup an alert handler e.g. the Email Alert handler. Any testing of the alert and involved system should start with a non-production system to avoid downtime or confusion. Alert - Disk Space setup steps Within your running TICK system dashboard, click on the Alerting section and from the dropdown choose the Manage Tasks link. Click on the blue Build Alert Rule button on the right. Within the Name section, enter a name of your choice for your alert Example: Disk Space Exceeded Within the Alert Type section, select Threshold Within the Time Series section, select telegraf.autogen from the DB.RetentionPolicy section on the left. Within the Measurements & Tags section, scroll down to the bottom and expand disk then host . Please note: There may be a number associated with host , e.g. host-8 , this is how many servers or systems you have reporting to this dashboard and TICK system. Select some or all appropriate hosts, you may have only two (Production and Staging) or you may have more. There will be green dots filling the previously empty checkbox to indicate a selected host. Once selected, click the Group By host button directly above this field. It should now be highlighted in blue. Within the Fields section, select used_percent There will be green dots filling the previously empty checkbox to indicate a selected field. Within the Conditions section: Select the greater than value in the Send Alert where section dropdown box. This value may be pre-populated by default. Enter the percent value of 90 in the empty Send Alert where used_percent is greater than section's dropdown list. Recommendation: You can change this value as need but a numeric value between 75 and 90 is recommended. Within the Alert Handlers section, select email from the Send this Alert to section's dropdown list. This should pre-populate the appropriate fields with your previously configured email alert handler. You will need to add the apppropriate Recipient E-mail Addresses ( the email address you want these alerts to be sent to ) You can opt to add additional formatting for the body of the email as needed but we'll leave this field empty for the purposes of this setup. As a result, you'll get additional JSON formated output in the body of any sent alert email which can be useful for further debugging. Within the Message section, copy and paste the following starter message below into this blank field please. {{.ID }} - {{ index .Tags \"host\"}} {{ .Name }} usage is at {{ index .Fields \"value\" | printf \"%0.2f\" }}% - {{ .Level }} Click on the green Save Rule button at the top right hand side of the dashboard. You should get a notification on the Alert webpage that your rule was saved. It is brief, small and disappears quickly. The Alert is now saved and active. You should now see 1 Alert Rule with the name of your alert e.g Disk Space Exceeded in blue. You should now see 1 TICKscript with the name of your alert e.g Disk Space Exceeded in green. These two entries are the same alert rule but if you wanted more granular changes, you could edit the green TICKscript to add more specific flux code. These changes once saved would also reflect in the blue Alert rule as well. One is really for GUI access the other for granular code. No further steps are needed other than testing your alert should you choose. (Optional) - Test your alert First, check the current disk usage on your monitored ISLE host system by sshing into the system and running df -h , the output should look something like: Example: Your output below may not match exactly. df -h Filesystem Size Used Avail Use% Mounted on udev 1.9G 0 1.9G 0% /dev tmpfs 389M 1.4M 388M 1% /run /dev/nvme0n1p1 18G 68G 50G 26% / tmpfs 1.9G 0 1.9G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup tmpfs 389M 0 389M 0% /run/user/10000 The system disk used in the example above is mounted on / . Your system disk will also most likely be mounted on / . If you are not sure, check with your IT team or appropriate system administration resource prior to proceeding. You can now test this alert in one of two ways: Method 1: ( Conservative, no test changes on server ) Lowering or raising the percentage to closer match what your current system using in terms of disk capacity. Waiting until the monitored ISLE host server actually exceeds the desired disk capacity percentage, triggers the alert and then tune or adjust as needed. Method 2: ( Faster but caution ahead on using these commands, you'll be creating fake data ) Lower the percentage to closer match what your current system using in terms of disk capacity. Create test conditions to exceed your ISLE system disk usage and trigger the alert. Change the Alert percentage to something closer to the current Use% displayed from the df -h command. Try to set it within 1 percentage point or so of that above value. Create a dummy 1 GB text file on your server. Use your user home directory for this process and not in an ISLE data location. Run dd if=/dev/zero of=file1.txt count=1024 bs=1048576 to create the dummy 1 GB file Check your email account for the Alert message with: For example: Disk Space Alert-host=acme-prod - acme-prod disk usage is at 76.03% - Critical in the email message header If you get your alert email, great! If the alert doesn't show up, then retrace your steps, perhaps use a lower percentage of capacity and tune as necessary. Change the percentage back to the higher value. Repeat as necessary on all additional servers. Delete the dummy file1.txt file Note this will trigger a followup Alert email that the server disk capacity is below the Alert level again and as such \"OK.\" For example: Disk Space Alert-host=acme-prod - acme-prod disk usage is at 45.01% - OK Alert - Disk Space Flux code explanation {{ .ID }} = Name of the Alert {{ index .Tags \"host\" }} = Name of server {{ .Name }}. = Name of impacted service in this case disk {{ index .Fields \"value\" | printf \"%0.2f\" }}% = Reported disk used space from monitored server formatted to display properly in email {{ .Level }}. = Critical or OK This message is slightly formatted for readability and context. By using this starter message via email effectively you'll get two alerts for the following conditions: When the system (server) is passes the disk used % threshold, you'll get an alert email. For example, the system name is acme-prod and the alert is set to 75% : Disk Space Alert-host=acme-prod - acme-prod disk usage is at 76.03% - Critical There may be additional information put in the email body for review. It will be formatted in JSON notation. Once you've taken manual steps on the affected server to increase disk capacity and the ISLE system, its containers and services are effectively backup and running, you'll get a follow-up email that indicates that the disk capacity is back below the given Alert level and thus acceptable. This alert may not always fire due to the involved steps of increasing disk size. You may see this message if using the optional test steps above. For example: Disk Space Alert-host=acme-prod - acme-prod disk usage is at 45.01% - OK There may be additional information put in the email body for review. It will be formatted in JSON notation. Please note: The code suggestions above use Influxdata Flux syntax, for more information on how to change messages and their values please use the official Flux syntax basics documentation for more information. Alerts Resources Official Documentation for setting up alerts in Chronograf Release Notes Additional changes were made to the ISLE base images to allow for: Log levels to be set by users in the project in the respective environment's .env file ( staging.env or production.env ) Logging in ISLE is now set to stdout and stderr by default instead of log files. Choice in Docker log drivers e.g. syslog vs json , etc. TICK uses the Docker syslog log driver by default. Flexibility for users using monitoring tools other than TICK Additional Resources Influxdata - Company Website Telegraf Documentation Influxdb Documentation Chronograf Documentation Kapacitor Documentation Need Help? We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"TICK Stack"},{"location":"optional-components/tickstack/#tick-stack-dashboard-visualization-for-systems-metrics-and-logging-events","text":"","title":"TICK Stack: Dashboard Visualization for Systems Metrics and Logging Events"},{"location":"optional-components/tickstack/#use-cases-user-stories","text":"As a repository administrator, I expect to be able to view real-time and some historic systems/performance metrics without digging around in server logs. As a repository administrator, I should be able to use the dashboard to troubleshoot the repository ( like when it's hanging or objects are slow to load ) As a repository owner/manager, I expect logging to be handled in a way that does not endanger my systems health and performance over time. As a repository owner/manager, I expect to be able to set logging levels for all relevant log streams. As a repository administrator, I expect to be able to view in a web dashboard: Real-time and recent historic systems/performance metrics Real-time and recent historic system and application logs As a repository administrator, I expect to be able to use monitoring tools that do not burden the target server thus I can setup monitoring tools remotely and pull data from the ISLE server for review.","title":"Use Cases &amp; User Stories"},{"location":"optional-components/tickstack/#new-functionality","text":"The \"TICK\" stack is a suite of open-source applications that are used together for the storing, visualization and monitoring of data (time series metrics) gathered from running systems. The TICK stack was created and is developed by Influxdata which is \"...dedicated to open source and truly cares about helping developers get to results faster with less complexity and less code.\" The TICK stack is used with ISLE to: Monitor running systems in Development, Staging or Production Do note that users can monitor ANY system or systems with these tools, not just ISLE-related platforms. Create alerts that can be sent to email, text or Slack\u2122 to warn users, system-administrators of potential issues, storage or memory challenges and much more. As a one-stop \"search-engine\" of log and metric data for all ISLE containers, services and applications, host servers, etc. Help ISLE users to better understand how their systems work, how Islandora works and to greatly improve visibility on applications, services and processes within ISLE The use and setup of TICK within the ISLE platform is as an optional sidecar to ISLE. There are various ways one can setup TICK in general as a software, as services on the ISLE Host server or to be run as Docker containers. TICK is comprised of the following main services and software: T elegraf - a plugin-driven server agent for collecting and sending metrics and events from databases, systems, and IoT sensors. I nfluxdb - the open source time series database is designed to handle high write and query loads and provides a SQL-like query language called InfluxQL for interacting with data. C hronograf - the user interface and administrative component for using templates and libraries to rapidly build dashboards with real-time visualizations. K apacitor - the native data processing engine which can process both stream and batch data from InfluxDB, acting on this data in real-time via its programming language TICKscript.","title":"New Functionality"},{"location":"optional-components/tickstack/#system-requirements","text":"ISLE release version 1.4.2 git clone https://github.com/Islandora-Collaboration-Group/ISLE.git","title":"System Requirements"},{"location":"optional-components/tickstack/#isle-images","text":"Following the installation steps below, an end user will configure / edit their ISLE running system(s) to ultimately use the following images and tags from Docker-Hub: Service Repository Tag Apache islandoracollabgroup/isle-apache 1.4.2 Fedora islandoracollabgroup/isle-fedora 1.4.2 Image-services islandoracollabgroup/isle-imageservices 1.4.2 MySQL islandoracollabgroup/isle-mysql 1.4.2 Portainer portainer/portainer latest Solr islandoracollabgroup/isle-solr 1.4.2 Traefik traefik/traefik 1.7.9 Additional systems overhead, including: For any system that is running the full TICK stack as a side car Recommend an additional 2-3 GB of RAM Recommend an additional 5-10 GB of storage disk space For any system that is running the Telegraf agent only Recommend an additional 512MB to 1 GB of RAM Use the docker-compose-tick.yml file for setup and/or modification. This file will have not only the correct setup with the TICK stack but the necessary syslog driver code and tagging. Use the latest tags for the TICK base images image: telegraf:latest image: influxdb:latest image: chronograf:latest image: kapacitor:latest Rsyslog has to be installed on any ISLE Host server that is to be monitored whether that system is running fullstack TICK or simply the Telegraf agent. Rsyslog is used to help the Telegraf agent forward log messages from Docker, the running ISLE containers and the host system to Influxdb. Use the default Ansible script in the ISLE repository that can install rsyslog on any host server. Manual options Red Hat / CentOS Ubuntu / Debian ( Optional ) Use some of the \"canned\" .tick ( tickscript ) templates to create dashboards and alerts provided in the ./config/tick/chronograf/tickscripts directory. See the section Templates for more detail. (TO DO)","title":"ISLE Images"},{"location":"optional-components/tickstack/#telegraf-agent-reporting-plugins","text":"The Telegraf agent used for ISLE has a default configuration which runs the following plugins to monitor various services whether it is on a Production or Staging system. There are three .conf files found within ./config/tick/telegraf telegraf.conf - Use this as a generic configuration for any system you'd like to monitor. Use this template file as a method to monitor ISLE environments that are not Staging or Production telegraf.staging.conf - Edit this file to run a full TICK stack on your ISLE Staging server which can monitor both your Staging and Production systems. telegraf.production.conf - Edit this file to point to your full TICK stack running on your ISLE Staging server. To review or configure plugins, edit the appropriate telegraf.conf file for your environment and navigate to the INPUT PLUGINS section. If an ISLE User would like to add a plugin to monitor additional services, please review the additional information below on Telegraf plugins which can be found in two places: Telegraf Plugins Documentation https://docs.influxdata.com/telegraf/v1.10/plugins/inputs/ Individual plugin's README.md files on github.com https://github.com/influxdata/telegraf","title":"Telegraf Agent Reporting Plugins"},{"location":"optional-components/tickstack/#list-of-telegraf-agent-plugins-used-for-isle","text":"inputs.cpu - Read metrics about cpu usage inputs.disk - Read metrics about disk usage by mount point inputs.diskio - Read metrics about disk IO by device inputs.kernel - Get kernel statistics from /proc/stat inputs.mem - Read metrics about memory usage inputs.swap - Read metrics about swap memory usage inputs.system - Read metrics about system load & uptime inputs.docker - Read metrics about docker containers inputs.mysql - Gathers the statistics data from MySQL servers inputs.net - Gathers metrics about network interface usage (Linux only). inputs.solr - Gathers Solr stats inputs.syslog - Gather metrics from the host syslog service and for log sending inputs.varnish - Gather metrics from a Varnish cache","title":"List of Telegraf Agent Plugins Used for ISLE:"},{"location":"optional-components/tickstack/#adoption-process-overview","text":"The installation instructions below will walk you through how to run the full TICK stack on a Staging ISLE host system but only run a Telegraf container (agent) on the Production system. This will be referred to from now on as the \"sidecar\" setup. The data from both systems will be collected, analyzed and accessed on / from the the Staging host system via a dashboard called Chronograf. You can also setup alerts from this dashboard too. You'll start by backing up all important data as needed. You'll stop any running containers You'll download new ISLE images tagged as 1.4.2 You'll copy over a new configuration file for a service called rsyslog . This will allow TICK to get information from the ISLE Host server syslog logger. You may also need to ensure that the rsyslog service and software is installed on your ISLE Host Server as well. You'll copy over a new Docker daemon.json file to get Docker the right log driver; which will change from json to syslog . You'll make additional edits and modifications to the following ISLE configuration files: docker-compose.staging.yml docker-compose.production.yml staging.env production.env You'll edit the Staging Telegraf Agent's empty or default settings to properly monitor the various local ISLE services and send metrics to the local Influxdb database on the Staging system. You'll restart your containers with the new services having been added and configured. Using a web browser, you'll navigate to the new Chronograf dashboard on the Staging server and complete the configuration of the Influxdb, Chronograf and Kapacitor services. You'll have the option to create new dashboards If desired, you'll add additional alerts You'll repeat the steps to edit the Telegraf Agent's configuration for your Production system only. You do not need to install the remaining \"ICK\" stack on Production though. You can then review the Using Chronograf section to learn how to review the new added hosts, dashboards and Log Viewer to review ISLE services log streams. Lastly and optionally, you can setup alerts in Chronograf to warn you and your team of when certain events or issues have occurred on your newly monitored systems.","title":"Adoption Process Overview"},{"location":"optional-components/tickstack/#installation","text":"","title":"Installation"},{"location":"optional-components/tickstack/#assumptions","text":"Previously installed and running Production and Staging ISLE Host systems are in place already You'll need to use the ISLE images tagged as 1.4.2 and higher for the syslog driver changes to be in place. That the \"sidecar\" method will be the installation type running on the Staging system to receive data from Staging and Production. A firewall configuration that allows incoming public traffic to port 8086 traffic A firewall configuration that allows incoming private traffic access to port 8888 . It is recommended that this not be general public access but allowlisted to a select range of IP addresses given this will be the Chronograf dashboard port. Trusted users only please. Only installation on Linux based host systems e.g. Debian / Ubuntu 18.04+ and Red Hat / CentOS 7.x+ Attempting to run TICK locally on a MacOS system can fail https://github.com/docker/for-mac/issues/3303 Other TICK / ISLE configurations are possible but are not supported or detailed as of yet in this documentation. End users seeking alternative setup possibilities are encouraged to further review and mine from the official Influxdata documentation .","title":"Assumptions"},{"location":"optional-components/tickstack/#installation-instructions","text":"Shut down all running ISLE containers, Staging first, then production second once Staging is up and running again.","title":"Installation Instructions"},{"location":"optional-components/tickstack/#01-docker-syslog-driver-setup","text":"You will need to use the sudo command or become the root user for the steps below. Copying this file allows the Docker Daemon to use the syslog driver for log files and reporting to the telegraf agent. Check if you already have an existing /etc/docker/daemon.json file. If YES , add / merge the contents of ./config/tick/docker/daemon.json with your current /etc/docker/daemon.json file. If NO , copy ./config/tick/docker/daemon.json to /etc/docker/ Example: sudo cp ./config/tick/docker/daemon.json /etc/docker/ Restart the Docker service sudo service docker restart or sudo systemctl restart docker You can check if the service is running with sudo service docker status","title":"01. Docker syslog Driver Setup"},{"location":"optional-components/tickstack/#02-rsyslog-setup","text":"You will need to use the sudo command or become the root user for the steps below. Copying this file allows the information from the host syslog be forwarded to the telegraf agent. Copy the Telegraf configuration file to the Rsyslog.d directory so Rsyslog will forward logs to the Telegraf agent with correct formatting. Assumes you are in the ISLE project root directory. sudo cp ./config/tick/rsyslog/50-telegraf.conf /etc/rsyslog.d/ Please note on Ubuntu systems, you will need to also reset the /var/spool/rsyslog permissions due to a bug. This has not been observed behavior on CentOS Host servers yet . Reset permissions process: sudo chown -Rv syslog:adm /var/spool/rsyslog Restart the rsyslog service sudo service rsyslog restart or sudo systemctl restart rsyslog You can check if the service is running sudo service rsyslog status Example output: \u25cf rsyslog.service - System Logging Service Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2019-06-04 10:56:26 EDT; 3s ago Docs: man:rsyslogd(8) http://www.rsyslog.com/doc/ Main PID: 11815 (rsyslogd) Tasks: 5 (limit: 4634) CGroup: /system.slice/rsyslog.service \u2514\u250011815 /usr/sbin/rsyslogd -n Jun 04 10:56:26 ip-172-31-40-28 systemd[1]: Starting System Logging Service... Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (fd 3) from systemd. [v8.32.0] Jun 04 10:56:26 ip-172-31-40-28 systemd[1]: Started System Logging Service. Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: rsyslogd's groupid changed to 106 Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: rsyslogd's userid changed to 102 Jun 04 10:56:26 ip-172-31-40-28 rsyslogd[11815]: [origin software=\"rsyslogd\" swVersion=\"8.32.0\" x-pid=\"11815\" x-info=\"http://www.rsyslog.com\"] start You may find that that rsyslog starts to show errors, this is typically due to the containers not having been start up yet. You will restart this service in a later step to resolve these potential errors. sudo service rsyslog status \u25cf rsyslog.service - System Logging Service Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2019-08-13 17:15:46 UTC; 8min ago Docs: man:rsyslogd(8) http://www.rsyslog.com/doc/ Main PID: 9995 (rsyslogd) Tasks: 5 (limit: 4915) CGroup: /system.slice/rsyslog.service \u2514\u25009995 /usr/sbin/rsyslogd -n Aug 13 17:23:22 ip-172-31-69-204 rsyslogd[9995]: action 'action 8' resumed (module 'builtin:omfwd') [v8.32.0 try http://www.rsyslog.com/e/2359 ] Aug 13 17:23:32 ip-172-31-69-204 rsyslogd[9995]: omfwd: TCPSendBuf error -2027, destruct TCP Connection to 127.0.0.1:6514 [v8.32.0 try http://www.rsyslog.com/e/2027 ] Aug 13 17:23:32 ip-172-31-69-204 rsyslogd[9995]: action 'action 8' suspended (module 'builtin:omfwd'), retry 0. There should be messages before this one giving the reason for suspension. [v8.32.0 try http://www.rsyslog.","title":"02. Rsyslog Setup"},{"location":"optional-components/tickstack/#03-edit-file-docker-composestagingyml","text":"Edit the docker-compose.staging.yml file and uncomment lines to enable the new TICK services. There is a section called # Start - TICK stack services section , underneath that is all of the TICK code to be uncommented. ( remove the # before and ensure all code aligns properly like the services above it. ) At the end of every service definition ( mysql, fedora, solr, etc. ) within the docker-compose.staging.yml , uncomment the following: # logging: # driver: syslog # options: # tag: \"{{.Name}}\" Uncommented example: mysql: image: islandoracollabgroup/isle-mysql:1.5.0 container_name: isle-mysql-${CONTAINER_SHORT_ID} networks: - isle-internal ports: - \"3306:3306\" volumes: - isle-db-data:/var/lib/mysql - isle-mysql-log:/var/log/mysql logging: driver: syslog options: tag: \"{{.Name}}\" Uncomment the lines below for the TICK stack data volumes to the end of the volumes section of the docker-compose.staging.yml file. Uncommented TICK volumes example: volumes: isle-db-data: isle-solr-data: isle-portainer-data: isle-fedora-resourceIndex: isle-fedora-activemq: isle-fedora-XACML: isle-influxdb-data: isle-kapacitor-data: isle-chronograf-data:","title":"03. Edit File: docker-compose.staging.yml"},{"location":"optional-components/tickstack/#04-telegraf-agent-configuration-on-staging","text":"Note: These instructions are for configuring the Telegraf Agent that runs on the same system as the \"ICK\" stack i.e. Influxdb, Chronograf and Kapacitor do, typically your ISLE Staging system. The instructions to setup only the Telegraf Agent on an ISLE system e.g. your Production system are found below in the section called 06. Telegraf Agent (Agent only) installation on Production . You'll need to edit the ./config/tick/telegraf/telegraf.staging.conf to add the following: hostname = \"\" Enter the name of the server you will be monitoring e.g. isle-server-staging or icg-staging , etc. This value can be a FQDN , an IP or any name really. database = \"telegraf\" By default, the ISLE TICK setup assumes this database as it is the easiest but pools all data received by individual monitored hosts into one database. For first time users, recommend leaving this value in place. Users are free to change this to any value to segregate data by systems, group, etc. Change servers = [\"root:<ISLE_ROOT_PASSWORD_HERE>@tcp(mysql:3306)/?tls=false\"] to use your Staging MySQL Root password. Typically this value is in your staging.env file. Swap out the <ISLE_ROOT_PASSWORD_HERE> with your Staging MySQL Root password. Start up the ISLE Docker containers again. docker-compose up -d Depending on your internet connection, this startup process may take a few minutes, as the new TICK images are being downloaded and started. As a precaution, restart the rsyslog service once the ISLE Docker containers have reported that they have started up without issue. sudo service rsyslog restart or sudo systemctl restart rsyslog You can check if the service is running: sudo service rsyslog status Note the any previous errors have stopped. sudo service rsyslog status \u25cf rsyslog.service - System Logging Service Loaded: loaded (/lib/systemd/system/rsyslog.service; enabled; vendor preset: enabled) Active: active (running) since Tue 2019-08-13 17:24:49 UTC; 8s ago Docs: man:rsyslogd(8) http://www.rsyslog.com/doc/ Main PID: 28257 (rsyslogd) Tasks: 5 (limit: 4915) CGroup: /system.slice/rsyslog.service \u2514\u250028257 /usr/sbin/rsyslogd -n Aug 13 17:24:49 ip-172-31-69-204 systemd[1]: Starting System Logging Service... Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: imuxsock: Acquired UNIX socket '/run/systemd/journal/syslog' (fd 3) from systemd. [v8.32.0] Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: rsyslogd's groupid changed to 106 Aug 13 17:24:49 ip-172-31-69-204 systemd[1]: Started System Logging Service. Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: rsyslogd's userid changed to 102 Aug 13 17:24:49 ip-172-31-69-204 rsyslogd[28257]: [origin software=\"rsyslogd\" swVersion=\"8.32.0\" x-pid=\"28257\" x-info=\"http://www.rsyslog.com\"] start","title":"04. Telegraf Agent Configuration on Staging"},{"location":"optional-components/tickstack/#05-chronograf-dashboard-setup-on-staging","text":"To configure and setup your new TICK stack, navigate to http:// :8888 Click the Get Started button on the Welcome to Chronograf page. The InfluxDB connection page should now appear. Change the values within the following fields. Connection URL - Change http://localhost:8086 to http://influxdb:8086 Connection Name - Change Influx 1 to simply Influx Add a Username and / or Password . This can be any username & password combination of your choice. If you are just testing, you can leave this blank to move forward but this is not recommended. Telegraf Database Name : Keep this as the default telegraf . You can add additional databases and hosts as needed later. Default Retention Policy : Keep this blank as the default. Click the blue Add connection button at the bottom of the page. The Dashboards page should now appear. If using the default ISLE TICK setup, then we In the Suggested Dashboards for your Source section, single click all three of the following: MySQL Docker System They will get highlighted in green with a checkmark in the top left hand corner. Click the blue Create 3 Dashboards button The Kapacitor Connection page should now appear. Change the values within the following fields. Kapacitor URL - Change this from http://influxdb:9092/ to http://kapacitor:9092/ Name - Change New Kapacitor to simply Kapacitor Add a Username and / or Password . This can be any username & password combination of your choice. If you are just testing, you can leave this blank to move forward but this is not recommended. Click the blue Continue button The Setup Complete page should now appear. If everything is working properly, there should be green checkmarks below. Click the View All Connections button The Connections page should now appear. If everything is working properly, there should be in green Influx (Default) under the InfluxDB Connection section.","title":"05. Chronograf Dashboard Setup on Staging"},{"location":"optional-components/tickstack/#06-telegraf-agent-agent-only-installation-on-production","text":"","title":"06. Telegraf Agent (Agent Only) Installation on Production"},{"location":"optional-components/tickstack/#adoption-process-overview_1","text":"Use these instructions to add an additional Docker Telegraf container on a Production system. Once you've followed the instructions below, a new Production host will appear in your Chronograf dashboard for you to review alongside your previously configured Staging host.","title":"Adoption Process Overview"},{"location":"optional-components/tickstack/#assumptions_1","text":"A previously installed and running ISLE Host Production system is in place already. You'll need to use ISLE version 1.4.2 for the syslog driver changes to be in place. That the \"sidecar\" TICK installation is already in place on the Staging server prior. Your firewall allows outbound port 8086 traffic","title":"Assumptions"},{"location":"optional-components/tickstack/#installation_1","text":"In the recommended setup and usage of TICK, the Staging server will be running the full stack of TICK as a collection point for all Staging data and any Production system will only need the Telegraf agent installed. To install the Telegraf agent on a Production system: Shut down all running ISLE containers on the Production system You'll need to edit the ./config/tick/telegraf/telegraf.production.conf to add the following: hostname = \"\" Enter the name of the server you will be monitoring e.g. isle-server-prod or icg-production , etc. This value can be a FQDN i.e. production-server.domain.edu , an IP or any name really. Recommend a short name to be easily read and understood. urls = [\"http://influxdb:8086\"] Replace the influxdb value with the FQDN of the Staging server that is running the full TICK stack and that this Telegraf agent will be sending data to e.g. urls = [\"http://staging-server.domain.edu:8086\"] database = \"telegraf\" By default, the ISLE TICK setup assumes this database as it is the easiest but pools all data received by individual monitored hosts into one database. For first time users, recommend leaving this value in place. Users are free to change this to any value to segregate data by systems, group, etc. Change servers = [\"root:<ISLE_ROOT_PASSWORD_HERE>@tcp(mysql:3306)/?tls=false\"] to use your Production MySQL Root password. Typically this value is in your production.env file. Swap out the <ISLE_ROOT_PASSWORD_HERE> with your Production MySQL Root password.","title":"Installation"},{"location":"optional-components/tickstack/#edit-file-docker-composeproductionyml","text":"Edit the docker-compose.production.yml file and uncomment lines to enable the new TICK - Telegraf agent / service. There is a section called # Start - TICK stack services section , underneath that is the TICK code to be uncommented. ( remove the # before and ensure all code aligns properly like the services above it. ) At the end of every service definition ( mysql, fedora, solr, etc. ) within the docker-compose.production.yml , uncomment the following: # logging: # driver: syslog # options: # tag: \"{{.Name}}\" Uncommented example: mysql: image: islandoracollabgroup/isle-mysql:1.5.0 container_name: isle-mysql-${CONTAINER_SHORT_ID} networks: - isle-internal ports: - \"3306:3306\" volumes: - isle-db-data:/var/lib/mysql - isle-mysql-log:/var/log/mysql logging: driver: syslog options: tag: \"{{.Name}}\" Copy the Telegraf configuration file to the Rsyslog.d directory so Rsyslog will forward logs to the Telegraf agent with correct formatting. Assumes you are in the ISLE project root directory. Example: sudo cp ./config/tick/rsyslog/50-telegraf.conf /etc/rsyslog.d/50-telegraf.conf Copy over the Docker log driver configuration and then restart the Docker service. Example: sudo cp ./config/tick/docker/daemon.json /etc/docker/daemon.json sudo service docker restart Start up the ISLE Docker containers again. docker-compose up -d Depending on your internet connection, this startup process may take a few minutes, as the new TICK images are being downloaded and started. Once the Production containers are back online, the services are running e.g. you see the Drupal site, etc. navigate to the Hosts section within the Chronograf dashboard. You should now see your new Production server name. This means the Telegraf Agent on your Production ISLE system is now reporting properly.","title":"Edit File: docker-compose.production.yml"},{"location":"optional-components/tickstack/#troubleshooting","text":"If you are not seeing your server(s) appear in the Hosts section nor seeing log information flowing into the Log Viewer section, recommend the following: Check that any potential firewalls are allowing communication between the Production and Staging servers on port 8086 Ensure that all configuration files have been copied over: The new Docker log driver configuration should be found here /etc/docker/daemon.json The new rsyslog / Telegraf configuration should be found here: /etc/rsyslog.d/50-telegraf.conf Check that the TICK related containers are running without exit codes. docker ps -a Check that the new Telegraf docker container is running on Production You can check if the Telegraf agent is communicating properly with the Influxdb database and if the Influxdb database is running by using the following command in your terminal: Shell into the telegraph container docker exec -it isle-telegraf-ld bash curl -I http://influxdb:8086/ping The output should confirm connectivity by looking like this: root@b2e3471b3bbb:/# curl -I http://influxdb:8086/ping HTTP/1.1 204 No Content Content-Type: application/json Request-Id: 9d832e9b-8924-11e9-9314-0242ac180005 X-Influxdb-Build: OSS X-Influxdb-Version: 1.7.6 X-Request-Id: 9d832e9b-8924-11e9-9314-0242ac180005 Date: Fri, 31 May 2019 13:03:16 GMT Repeat these instructions from the start if need be.","title":"Troubleshooting"},{"location":"optional-components/tickstack/#using-chronograf","text":"","title":"Using Chronograf"},{"location":"optional-components/tickstack/#adoption-process-overview_2","text":"Use these instructions below to learn how to view all monitored hosts, their services and log streams within Chronograf using dashboards and the built-in Log viewer. There are additional optional steps for setting up alerts to warn you and your team by email of when certain events happen e.g. running out of disk space, server crashes, etc.","title":"Adoption Process Overview"},{"location":"optional-components/tickstack/#viewing-host-systems","text":"Using a web browser, navigate to your new Chronograf dashboard e.g. http:// :8888 To view hosts, click the Host List button to the left. It should appear as an eye symbol in the left navigational panel. Your host(s) should appear in the Host List . You can click on the name to investigate the system further. By default in the Apps section, the three dashboards that you just setup i.e. system , docker and mysql should also appear. Click on any one of them to view stats specific to that reporting plugin.","title":"Viewing Host Systems"},{"location":"optional-components/tickstack/#viewing-logs","text":"To view logs ordered by hosts, click the Log Viewer button to the left. It should appear as cut log symbol in the left navigational panel. Your host(s) should appear in the Log Viewer . Note: This will be a lot of information at any given time especially if you connect multiple hosts.","title":"Viewing Logs"},{"location":"optional-components/tickstack/#view-logs-by-specific-host","text":"Within the Log Viewer page: Scroll at the bottom of the page over to the Host column in the viewer and click on the name e.g. your-hostname-here This should now filter out all other host information At the top left hand corner below the search bar, the following appears host == your-hostname-here . This is the syntax used for searching by host e.g. host == your-hostname-here this is the same shorthand name used to configure the Telegraf agent. Alternatively, you can now use this value host == your-hostname-here within the Search logs using keywords or regular expressions search bar. You can even single click into the host == your-hostname-here posted query and change the name to a different host. You can also search using ISLE key service words to drill down on log reporting. e.g. apache , fedora , varnish , etc","title":"View Logs by Specific Host"},{"location":"optional-components/tickstack/#setting-up-alerts-in-chronograf","text":"","title":"Setting up Alerts in Chronograf"},{"location":"optional-components/tickstack/#adoption-process-overview_3","text":"The instructions below are going to: Setup an \"alert handler\" in the Chronograf dashboard for delivery of alert messages. We'll use email as the example alert handler service. Show you how to set up two basic alerts using your new alert handler Deadman Alert - Alerts you when the ISLE host server is unresponsive, has crashed or is \"dead.\" Disk Space Alert - Alerts you when your disks are running out of space","title":"Adoption Process Overview"},{"location":"optional-components/tickstack/#assumptions_2","text":"Ability to send emails from the ISLE host server has already been setup. You may already be using an existing off host email server or service that is integrated with the ISLE Drupal site. Alternatively your IT dept may provide you with an existing email server or account details as well. We recommend setting up a SendGrid or MailGun account which are cloud-based email delivery platforms. While both these services have \"free\" tiers, both are commercial products. However, the ease of use in setting up, using and keeping your ISLE system free of additional complex email service or software installations are why they're recommended here. Additional alerts may be contributed by the ISLE maintainers and/or community over time.","title":"Assumptions"},{"location":"optional-components/tickstack/#chronograf-alert-handler-email-setup","text":"While TICK supports a wide variety of alert types and delivery mechanisms we're going to configure the basic alerts using email . You can opt to setup additional alert handlers e.g. Slack, hipChat, pagerDuty and more using the official Chronograf documentation","title":"Chronograf Alert Handler - Email Setup"},{"location":"optional-components/tickstack/#assumptions_3","text":"Prior to starting, you will need to have your SMTP credentials (user name, password and location of the 3rd party email server) at the ready. This information may have been provided to you by your IT department or from when you may have used one of the recommended cloud-based email delivery platforms; SendGrid or MailGun . Please note for Sendgrid email users only , you'll need to create an appropriate API Key for each ISLE host server. Log into your Sendgrid account Navigate to Settings > API Keys Click on the Create API Key button Set the level of API Key Permissions ( recommend Restricted Access ) Set the appropriate level of permissions for each section Copy the generated API Key to a password manager or secure place for documents or documentation. This is the token you'll use to send email with. You'll need to use it again below. For more information as needed: Sendgrid SMTP Documentation","title":"Assumptions"},{"location":"optional-components/tickstack/#chronograf-alert-handler-email-setup-steps","text":"When you have these credentials, click on the Configuration (wrench icon) button on the left hand side of the Chronograf dashboard. Under the Kapacitor Connection column click into the Kapacitor settings dropdown click on the pencil symbol ( Not the trashcan ) If that doesn't work, try navigating to http://yourdomainhere:8888/sources/1/kapacitors/1/edit Within the Configure Alert Endpoints page, click on the SMTP section / button and fill in your creds. Please note, the directions below are for both conventional email and Sendgrid. Only pick one to follow please. For conventional email users: SMTP Host - change localhost to the correct host name SMTP Port - change 25 to the correct port e.g. 465 (SSL) or 587 (TLS) From Email - enter the email account you'll be using to send alerts with To Email - enter the email account you'll be sending alerts to User - enter the username for the email account you'll be using to send alerts with Password - enter the password for the email account you'll be using to send alerts with Click the Configuration Enabled checkbox Click the blue Save Changes button Click the Send Test Alert and confirm that a new test email has been sent to the email account you'll be receiving alerts to /at Move onto the next step, ignoring the Sendgrid information below. For Sendgrid email users only: SMTP Host - change localhost to smtp.sendgrid.net SMTP Port - change 25 to 587 From Email - enter the email account you'll be using to send alerts with To Email - enter the email account you'll be sending alerts to User - Enter the username of apikey Password - Enter the long API key generated from the above steps Click the Configuration Enabled checkbox Click the blue Save Changes button Click the Send Test Alert and confirm that a new test email has been sent to the email account you'll be receiving alerts to /at Move onto the next step. You can now use this delivery mechanism (alert handler) when you set up individual alerts.","title":"Chronograf Alert Handler - Email Setup steps"},{"location":"optional-components/tickstack/#alert-deadman-system","text":"The Deadman Alert handler can be used for any state, system or service. The instructions below are to setup an Alert on your monitored system to email you when the ISLE host system has been unresponsive for a period of time that you choose. This will mean the alert can be triggered by the following events: * The monitored ISLE host server: * has crashed or is \"dead\". * has been shutdown * The ISLE Docker containers: * have been shutdown For more details, please consult the official Kapacitor documentation for this alert handler.","title":"Alert - Deadman (system)"},{"location":"optional-components/tickstack/#assumptions_4","text":"You have already setup an alert handler e.g. the Email Alert handler. Any testing of the alert and involved system should start with a non-production system to avoid downtime or confusion.","title":"Assumptions:"},{"location":"optional-components/tickstack/#alert-deadman-setup-steps","text":"Within your running TICK system dashboard, click on the Alerting section and from the dropdown choose the Manage Tasks link. Click on the blue Build Alert Rule button on the right. Within the Name section, enter a name of your choice for your alert Example: Offline Server Within the Alert Type section, select Deadman Within the Time Series section, select telegraf.autogen from the DB.RetentionPolicy section on the left. Within the Measurements & Tags section, scroll down to the bottom and expand system then host . Please note: There may be a number associated with host , e.g. host-8 , this is how many servers or systems you have reporting to this dashboard and TICK system. Select some or all appropriate hosts, you may have only two (Production and Staging) or you may have more. There will be green dots filling the previously empty checkbox to indicate a selected host. Once selected, click the Group By host button directly above this field. It should now be highlighted in blue. Within the Conditions section, select a value of time from the Send Alert if Data is missing for section's dropdown list. Recommendation: Select a value between 5 and 30 minutes per your alerting needs. Typically we recommend about 5 - 10 mins Within the Alert Handlers section, select email from the Send this Alert to section's dropdown list. This should pre-populate the appropriate fields with your previously configured email alert handler. You will need to add the apppropriate Recipient E-mail Addresses ( the email address you want these alerts to be sent to ) You can opt to add additional formatting for the body of the email as needed but we'll leave this field empty for the purposes of this setup. As a result, you'll get additional JSON formated output in the body of any sent alert email which can be useful for further debugging. Within the Message section, copy and paste the following starter message below into this blank field please. {{ .ID }} - {{ index .Tags \"host\" }} server is {{ .Level }}. Click on the green Save Rule button at the top right hand side of the dashboard. You should get a notification on the Alert webpage that your rule was saved. It is brief, small and disappears quickly. The Alert is now saved and active. You should now see 1 Alert Rule with the name of your alert e.g Offline Server in blue. You should now see 1 TICKscript with the name of your alert e.g Offline Server in green. These two entries are the same alert rule but if you wanted more granular changes, you could edit the green TICKscript to add more specific flux code. These changes once saved would also reflect in the blue Alert rule as well. One is really for GUI access the other for granular code. No further steps are needed other than testing your alert should you choose. (Optional) - Test your alert It is recommended that you test your alert by either: (Fast) - Shut down the ISLE Docker containers running on the monitored system. Shut down your ISLE containers on the monitored system. Wait for the alloted amount of time you choose above. Check your email account for the Alert message with (Critical) in the email header If you get your alert email, great! Restart your ISLE Docker containers Check your email account for the Alert message with (OK) in the email header (Long) _ Shut down your ISLE Docker containers running on the monitored system and then your ISLE host server. Shut down your ISLE containers on the monitored system. Shutdown your monitored ISLE host server. Wait for the alloted amount of time you choose above. Check your email account for the Alert message with (Critical) in the email header. You'll start getting one every minute. If you get your alert email, great! Now restart your server Now restart your Docker containers Check your email account for the Alert message with (OK) in the email header If the alert doesn't show up, then retrace your steps, perhaps use a lower value of time and tune as necessary. Repeat as necessary on either your Production or additional system(s) Please note: If you only want one alert when your server is down, you'll need to edit your TICKScript ( the green one ) and add the following piece of code .stateChangesOnly() to the end of the var trigger = data section, ensure that it is indented and is aligned with the line above it. Then click on the green Save Rule button at the top right hand side of the dashboard.","title":"Alert - Deadman setup steps"},{"location":"optional-components/tickstack/#alert-deadman-flux-code-explanation","text":"{{ .ID }} = Name of the Alert {{ index .Tags \"host\" }} = Name of server {{ .Level }}. = Critical or OK This message is slightly formatted for readability and context. By using this starter message via email effectively you'll get two alerts for the following conditions: When the system (server) is \"down\" or unreachable for the duration of time you selected, you'll get an alert email every minute. For example, the system name is acme-prod : Offline Server-host=acme-server - acme-prod server is CRITICAL. There may be additional information put in the email body for review. It will be formatted in JSON notation. If you only want one alert, you'll need to edit your TICKScript ( the green one ) and add the following piece of code .stateChangesOnly() to the end of the var trigger = data section, ensure that it is indented and is aligned with the line above it. Then click on the green Save Rule button at the top right hand side of the dashboard. Once you've taken manual steps on the affected server to restore connectivity and the ISLE system, its containers and services are effectively backup and running, you'll get a follow-up email that indicates that the server is back up and running. For example: Offline Server-host=acme-prod - acme-prod server is OK There may be additional information put in the email body for review. It will be formatted in JSON notation. Please note: The code suggestions above use Influxdata Flux syntax, for more information on how to change messages and their values please use the official Flux syntax basics documentation for more information.","title":"Alert - Deadman Flux code explanation"},{"location":"optional-components/tickstack/#alert-disk-space","text":"The Disk Space Alert handler can be used to alert you when one or more of your disk(s) are potentially running out of space. The instructions below are to setup an Alert on your monitored ISLE host system to email you when the ISLE host system operating system disk has passed a threshold of 75% disk used (full) capacity. You are welcome to change this threshold to a lower or higher value as needed to give yourself or your IT staff time to anticipate the potential disk growth prior to system challenges or errors. This will mean the alert can be triggered by the following events: * An increase in disk usage by the ISLE host system operating system disk that surpasses 75% usage","title":"Alert - Disk Space"},{"location":"optional-components/tickstack/#assumptions_5","text":"You have already setup an alert handler e.g. the Email Alert handler. Any testing of the alert and involved system should start with a non-production system to avoid downtime or confusion.","title":"Assumptions:"},{"location":"optional-components/tickstack/#alert-disk-space-setup-steps","text":"Within your running TICK system dashboard, click on the Alerting section and from the dropdown choose the Manage Tasks link. Click on the blue Build Alert Rule button on the right. Within the Name section, enter a name of your choice for your alert Example: Disk Space Exceeded Within the Alert Type section, select Threshold Within the Time Series section, select telegraf.autogen from the DB.RetentionPolicy section on the left. Within the Measurements & Tags section, scroll down to the bottom and expand disk then host . Please note: There may be a number associated with host , e.g. host-8 , this is how many servers or systems you have reporting to this dashboard and TICK system. Select some or all appropriate hosts, you may have only two (Production and Staging) or you may have more. There will be green dots filling the previously empty checkbox to indicate a selected host. Once selected, click the Group By host button directly above this field. It should now be highlighted in blue. Within the Fields section, select used_percent There will be green dots filling the previously empty checkbox to indicate a selected field. Within the Conditions section: Select the greater than value in the Send Alert where section dropdown box. This value may be pre-populated by default. Enter the percent value of 90 in the empty Send Alert where used_percent is greater than section's dropdown list. Recommendation: You can change this value as need but a numeric value between 75 and 90 is recommended. Within the Alert Handlers section, select email from the Send this Alert to section's dropdown list. This should pre-populate the appropriate fields with your previously configured email alert handler. You will need to add the apppropriate Recipient E-mail Addresses ( the email address you want these alerts to be sent to ) You can opt to add additional formatting for the body of the email as needed but we'll leave this field empty for the purposes of this setup. As a result, you'll get additional JSON formated output in the body of any sent alert email which can be useful for further debugging. Within the Message section, copy and paste the following starter message below into this blank field please. {{.ID }} - {{ index .Tags \"host\"}} {{ .Name }} usage is at {{ index .Fields \"value\" | printf \"%0.2f\" }}% - {{ .Level }} Click on the green Save Rule button at the top right hand side of the dashboard. You should get a notification on the Alert webpage that your rule was saved. It is brief, small and disappears quickly. The Alert is now saved and active. You should now see 1 Alert Rule with the name of your alert e.g Disk Space Exceeded in blue. You should now see 1 TICKscript with the name of your alert e.g Disk Space Exceeded in green. These two entries are the same alert rule but if you wanted more granular changes, you could edit the green TICKscript to add more specific flux code. These changes once saved would also reflect in the blue Alert rule as well. One is really for GUI access the other for granular code. No further steps are needed other than testing your alert should you choose. (Optional) - Test your alert First, check the current disk usage on your monitored ISLE host system by sshing into the system and running df -h , the output should look something like: Example: Your output below may not match exactly. df -h Filesystem Size Used Avail Use% Mounted on udev 1.9G 0 1.9G 0% /dev tmpfs 389M 1.4M 388M 1% /run /dev/nvme0n1p1 18G 68G 50G 26% / tmpfs 1.9G 0 1.9G 0% /dev/shm tmpfs 5.0M 0 5.0M 0% /run/lock tmpfs 1.9G 0 1.9G 0% /sys/fs/cgroup tmpfs 389M 0 389M 0% /run/user/10000 The system disk used in the example above is mounted on / . Your system disk will also most likely be mounted on / . If you are not sure, check with your IT team or appropriate system administration resource prior to proceeding. You can now test this alert in one of two ways: Method 1: ( Conservative, no test changes on server ) Lowering or raising the percentage to closer match what your current system using in terms of disk capacity. Waiting until the monitored ISLE host server actually exceeds the desired disk capacity percentage, triggers the alert and then tune or adjust as needed. Method 2: ( Faster but caution ahead on using these commands, you'll be creating fake data ) Lower the percentage to closer match what your current system using in terms of disk capacity. Create test conditions to exceed your ISLE system disk usage and trigger the alert. Change the Alert percentage to something closer to the current Use% displayed from the df -h command. Try to set it within 1 percentage point or so of that above value. Create a dummy 1 GB text file on your server. Use your user home directory for this process and not in an ISLE data location. Run dd if=/dev/zero of=file1.txt count=1024 bs=1048576 to create the dummy 1 GB file Check your email account for the Alert message with: For example: Disk Space Alert-host=acme-prod - acme-prod disk usage is at 76.03% - Critical in the email message header If you get your alert email, great! If the alert doesn't show up, then retrace your steps, perhaps use a lower percentage of capacity and tune as necessary. Change the percentage back to the higher value. Repeat as necessary on all additional servers. Delete the dummy file1.txt file Note this will trigger a followup Alert email that the server disk capacity is below the Alert level again and as such \"OK.\" For example: Disk Space Alert-host=acme-prod - acme-prod disk usage is at 45.01% - OK","title":"Alert - Disk Space setup steps"},{"location":"optional-components/tickstack/#alert-disk-space-flux-code-explanation","text":"{{ .ID }} = Name of the Alert {{ index .Tags \"host\" }} = Name of server {{ .Name }}. = Name of impacted service in this case disk {{ index .Fields \"value\" | printf \"%0.2f\" }}% = Reported disk used space from monitored server formatted to display properly in email {{ .Level }}. = Critical or OK This message is slightly formatted for readability and context. By using this starter message via email effectively you'll get two alerts for the following conditions: When the system (server) is passes the disk used % threshold, you'll get an alert email. For example, the system name is acme-prod and the alert is set to 75% : Disk Space Alert-host=acme-prod - acme-prod disk usage is at 76.03% - Critical There may be additional information put in the email body for review. It will be formatted in JSON notation. Once you've taken manual steps on the affected server to increase disk capacity and the ISLE system, its containers and services are effectively backup and running, you'll get a follow-up email that indicates that the disk capacity is back below the given Alert level and thus acceptable. This alert may not always fire due to the involved steps of increasing disk size. You may see this message if using the optional test steps above. For example: Disk Space Alert-host=acme-prod - acme-prod disk usage is at 45.01% - OK There may be additional information put in the email body for review. It will be formatted in JSON notation. Please note: The code suggestions above use Influxdata Flux syntax, for more information on how to change messages and their values please use the official Flux syntax basics documentation for more information.","title":"Alert - Disk Space Flux code explanation"},{"location":"optional-components/tickstack/#alerts-resources","text":"Official Documentation for setting up alerts in Chronograf","title":"Alerts Resources"},{"location":"optional-components/tickstack/#release-notes","text":"Additional changes were made to the ISLE base images to allow for: Log levels to be set by users in the project in the respective environment's .env file ( staging.env or production.env ) Logging in ISLE is now set to stdout and stderr by default instead of log files. Choice in Docker log drivers e.g. syslog vs json , etc. TICK uses the Docker syslog log driver by default. Flexibility for users using monitoring tools other than TICK","title":"Release Notes"},{"location":"optional-components/tickstack/#additional-resources","text":"Influxdata - Company Website Telegraf Documentation Influxdb Documentation Chronograf Documentation Kapacitor Documentation","title":"Additional Resources"},{"location":"optional-components/tickstack/#need-help","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Need Help?"},{"location":"optional-components/varnish/","text":"Varnish: Caching Performance and Accelerator Use Cases & User Stories As a repository administrator, I expect that ISLE allows use of server-side caching to optimize the end-user experience without any input from me. If I have a complex pages (including Solr search results), then I expect ISLE provides an optional HTTP accelerator to deliver cached versions Negative user story: I do not expect that this optional HTTP accelerator will necessarily speed up asset delivery. Various Islandora components have their own caches for this purpose. ISLE documentation should, however, direct repository administrators to good resources if they have this use case. As a repository browser, I expect to be able to performantly browse an Islandora site, taking advantage of server-side caching to ensure speedy delivery of frequently-viewed pages. As a repository administrator, I expect to find clear documentation about how and why to configure varnish to meet my repository's unique needs. As a repository administrator, I expect to be able to easily clear the Varnish cache to view changes to the site in real time. New Functionality The isle-varnish image was built using Varnish software to improve end-user performance when and if Drupal/Apache performance is inadequate for high-traffic production environments. Varnish can help to reduce load on the Apache web server and to increase the responsiveness of the Drupal site and Solr searches. The ISLE Varnish configuration uses an memory (RAM) based cache or malloc with a default setting of 256 MB which can and should be increased as needed. If you need to read more about how to use or change Varnish's cache settings, please start here Note: There is a new Docker ENV setting within the production.env which allows users to dynamically increase or decrease the amount of stored materials within the Varnish malloc cache. ## Varnish Cache Memory Allocation VARNISH_MALLOC=256m The Drupal module Varnish will need to be installed on the Drupal / Islandora site to provide further integration between the Varnish container and your website. There is an included script (isle_varnish_drupal_module_installer.sh) to install enable and configure the Drupal module on an existing site found in the ISLE scripts/varnish directory. This script will also include the Drupal Purge and Expire modules. System Requirements ISLE release version 1.4.2 git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Existing ISLE Local, Staging and Production systems and running websites Existing ISLE git repository Existing Drupal / Islandora git repository Ability to allocate additional free memory to the Varnish container as needed. The tuning and configuration of Varnish can vary based on system resources and traffic, as we recommend that you start out with a smaller memory allocation and test the results. Example configuration for a Production ISLE host server using 16 GB of memory. Expect to allocate about 40 - 50% of the host server memory for all of the Java / Tomcat based images isle-fedora should have the most e.g. 4096 MB or 4 GB isle-solr should have the second most e.g. 2048 MB or 2 GB isle-imageservices should have the third most e.g. 1024 MB or 1 GB If using isle-blazegraph , this image should also be using a minimum of 4096 MB or 4 GB of memory Keep about 2 -3 GB free for the remaining images e.g. isle-apache , isle-mysql etc. This would leave you roughly 1 - 2 GB to allocate to the Varnish cache. Start with 256 to 512 MB and work your way up as needed. You can adjust the amount that Varnish puts into memory in the supplied .env file On the line: VARNISH_MALLOC=256m you can change the amount of memory to a higher value other than the default 256 Megabytes. We recommend that you start with 1-2 GB for now to tune further as your resources and needs warrant. There are additional potential memory allocation and tuning recommendations for Varnish from Varnish-software If you need to read more about how to use or change Varnish's cache settings, please start here Recommendation: Adding more memory to the Production ISLE host system from the default recommended 16 GB might be recommended here if running all optional components e.g. isle-varnish , isle-blazegraph , the TICK stack, etc. There is no new software required on any ISLE host machine. ISLE Images Following the installation steps below, an end user will configure / edit their ISLE running system(s) to ultimately use the following images and tags from Docker-Hub: Service Repository Tag Apache islandoracollabgroup/isle-apache 1.4.2 Blazegraph islandoracollabgroup/isle-blazegraph 1.4.2 Fedora islandoracollabgroup/isle-fedora 1.4.2 Image-services islandoracollabgroup/isle-imageservices 1.4.2 MySQL islandoracollabgroup/isle-mysql 1.4.2 Portainer portainer/portainer latest Solr islandoracollabgroup/isle-solr 1.4.2 Traefik traefik/traefik 1.7.9 Varnish islandoracollabgroup/isle-varnish 1.4.2 Adoption Process Overview The installation instructions below will walk you through how to setup and run the optional Varnish container on only your ISLE Production system to cache assets for highly trafficked Islandora sites in addition to adding new Drupal modules to your existing Production Drupal / Islandora website to interact and manage the Varnish cache. Note: : ISLE end users are of course welcome to run Varnish on their Staging systems if they want but it is recommended that end users simply test on their Local instances, deploy code changes to both Staging and Production but only run Varnish on their Production ISLE systems. You'll start by backing up all important data as needed. On your Local ISLE Apache container, you'll run the Varnish installation script and then check in the resulting Drupal code changes into your Islandora / Drupal git repository. Following best practices of \"code up and data down\", pull the resulting Drupal code changes from your Local upstream to your Staging and Production systems. You'll download ISLE images along with a new ISLE image called isle-varnish You'll make additional edits and modifications to the following ISLE configuration files on your Local system, check them into git and then pull the code on your Staging and Production systems. docker-compose.production.yml & docker-compose.local.yml Uncommenting the varnish service section Commenting out a line in the apache service section production.env & local.env Making any necessary edits to the new Varnish ENV section You'll perform a docker-compose pull to pull down any new images. You'll restart your containers with the new services having been added and configured. You'll install the new Drupal module called Varnish. You can employ some of the methods mentioned below to ensure that the new Varnish caching service is working. You can use the production.env to change settings and \"tune\" the resource allocation for Varnish. Installation Assumptions Prior to installation, end user will have a running ISLE system using the current release of 1.4.2. images. This installation process will give the functionality as stated in the Systems Requirements image table above for Varnish testing and usage. Running ISLE Local, Staging and Production sites and systems with ingested objects and content. Installation Instructions ISLE Local Development Shut down your running containers on your ISLE Local instance. docker-compose down Edit File: docker-compose.production.yml Within your docker-compose.production.yml & docker-compose.local.yml files, you'll need to uncomment the following section: Example: docker-compose.local.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache # varnish: # image: islandoracollabgroup/isle-varnish:1.5.0 # container_name: isle-varnish-${CONTAINER_SHORT_ID} # env_file: # - local.env # - .env # networks: # isle-internal: # depends_on: # - mysql # - fedora # - solr # - apache # - traefik # labels: # - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal # - traefik.port=6081 # - traefik.enable=true # - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" # logging: # driver: syslog # options: # tag: \"{{.Name}}\" # END - Varnish service section so that it will now look like this and its formatting should line up appropriately with other ISLE services. Example: docker-compose.local.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache varnish: image: islandoracollabgroup/isle-varnish:1.5.0 container_name: isle-varnish-${CONTAINER_SHORT_ID} env_file: - local.env - .env networks: isle-internal: depends_on: - mysql - fedora - solr - apache - traefik labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.port=6081 - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" logging: driver: syslog options: tag: \"{{.Name}}\" # END - Varnish service section Example: docker-compose.production.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache # varnish: # image: islandoracollabgroup/isle-varnish:1.5.0 # container_name: isle-varnish-${CONTAINER_SHORT_ID} # env_file: # - production.env # - .env # networks: # isle-internal: # depends_on: # - mysql # - fedora # - solr # - apache # - traefik # labels: # - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal # - traefik.port=6081 # - traefik.enable=true # - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" # logging: # driver: syslog # options: # tag: \"{{.Name}}\" # END - Varnish service section so that it will now look like this and its formatting should line up appropriately with other ISLE services. Example: docker-compose.production.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache varnish: image: islandoracollabgroup/isle-varnish:1.5.0 container_name: isle-varnish-${CONTAINER_SHORT_ID} env_file: - production.env - .env networks: isle-internal: depends_on: - mysql - fedora - solr - apache - traefik labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.port=6081 - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" logging: driver: syslog options: tag: \"{{.Name}}\" # END - Varnish service section Note: If you are not using TICK with your Production system, then you don't need to uncomment the entire logging: area and lines. Leave them uncommented. Comment out the last line in your apache service labels section so that Varnish can \"take over\" handling and routing web traffic. labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.enable=true # - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /adore-djatoka, /cantaloupe\" No change to traefik service: the varnish service now handles web traffic to your main domain. Varnish Edit File(s): production.env & local.env Within your production.env and local.env file`, you'll need to uncomment the following section and lines so that: ## Varnish ## Varnish Admin port is 6082 ## varnish is substituted for default value of localhost to be open to apache ## otherwise Drupal varnish module cannot connect via CLI #VARNISH_ADMIN=varnish #VARNISH_ADMIN_PORT=6082 ## Varnish backend ## the apache service is the \"backend\" for varnish #VARNISH_BACKEND=apache #VARNISH_BACKEND_PORT=80 ## Varnish Cache Memory Allocation #VARNISH_MALLOC=256m ## Maximum amount of connections #VARNISH_MAX_CONNECTIONS=300 ## Varnish secret aka Control key #VARNISH_SECRET=isle_varnish_secret ## Varnish port #VARNISH_VARNISH_PORT=6081 becomes: ## Varnish ## Varnish Admin port is 6082 ## varnish is substituted for default value of localhost to be open to apache ## otherwise Drupal varnish module cannot connect via CLI VARNISH_ADMIN=varnish VARNISH_ADMIN_PORT=6082 ## Varnish backend ## the apache service is the \"backend\" for varnish VARNISH_BACKEND=apache VARNISH_BACKEND_PORT=80 ## Varnish Cache Memory Allocation VARNISH_MALLOC=256m ## Maximum amount of connections VARNISH_MAX_CONNECTIONS=300 ## Varnish secret aka Control key VARNISH_SECRET=isle_varnish_secret ## Varnish port VARNISH_VARNISH_PORT=6081 Note: ISLE end users should only make edits or changes to the following lines: VARNISH_MALLOC=256m - you can increase this default setting as needed otherwise leave the default. VARNISH_MAX_CONNECTIONS=300 - you can increase this default setting as needed otherwise leave the default. VARNISH_SECRET=isle_varnish_secret - you can change this value to any alpha-numeric sequence. Pull down the new isle images docker-compose pull Spin up new containers docker-compose up -d Install the Varnish Drupal modules on your Local Drupal site Use the supplied installer script: ( Examples given below, you may need to change container ids and paths accordingly to match your local environment ) On the Production host server, copy this script to your apache container. Replace {{ container_short_id }} with your respective Local container id. docker cp scripts/varnish/isle_varnish_drupal_module_installer.sh isle-apache-{{ container_short_id }}:/var/www/html/isle_varnish_drupal_installer.sh Change permissions on the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html/ && chmod +x isle_varnish_drupal_installer.sh\" Run the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html && ./isle_varnish_drupal_installer.sh\" Commit the changed files to your Islandora / Drupal git repository. Navigate to this path on your Local host machine, typically this is the path bind-mounted in your docker-compose.local.yml to the Apache container's /var/www/html directory git status - this will show you all of the changed files. git add path/file - add each changed file as necessary git commit -m \"Adding Varnish Drupal modules\" - Your git message can be anything of your choosing git push origin your_git_branch - Replace your_git_branch with the actual git branch you are using for Islandora / Drupal development You can now access this new module in the Home >> Administration >> Configuration >> Development >> Varnish section of your Drupal site. Please note: We recommend the following settings. All other settings should be handled by the vsets within the installer script. Flush page cache on cron? set to Disabled Varnish version set to 4.x Varnish Control Key Append newline checkbox should be checked with a check mark The Front domains list can be left empty Varnish Cache Clearing set to Drupal Default Varnish ban type set to Normal All other settings e.g. Varnish Control Terminal and Varnish Control Key are handled by the local.env ENV variables. ( if testing on local ) There will also be two other new Drupal modules to access and use: Purge - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb Development \u00bb Performance The setting here is handled by the installer script, vset and Varnish ENV. No need to change this value by the end user. Cache Expiration - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb System The setting here is initially handled by the installer script, vset and Varnish ENV. End user can modify as needed but a further explanation beyond default settings is out of scope of this document. Recommend using this Drupal modules help page if needed. There should be a nice green checkmark at the bottom to indicate Varnish running once / if you have also spun up the Varnish container. If you choose to not spin up and configure the Varnish container on your Local, your Local ISLE system will continue to run properly but these three Drupal modules may have a red warning or two about not being able to connect to Varnish. If testing Varnish on your Local, open up a web browser and navigate to your Local website. If you recently restarted your Docker containers, this may take a few minutes depending on the size of the site. You might first see a Traefik Bad Gateway page for a minute or two. You'll need to refresh the page. You might then see a Varnish followed by a Error 503 Backend fetch failed page for a minute or two. You'll need to again refresh the page. Example: Varnish error upon site startup. You should now see your Drupal website after a few minutes. Example Varnish error Error 503 Backend fetch failed Backend fetch failed Guru Meditation: XID: 3 Varnish cache server If continuing to test on your Local, please review the section below How to verify that Varnish is working for available testing methods. Once satisfied that everything is running properly on your Local, move onto the Deployment to Production and Staging section. Deployment to Production and Staging Once satisfied that everything is running properly on your Local, you'll need to commit all remaining ISLE config changes as well to push upstream to your Production instance. While you can keep Varnish running on your local, we suggest that you instead back out the ISLE config changes on your Local and only keep them on Production. Commit the changed files to your ISLE git repository. Navigate to the root of your ISLE project via a terminal or git GUI client. git status - this will show you all of the changed files. git add path/file - add each changed file as necessary git commit -m \"Adding Varnish to Production\" - Your git message can be anything of your choosing git push origin main - ( Replace main with the actual git branch you are using for ISLE development if needed ) Quick Deployment to Staging for Code Parity On your Staging system: Shutdown your containers from your ISLE project directory root found typically in /opt/ docker-compose down Run git pull origin main - ( Replace main with the actual git branch you are using for ISLE development if needed ) While you may not be deploying Varnish to your Staging system, it is a wise idea to not have code drift. Repeat this process with your Islandora / Drupal code to ensure parity between Staging and Production Spin your containers back up Run the supplied installer script: ( Examples given below, you may need to change container ids and paths accordingly to match your Staging environment ) On the Staging host server, copy this script to your apache container. Replace {{ container_short_id }} with your respective Staging container id. docker cp scripts/varnish/isle_varnish_drupal_module_installer.sh isle-apache-{{ container_short_id }}:/var/www/html/isle_varnish_drupal_installer.sh Change permissions on the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html/ && chmod +x isle_varnish_drupal_installer.sh\" Run the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html && ./isle_varnish_drupal_installer.sh\" The script will complain about the Drupal modules being enabled but will complete. Perform a quick QC of the site and system to ensure no issues have resulted. Once finished move onto deploying to Production Deployment to Production On your Production system: Shutdown your containers from your ISLE project directory root found typically in /opt/ docker-compose down Run git pull origin main - ( Replace main with the actual git branch you are using for ISLE development if needed ) Repeat this process with your Islandora / Drupal code using the appropriate git branch as needed Pull down the new isle images docker-compose pull Spin up new containers docker-compose up -d Run the supplied installer script: ( Examples given below, you may need to change container ids and paths accordingly to match your Production environment ) On the Production host server, copy this script to your apache container. Replace {{ container_short_id }} with your respective Staging container id. docker cp scripts/varnish/isle_varnish_drupal_module_installer.sh isle-apache-{{ container_short_id }}:/var/www/html/isle_varnish_drupal_installer.sh Change permissions on the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html/ && chmod +x isle_varnish_drupal_installer.sh\" Run the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html && ./isle_varnish_drupal_installer.sh\" The script will complain about the Drupal modules being enabled but will complete. You can now access this new module in the Home >> Administration >> Configuration >> Development >> Varnish section of your Drupal site. Please note: We recommend the following settings. All other settings should be handled by the vsets within the installer script. Flush page cache on cron? set to Disabled Varnish version set to 4.x Varnish Control Key Append newline checkbox should be checked with a check mark The Front domains list can be left empty Varnish Cache Clearing set to Drupal Default Varnish ban type set to Normal All other settings e.g. Varnish Control Terminal and Varnish Control Key are handled by the production.env ENV variables. There will also be two other new Drupal modules to access and use: Purge - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb Development \u00bb Performance The setting here is handled by the installer script, vset and Varnish ENV. No need to change this value by the end user. Cache Expiration - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb System The setting here is initially handled by the installer script, vset and Varnish ENV. End user can modify as needed but a further explanation beyond default settings is out of scope of this document. Recommend using this Drupal modules help page if needed. There should be a nice green checkmark at the bottom to indicate Varnish running once / if you have also spun up the Varnish container. If any of the three Drupal modules have a red warning or two about not being able to connect to Varnish, then you'll need to retrace your steps and troubleshoot. Open up a web browser and navigate to your Production website. If you recently restarted your Docker containers, this may take a few minutes depending on the size of the site. You might first see a Traefik Bad Gateway page for a minute or two. You'll need to refresh the page. You might then see a Varnish followed by a Error 503 Backend fetch failed page for a minute or two. You'll need to again refresh the page. Example: Varnish error upon site startup. You should now see your Drupal website after a few minutes. Example Varnish error Error 503 Backend fetch failed Backend fetch failed Guru Meditation: XID: 3 Varnish cache server If continuing to test on your Production system, please review the section below How to verify that Varnish is working for available testing methods. We also recommend a final QC on your Production system, reviewing all logs, displayed objects and searches. How to Verify That Varnish Is Working Any of these methods below will work for testing on your Local or general use on Production Method 1 - Visit Your Website in a Web Browser Open up a web browser and navigate to your website. If you recently restarted your Docker containers, this may take a few minutes depending on the size of the site. You might first see a Traefik Bad Gateway page for a minute or two. You'll need to refresh the page. You might then see a Varnish followed by a Error 503 Backend fetch failed page for a minute or two. You'll need to again refresh the page. Example: Varnish error upon site startup. Error 503 Backend fetch failed Backend fetch failed Guru Meditation: XID: 3 Varnish cache server You should now see your website after a few minutes. Method 2 - Inspect the Headers on One of Your Site's Webpages Launch a web browser ( Chrome., Safari or Firefox ) and navigate to your website To inspect the headers, right click on the page and choose Inspect This should launch the browser's built-in tools suite, select Network You'll need to refresh / reload the page again to see objects Look for the page URL and click on it. You should see entries like the following: via: 1.1 varnish-v4 x-cache: HIT x-cache-hits: 2 Method 3 - Curl a URL and Review the Headers Run a curl command on your local laptop to your site with curl -I https://yourwebsitehere.com The output should look something like this example output below: curl -I https://demo.born-digital.com HTTP/2 200 accept-ranges: bytes age: 2075 cache-control: public, max-age=10800 content-language: en content-type: text/html; charset=utf-8 date: Mon, 23 Sep 2019 19:27:42 GMT etag: W/\"1569264015-0-gzip\" expires: Sun, 19 Nov 1978 05:00:00 GMT last-modified: Mon, 23 Sep 2019 18:40:15 GMT server: Apache/2.4.41 (Ubuntu) vary: Cookie,Accept-Encoding via: 1.1 varnish-v4 x-cache: HIT x-cache-hits: 19 x-content-type-options: nosniff x-drupal-cache: HIT x-frame-options: SAMEORIGIN x-generator: Drupal 7 (http://drupal.org) x-varnish: 983097 3 Note: This information below is a callout for the end user to understand indicates that Varnish is not only caching the page but the Varnish cache has received previous \"hits\" or requests for this page and its contents. via: 1.1 varnish-v4 x-cache: HIT x-cache-hits: 19 Method 4 - Backend Tools You can use tools like varnishtop , varnishstat , varnishlog or varnishhist to view traffic on the Varnish container. Please navigate down to the Varnish utilities and tools section for more details. How to Clear the Varnish Cache Every time the Varnish container is stopped and restarted, the Varnish cache will be reset and rebuilt. ( Easiest and most recommended method ) Shell into the Varnish container ( Shouldn't involve restarting the container ). Replace {{ container_short_id }} with your respective container id. docker exec -it isle-varnish-{{ container_short_id }} bash varnishadm -T 127.0.0.1:6082 url.purge . Additional curl commands and vcl edits can be found within the Varnish 4.1 documentation Varnish Utilities and Tools There are multiple tools that can be used to interact with the Varnish cache. All will require that you use them on the running Varnish container. varnishtop - The varnishtop utility reads varnishd shared memory logs and presents a continuously updated list of the most commonly occurring log entries. varnishstat - for Varnish cache statistics varnishlog - a utility that can read the contents of the in-memory log that Varnish provides varnishhist - The varnishhist utility reads varnishd(1) shared memory logs and presents a continuously updated histogram varnishadm - type in varnishadm and then help for additional commands. Utility used to control the Varnish cache. Additional commands can be found in the Varnish Reporting & Statistics section Using Varnish & the TICK Stack Please first follow the instructions for installing and using the TICK stack If you're pushing log events to TICK , this snippet of code below ( logging instructions ) at the bottom of every ISLE service within your docker-compose.production.yml file should be uncommented. This should include the Varnish service. By default the uncommented Varnish section in the Production docker-compose.production.yml file will have this snippet of code below. logging: driver: syslog options: tag: \"{{.Name}}\" Example: varnish: image: islandoracollabgroup/isle-varnish:1.5.0 container_name: isle-varnish-${CONTAINER_SHORT_ID} env_file: - .env networks: isle-internal: depends_on: - mysql - fedora - solr - apache - traefik labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.port=6081 - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /adore-djatoka, /cantaloupe\" logging: driver: syslog options: tag: \"{{.Name}}\" Uninstallation Instructions Shutdown the ISLE containers on your Local system Comment out the Varnish service section in either of the docker-compose.production.yml or docker-compose.local.yml file(s) Uncomment the last line in the Apache labels section in either of the docker-compose.production.yml or docker-compose.local.yml file(s) Comment out the Varnish section again in the production.env or local.env file Startup the ISLE containers again. Shell into the Apache container cd /var/www/html drush dis varnish purge expire drush pm-uninstall varnish purge expire Commit the resulting code changes in both the ISLE and Islandora git repositories. Deploy these changes to your Staging and Production systems Need Help? We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here. Additional Resources Varnish 4.1.x Documentation The Varnish Users Guide Note: : Varnish Software is the commercial wing of the Varnish. Varnish Admin Console is a paid not for free product that is a GUI for Varnish Cache. The language around this feature is vague and sometimes misleadingly used in tutorials as software anyone can use. There are trials but ultimately this is a paid product. Varnish Cache is the open-source project maintained by Varnish Software and intended to be used by anyone for free.","title":"Varnish"},{"location":"optional-components/varnish/#varnish-caching-performance-and-accelerator","text":"","title":"Varnish: Caching Performance and Accelerator"},{"location":"optional-components/varnish/#use-cases-user-stories","text":"As a repository administrator, I expect that ISLE allows use of server-side caching to optimize the end-user experience without any input from me. If I have a complex pages (including Solr search results), then I expect ISLE provides an optional HTTP accelerator to deliver cached versions Negative user story: I do not expect that this optional HTTP accelerator will necessarily speed up asset delivery. Various Islandora components have their own caches for this purpose. ISLE documentation should, however, direct repository administrators to good resources if they have this use case. As a repository browser, I expect to be able to performantly browse an Islandora site, taking advantage of server-side caching to ensure speedy delivery of frequently-viewed pages. As a repository administrator, I expect to find clear documentation about how and why to configure varnish to meet my repository's unique needs. As a repository administrator, I expect to be able to easily clear the Varnish cache to view changes to the site in real time.","title":"Use Cases &amp; User Stories"},{"location":"optional-components/varnish/#new-functionality","text":"The isle-varnish image was built using Varnish software to improve end-user performance when and if Drupal/Apache performance is inadequate for high-traffic production environments. Varnish can help to reduce load on the Apache web server and to increase the responsiveness of the Drupal site and Solr searches. The ISLE Varnish configuration uses an memory (RAM) based cache or malloc with a default setting of 256 MB which can and should be increased as needed. If you need to read more about how to use or change Varnish's cache settings, please start here Note: There is a new Docker ENV setting within the production.env which allows users to dynamically increase or decrease the amount of stored materials within the Varnish malloc cache. ## Varnish Cache Memory Allocation VARNISH_MALLOC=256m The Drupal module Varnish will need to be installed on the Drupal / Islandora site to provide further integration between the Varnish container and your website. There is an included script (isle_varnish_drupal_module_installer.sh) to install enable and configure the Drupal module on an existing site found in the ISLE scripts/varnish directory. This script will also include the Drupal Purge and Expire modules.","title":"New Functionality"},{"location":"optional-components/varnish/#system-requirements","text":"ISLE release version 1.4.2 git clone https://github.com/Islandora-Collaboration-Group/ISLE.git Existing ISLE Local, Staging and Production systems and running websites Existing ISLE git repository Existing Drupal / Islandora git repository Ability to allocate additional free memory to the Varnish container as needed. The tuning and configuration of Varnish can vary based on system resources and traffic, as we recommend that you start out with a smaller memory allocation and test the results. Example configuration for a Production ISLE host server using 16 GB of memory. Expect to allocate about 40 - 50% of the host server memory for all of the Java / Tomcat based images isle-fedora should have the most e.g. 4096 MB or 4 GB isle-solr should have the second most e.g. 2048 MB or 2 GB isle-imageservices should have the third most e.g. 1024 MB or 1 GB If using isle-blazegraph , this image should also be using a minimum of 4096 MB or 4 GB of memory Keep about 2 -3 GB free for the remaining images e.g. isle-apache , isle-mysql etc. This would leave you roughly 1 - 2 GB to allocate to the Varnish cache. Start with 256 to 512 MB and work your way up as needed. You can adjust the amount that Varnish puts into memory in the supplied .env file On the line: VARNISH_MALLOC=256m you can change the amount of memory to a higher value other than the default 256 Megabytes. We recommend that you start with 1-2 GB for now to tune further as your resources and needs warrant. There are additional potential memory allocation and tuning recommendations for Varnish from Varnish-software If you need to read more about how to use or change Varnish's cache settings, please start here Recommendation: Adding more memory to the Production ISLE host system from the default recommended 16 GB might be recommended here if running all optional components e.g. isle-varnish , isle-blazegraph , the TICK stack, etc. There is no new software required on any ISLE host machine.","title":"System Requirements"},{"location":"optional-components/varnish/#isle-images","text":"Following the installation steps below, an end user will configure / edit their ISLE running system(s) to ultimately use the following images and tags from Docker-Hub: Service Repository Tag Apache islandoracollabgroup/isle-apache 1.4.2 Blazegraph islandoracollabgroup/isle-blazegraph 1.4.2 Fedora islandoracollabgroup/isle-fedora 1.4.2 Image-services islandoracollabgroup/isle-imageservices 1.4.2 MySQL islandoracollabgroup/isle-mysql 1.4.2 Portainer portainer/portainer latest Solr islandoracollabgroup/isle-solr 1.4.2 Traefik traefik/traefik 1.7.9 Varnish islandoracollabgroup/isle-varnish 1.4.2","title":"ISLE Images"},{"location":"optional-components/varnish/#adoption-process-overview","text":"The installation instructions below will walk you through how to setup and run the optional Varnish container on only your ISLE Production system to cache assets for highly trafficked Islandora sites in addition to adding new Drupal modules to your existing Production Drupal / Islandora website to interact and manage the Varnish cache. Note: : ISLE end users are of course welcome to run Varnish on their Staging systems if they want but it is recommended that end users simply test on their Local instances, deploy code changes to both Staging and Production but only run Varnish on their Production ISLE systems. You'll start by backing up all important data as needed. On your Local ISLE Apache container, you'll run the Varnish installation script and then check in the resulting Drupal code changes into your Islandora / Drupal git repository. Following best practices of \"code up and data down\", pull the resulting Drupal code changes from your Local upstream to your Staging and Production systems. You'll download ISLE images along with a new ISLE image called isle-varnish You'll make additional edits and modifications to the following ISLE configuration files on your Local system, check them into git and then pull the code on your Staging and Production systems. docker-compose.production.yml & docker-compose.local.yml Uncommenting the varnish service section Commenting out a line in the apache service section production.env & local.env Making any necessary edits to the new Varnish ENV section You'll perform a docker-compose pull to pull down any new images. You'll restart your containers with the new services having been added and configured. You'll install the new Drupal module called Varnish. You can employ some of the methods mentioned below to ensure that the new Varnish caching service is working. You can use the production.env to change settings and \"tune\" the resource allocation for Varnish.","title":"Adoption Process Overview"},{"location":"optional-components/varnish/#installation","text":"","title":"Installation"},{"location":"optional-components/varnish/#assumptions","text":"Prior to installation, end user will have a running ISLE system using the current release of 1.4.2. images. This installation process will give the functionality as stated in the Systems Requirements image table above for Varnish testing and usage. Running ISLE Local, Staging and Production sites and systems with ingested objects and content.","title":"Assumptions"},{"location":"optional-components/varnish/#installation-instructions","text":"","title":"Installation Instructions"},{"location":"optional-components/varnish/#isle-local-development","text":"Shut down your running containers on your ISLE Local instance. docker-compose down","title":"ISLE Local Development"},{"location":"optional-components/varnish/#edit-file-docker-composeproductionyml","text":"Within your docker-compose.production.yml & docker-compose.local.yml files, you'll need to uncomment the following section: Example: docker-compose.local.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache # varnish: # image: islandoracollabgroup/isle-varnish:1.5.0 # container_name: isle-varnish-${CONTAINER_SHORT_ID} # env_file: # - local.env # - .env # networks: # isle-internal: # depends_on: # - mysql # - fedora # - solr # - apache # - traefik # labels: # - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal # - traefik.port=6081 # - traefik.enable=true # - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" # logging: # driver: syslog # options: # tag: \"{{.Name}}\" # END - Varnish service section so that it will now look like this and its formatting should line up appropriately with other ISLE services. Example: docker-compose.local.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache varnish: image: islandoracollabgroup/isle-varnish:1.5.0 container_name: isle-varnish-${CONTAINER_SHORT_ID} env_file: - local.env - .env networks: isle-internal: depends_on: - mysql - fedora - solr - apache - traefik labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.port=6081 - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" logging: driver: syslog options: tag: \"{{.Name}}\" # END - Varnish service section Example: docker-compose.production.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache # varnish: # image: islandoracollabgroup/isle-varnish:1.5.0 # container_name: isle-varnish-${CONTAINER_SHORT_ID} # env_file: # - production.env # - .env # networks: # isle-internal: # depends_on: # - mysql # - fedora # - solr # - apache # - traefik # labels: # - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal # - traefik.port=6081 # - traefik.enable=true # - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" # logging: # driver: syslog # options: # tag: \"{{.Name}}\" # END - Varnish service section so that it will now look like this and its formatting should line up appropriately with other ISLE services. Example: docker-compose.production.yml # Start - Varnish service section ## (Optional-component): Uncomment lines below to run ISLE with the Varnish cache varnish: image: islandoracollabgroup/isle-varnish:1.5.0 container_name: isle-varnish-${CONTAINER_SHORT_ID} env_file: - production.env - .env networks: isle-internal: depends_on: - mysql - fedora - solr - apache - traefik labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.port=6081 - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe\" logging: driver: syslog options: tag: \"{{.Name}}\" # END - Varnish service section Note: If you are not using TICK with your Production system, then you don't need to uncomment the entire logging: area and lines. Leave them uncommented. Comment out the last line in your apache service labels section so that Varnish can \"take over\" handling and routing web traffic. labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.enable=true # - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /adore-djatoka, /cantaloupe\" No change to traefik service: the varnish service now handles web traffic to your main domain.","title":"Edit File: docker-compose.production.yml"},{"location":"optional-components/varnish/#varnish-edit-files-productionenv-localenv","text":"Within your production.env and local.env file`, you'll need to uncomment the following section and lines so that: ## Varnish ## Varnish Admin port is 6082 ## varnish is substituted for default value of localhost to be open to apache ## otherwise Drupal varnish module cannot connect via CLI #VARNISH_ADMIN=varnish #VARNISH_ADMIN_PORT=6082 ## Varnish backend ## the apache service is the \"backend\" for varnish #VARNISH_BACKEND=apache #VARNISH_BACKEND_PORT=80 ## Varnish Cache Memory Allocation #VARNISH_MALLOC=256m ## Maximum amount of connections #VARNISH_MAX_CONNECTIONS=300 ## Varnish secret aka Control key #VARNISH_SECRET=isle_varnish_secret ## Varnish port #VARNISH_VARNISH_PORT=6081 becomes: ## Varnish ## Varnish Admin port is 6082 ## varnish is substituted for default value of localhost to be open to apache ## otherwise Drupal varnish module cannot connect via CLI VARNISH_ADMIN=varnish VARNISH_ADMIN_PORT=6082 ## Varnish backend ## the apache service is the \"backend\" for varnish VARNISH_BACKEND=apache VARNISH_BACKEND_PORT=80 ## Varnish Cache Memory Allocation VARNISH_MALLOC=256m ## Maximum amount of connections VARNISH_MAX_CONNECTIONS=300 ## Varnish secret aka Control key VARNISH_SECRET=isle_varnish_secret ## Varnish port VARNISH_VARNISH_PORT=6081 Note: ISLE end users should only make edits or changes to the following lines: VARNISH_MALLOC=256m - you can increase this default setting as needed otherwise leave the default. VARNISH_MAX_CONNECTIONS=300 - you can increase this default setting as needed otherwise leave the default. VARNISH_SECRET=isle_varnish_secret - you can change this value to any alpha-numeric sequence. Pull down the new isle images docker-compose pull Spin up new containers docker-compose up -d Install the Varnish Drupal modules on your Local Drupal site Use the supplied installer script: ( Examples given below, you may need to change container ids and paths accordingly to match your local environment ) On the Production host server, copy this script to your apache container. Replace {{ container_short_id }} with your respective Local container id. docker cp scripts/varnish/isle_varnish_drupal_module_installer.sh isle-apache-{{ container_short_id }}:/var/www/html/isle_varnish_drupal_installer.sh Change permissions on the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html/ && chmod +x isle_varnish_drupal_installer.sh\" Run the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html && ./isle_varnish_drupal_installer.sh\" Commit the changed files to your Islandora / Drupal git repository. Navigate to this path on your Local host machine, typically this is the path bind-mounted in your docker-compose.local.yml to the Apache container's /var/www/html directory git status - this will show you all of the changed files. git add path/file - add each changed file as necessary git commit -m \"Adding Varnish Drupal modules\" - Your git message can be anything of your choosing git push origin your_git_branch - Replace your_git_branch with the actual git branch you are using for Islandora / Drupal development You can now access this new module in the Home >> Administration >> Configuration >> Development >> Varnish section of your Drupal site. Please note: We recommend the following settings. All other settings should be handled by the vsets within the installer script. Flush page cache on cron? set to Disabled Varnish version set to 4.x Varnish Control Key Append newline checkbox should be checked with a check mark The Front domains list can be left empty Varnish Cache Clearing set to Drupal Default Varnish ban type set to Normal All other settings e.g. Varnish Control Terminal and Varnish Control Key are handled by the local.env ENV variables. ( if testing on local ) There will also be two other new Drupal modules to access and use: Purge - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb Development \u00bb Performance The setting here is handled by the installer script, vset and Varnish ENV. No need to change this value by the end user. Cache Expiration - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb System The setting here is initially handled by the installer script, vset and Varnish ENV. End user can modify as needed but a further explanation beyond default settings is out of scope of this document. Recommend using this Drupal modules help page if needed. There should be a nice green checkmark at the bottom to indicate Varnish running once / if you have also spun up the Varnish container. If you choose to not spin up and configure the Varnish container on your Local, your Local ISLE system will continue to run properly but these three Drupal modules may have a red warning or two about not being able to connect to Varnish. If testing Varnish on your Local, open up a web browser and navigate to your Local website. If you recently restarted your Docker containers, this may take a few minutes depending on the size of the site. You might first see a Traefik Bad Gateway page for a minute or two. You'll need to refresh the page. You might then see a Varnish followed by a Error 503 Backend fetch failed page for a minute or two. You'll need to again refresh the page. Example: Varnish error upon site startup. You should now see your Drupal website after a few minutes. Example Varnish error Error 503 Backend fetch failed Backend fetch failed Guru Meditation: XID: 3 Varnish cache server If continuing to test on your Local, please review the section below How to verify that Varnish is working for available testing methods. Once satisfied that everything is running properly on your Local, move onto the Deployment to Production and Staging section.","title":"Varnish Edit File(s): production.env &amp; local.env"},{"location":"optional-components/varnish/#deployment-to-production-and-staging","text":"Once satisfied that everything is running properly on your Local, you'll need to commit all remaining ISLE config changes as well to push upstream to your Production instance. While you can keep Varnish running on your local, we suggest that you instead back out the ISLE config changes on your Local and only keep them on Production. Commit the changed files to your ISLE git repository. Navigate to the root of your ISLE project via a terminal or git GUI client. git status - this will show you all of the changed files. git add path/file - add each changed file as necessary git commit -m \"Adding Varnish to Production\" - Your git message can be anything of your choosing git push origin main - ( Replace main with the actual git branch you are using for ISLE development if needed )","title":"Deployment to Production and Staging"},{"location":"optional-components/varnish/#quick-deployment-to-staging-for-code-parity","text":"On your Staging system: Shutdown your containers from your ISLE project directory root found typically in /opt/ docker-compose down Run git pull origin main - ( Replace main with the actual git branch you are using for ISLE development if needed ) While you may not be deploying Varnish to your Staging system, it is a wise idea to not have code drift. Repeat this process with your Islandora / Drupal code to ensure parity between Staging and Production Spin your containers back up Run the supplied installer script: ( Examples given below, you may need to change container ids and paths accordingly to match your Staging environment ) On the Staging host server, copy this script to your apache container. Replace {{ container_short_id }} with your respective Staging container id. docker cp scripts/varnish/isle_varnish_drupal_module_installer.sh isle-apache-{{ container_short_id }}:/var/www/html/isle_varnish_drupal_installer.sh Change permissions on the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html/ && chmod +x isle_varnish_drupal_installer.sh\" Run the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html && ./isle_varnish_drupal_installer.sh\" The script will complain about the Drupal modules being enabled but will complete. Perform a quick QC of the site and system to ensure no issues have resulted. Once finished move onto deploying to Production","title":"Quick Deployment to Staging for Code Parity"},{"location":"optional-components/varnish/#deployment-to-production","text":"On your Production system: Shutdown your containers from your ISLE project directory root found typically in /opt/ docker-compose down Run git pull origin main - ( Replace main with the actual git branch you are using for ISLE development if needed ) Repeat this process with your Islandora / Drupal code using the appropriate git branch as needed Pull down the new isle images docker-compose pull Spin up new containers docker-compose up -d Run the supplied installer script: ( Examples given below, you may need to change container ids and paths accordingly to match your Production environment ) On the Production host server, copy this script to your apache container. Replace {{ container_short_id }} with your respective Staging container id. docker cp scripts/varnish/isle_varnish_drupal_module_installer.sh isle-apache-{{ container_short_id }}:/var/www/html/isle_varnish_drupal_installer.sh Change permissions on the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html/ && chmod +x isle_varnish_drupal_installer.sh\" Run the script docker exec isle-apache-{{ container_short_id }} bash -c \"cd /var/www/html && ./isle_varnish_drupal_installer.sh\" The script will complain about the Drupal modules being enabled but will complete. You can now access this new module in the Home >> Administration >> Configuration >> Development >> Varnish section of your Drupal site. Please note: We recommend the following settings. All other settings should be handled by the vsets within the installer script. Flush page cache on cron? set to Disabled Varnish version set to 4.x Varnish Control Key Append newline checkbox should be checked with a check mark The Front domains list can be left empty Varnish Cache Clearing set to Drupal Default Varnish ban type set to Normal All other settings e.g. Varnish Control Terminal and Varnish Control Key are handled by the production.env ENV variables. There will also be two other new Drupal modules to access and use: Purge - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb Development \u00bb Performance The setting here is handled by the installer script, vset and Varnish ENV. No need to change this value by the end user. Cache Expiration - Accessible from Home \u00bb Administration \u00bb Configuration \u00bb System The setting here is initially handled by the installer script, vset and Varnish ENV. End user can modify as needed but a further explanation beyond default settings is out of scope of this document. Recommend using this Drupal modules help page if needed. There should be a nice green checkmark at the bottom to indicate Varnish running once / if you have also spun up the Varnish container. If any of the three Drupal modules have a red warning or two about not being able to connect to Varnish, then you'll need to retrace your steps and troubleshoot. Open up a web browser and navigate to your Production website. If you recently restarted your Docker containers, this may take a few minutes depending on the size of the site. You might first see a Traefik Bad Gateway page for a minute or two. You'll need to refresh the page. You might then see a Varnish followed by a Error 503 Backend fetch failed page for a minute or two. You'll need to again refresh the page. Example: Varnish error upon site startup. You should now see your Drupal website after a few minutes. Example Varnish error Error 503 Backend fetch failed Backend fetch failed Guru Meditation: XID: 3 Varnish cache server If continuing to test on your Production system, please review the section below How to verify that Varnish is working for available testing methods. We also recommend a final QC on your Production system, reviewing all logs, displayed objects and searches.","title":"Deployment to Production"},{"location":"optional-components/varnish/#how-to-verify-that-varnish-is-working","text":"Any of these methods below will work for testing on your Local or general use on Production","title":"How to Verify That Varnish Is Working"},{"location":"optional-components/varnish/#method-1-visit-your-website-in-a-web-browser","text":"Open up a web browser and navigate to your website. If you recently restarted your Docker containers, this may take a few minutes depending on the size of the site. You might first see a Traefik Bad Gateway page for a minute or two. You'll need to refresh the page. You might then see a Varnish followed by a Error 503 Backend fetch failed page for a minute or two. You'll need to again refresh the page. Example: Varnish error upon site startup. Error 503 Backend fetch failed Backend fetch failed Guru Meditation: XID: 3 Varnish cache server You should now see your website after a few minutes.","title":"Method 1 - Visit Your Website in a Web Browser"},{"location":"optional-components/varnish/#method-2-inspect-the-headers-on-one-of-your-sites-webpages","text":"Launch a web browser ( Chrome., Safari or Firefox ) and navigate to your website To inspect the headers, right click on the page and choose Inspect This should launch the browser's built-in tools suite, select Network You'll need to refresh / reload the page again to see objects Look for the page URL and click on it. You should see entries like the following: via: 1.1 varnish-v4 x-cache: HIT x-cache-hits: 2","title":"Method 2 - Inspect the Headers on One of Your Site's Webpages"},{"location":"optional-components/varnish/#method-3-curl-a-url-and-review-the-headers","text":"Run a curl command on your local laptop to your site with curl -I https://yourwebsitehere.com The output should look something like this example output below: curl -I https://demo.born-digital.com HTTP/2 200 accept-ranges: bytes age: 2075 cache-control: public, max-age=10800 content-language: en content-type: text/html; charset=utf-8 date: Mon, 23 Sep 2019 19:27:42 GMT etag: W/\"1569264015-0-gzip\" expires: Sun, 19 Nov 1978 05:00:00 GMT last-modified: Mon, 23 Sep 2019 18:40:15 GMT server: Apache/2.4.41 (Ubuntu) vary: Cookie,Accept-Encoding via: 1.1 varnish-v4 x-cache: HIT x-cache-hits: 19 x-content-type-options: nosniff x-drupal-cache: HIT x-frame-options: SAMEORIGIN x-generator: Drupal 7 (http://drupal.org) x-varnish: 983097 3 Note: This information below is a callout for the end user to understand indicates that Varnish is not only caching the page but the Varnish cache has received previous \"hits\" or requests for this page and its contents. via: 1.1 varnish-v4 x-cache: HIT x-cache-hits: 19","title":"Method 3 - Curl a URL and Review the Headers"},{"location":"optional-components/varnish/#method-4-backend-tools","text":"You can use tools like varnishtop , varnishstat , varnishlog or varnishhist to view traffic on the Varnish container. Please navigate down to the Varnish utilities and tools section for more details.","title":"Method 4 - Backend Tools"},{"location":"optional-components/varnish/#how-to-clear-the-varnish-cache","text":"Every time the Varnish container is stopped and restarted, the Varnish cache will be reset and rebuilt. ( Easiest and most recommended method ) Shell into the Varnish container ( Shouldn't involve restarting the container ). Replace {{ container_short_id }} with your respective container id. docker exec -it isle-varnish-{{ container_short_id }} bash varnishadm -T 127.0.0.1:6082 url.purge . Additional curl commands and vcl edits can be found within the Varnish 4.1 documentation","title":"How to Clear the Varnish Cache"},{"location":"optional-components/varnish/#varnish-utilities-and-tools","text":"There are multiple tools that can be used to interact with the Varnish cache. All will require that you use them on the running Varnish container. varnishtop - The varnishtop utility reads varnishd shared memory logs and presents a continuously updated list of the most commonly occurring log entries. varnishstat - for Varnish cache statistics varnishlog - a utility that can read the contents of the in-memory log that Varnish provides varnishhist - The varnishhist utility reads varnishd(1) shared memory logs and presents a continuously updated histogram varnishadm - type in varnishadm and then help for additional commands. Utility used to control the Varnish cache. Additional commands can be found in the Varnish Reporting & Statistics section","title":"Varnish Utilities and Tools"},{"location":"optional-components/varnish/#using-varnish-the-tick-stack","text":"Please first follow the instructions for installing and using the TICK stack If you're pushing log events to TICK , this snippet of code below ( logging instructions ) at the bottom of every ISLE service within your docker-compose.production.yml file should be uncommented. This should include the Varnish service. By default the uncommented Varnish section in the Production docker-compose.production.yml file will have this snippet of code below. logging: driver: syslog options: tag: \"{{.Name}}\" Example: varnish: image: islandoracollabgroup/isle-varnish:1.5.0 container_name: isle-varnish-${CONTAINER_SHORT_ID} env_file: - .env networks: isle-internal: depends_on: - mysql - fedora - solr - apache - traefik labels: - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal - traefik.port=6081 - traefik.enable=true - \"traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /adore-djatoka, /cantaloupe\" logging: driver: syslog options: tag: \"{{.Name}}\"","title":"Using Varnish &amp; the TICK Stack"},{"location":"optional-components/varnish/#uninstallation-instructions","text":"Shutdown the ISLE containers on your Local system Comment out the Varnish service section in either of the docker-compose.production.yml or docker-compose.local.yml file(s) Uncomment the last line in the Apache labels section in either of the docker-compose.production.yml or docker-compose.local.yml file(s) Comment out the Varnish section again in the production.env or local.env file Startup the ISLE containers again. Shell into the Apache container cd /var/www/html drush dis varnish purge expire drush pm-uninstall varnish purge expire Commit the resulting code changes in both the ISLE and Islandora git repositories. Deploy these changes to your Staging and Production systems","title":"Uninstallation Instructions"},{"location":"optional-components/varnish/#need-help","text":"We welcome questions, suggestions, contributions, and respond promptly to requests for technical help. Please join us in the following: Islandora ISLE Interest Group - Meetings are public and open to everybody! Schedule is alternating Wednesdays at 3:00pm EST. Islandora ISLE Google group - Post your questions here and subscribe for updates, meeting announcements, and technical support. ISLE GitHub Issues queue - Post your issues, bugs and requests for technical documentation here.","title":"Need Help?"},{"location":"optional-components/varnish/#additional-resources","text":"Varnish 4.1.x Documentation The Varnish Users Guide Note: : Varnish Software is the commercial wing of the Varnish. Varnish Admin Console is a paid not for free product that is a GUI for Varnish Cache. The language around this feature is vague and sometimes misleadingly used in tutorials as software anyone can use. There are trials but ultimately this is a paid product. Varnish Cache is the open-source project maintained by Varnish Software and intended to be used by anyone for free.","title":"Additional Resources"},{"location":"release-notes/release-1-1-0/","text":"ISLE Release 1.1.0 Base Images to serve them all: In Docker fashion two new base-images were created for the 1.1 ISLE stack. There are major benefits both for the committers and users of ISLE. Keeping our users safe has never been easier. For users and committers alike when a security update or patch arrives we (the ISLE committers) need only update the base image. By virtue of inheritance these updates are automatically inherited and built into each and every component of the ISLE stack. Quick downloads, faster launch: these shared base images decrease the time to pull and launch the ISLE stack. Since the images have the same layers (like a cake) they are downloaded only once and reused as building blocks for the rest of the ISLE stack. This also significantly decreases the overall size of all images because we are able to finely tune and trim our base images so they're stable, without being bloated by unneeded components. ISLE-Ubuntu-Base ISLE-Tomcat-Base Image-Services Image Services with an S . ImageServices is a 1.2 GB container that simultaneously runs both Adore-Djatoka and Cantaloupe IIIF . By default the ISLE-Installer prefers Cantaloupe IIIF over AD, but AD remains a component for backward compatibility to be deprecated in a future release. ISLE-Apache Automatically pull the newest build tools on launch, never be with an outdated stack. By default the Apache container will connect to GitHub and pull the ISLE-build. This is controlled by an environment variable and can be disabled. In future releases we intend to make it so that you can fork our build tools, or make your own, and set your own repository for the container to fetch on boot. Note that while currently running the build tools is only done once we're thinking ahead. In future planned iterations of ISLE-Apache the build tools will separate core Drupal code ( core ) from the Islandora modules ( contrib ). TL;DR: We hope to bring automated Drupal core updates, as well as offer an option to update Islandora modules -- though we acknowledge this might not be for everyone! ImageMagick 7.x (ISLE images involved: ImageServices and Apache) ImageMagick, the tool which converts and handles derivative generation (in most part) has been updated to the latest 7.x branch and is compiled with JP2 read and write support from OpenJPEG . This update also includes the PHP Imagick extension which is now built from source to support the new version of ImageMagick with JP2 support. ISLE-Proxy is now magiek We have replaced Nginx with Traefik Traefik is a modern reverse proxy with several key benefits Institutions and users alike can use ACME for the automatic and free creation and maintenance of SSL certificates from Let's Encrypt (https://letsencrypt.org/) Added Portainer , a visual dashboard of your running stack(s) Provides quick access to logs, shells, and startup/shutdown functions for running containers. Logging Services are now logged out to Docker while also being stored on the containers. In case we've missed anything all uncaught logs are still logged by S6 overlay. .env for your Environment Lorem Ipsum Muli-Environment (e.g., dev, stage, prod) in a greatly simplified manner Repo for multi-env incoming","title":"1.1.0"},{"location":"release-notes/release-1-1-0/#isle-release-110","text":"Base Images to serve them all: In Docker fashion two new base-images were created for the 1.1 ISLE stack. There are major benefits both for the committers and users of ISLE. Keeping our users safe has never been easier. For users and committers alike when a security update or patch arrives we (the ISLE committers) need only update the base image. By virtue of inheritance these updates are automatically inherited and built into each and every component of the ISLE stack. Quick downloads, faster launch: these shared base images decrease the time to pull and launch the ISLE stack. Since the images have the same layers (like a cake) they are downloaded only once and reused as building blocks for the rest of the ISLE stack. This also significantly decreases the overall size of all images because we are able to finely tune and trim our base images so they're stable, without being bloated by unneeded components. ISLE-Ubuntu-Base ISLE-Tomcat-Base Image-Services Image Services with an S . ImageServices is a 1.2 GB container that simultaneously runs both Adore-Djatoka and Cantaloupe IIIF . By default the ISLE-Installer prefers Cantaloupe IIIF over AD, but AD remains a component for backward compatibility to be deprecated in a future release. ISLE-Apache Automatically pull the newest build tools on launch, never be with an outdated stack. By default the Apache container will connect to GitHub and pull the ISLE-build. This is controlled by an environment variable and can be disabled. In future releases we intend to make it so that you can fork our build tools, or make your own, and set your own repository for the container to fetch on boot. Note that while currently running the build tools is only done once we're thinking ahead. In future planned iterations of ISLE-Apache the build tools will separate core Drupal code ( core ) from the Islandora modules ( contrib ). TL;DR: We hope to bring automated Drupal core updates, as well as offer an option to update Islandora modules -- though we acknowledge this might not be for everyone! ImageMagick 7.x (ISLE images involved: ImageServices and Apache) ImageMagick, the tool which converts and handles derivative generation (in most part) has been updated to the latest 7.x branch and is compiled with JP2 read and write support from OpenJPEG . This update also includes the PHP Imagick extension which is now built from source to support the new version of ImageMagick with JP2 support. ISLE-Proxy is now magiek We have replaced Nginx with Traefik Traefik is a modern reverse proxy with several key benefits Institutions and users alike can use ACME for the automatic and free creation and maintenance of SSL certificates from Let's Encrypt (https://letsencrypt.org/) Added Portainer , a visual dashboard of your running stack(s) Provides quick access to logs, shells, and startup/shutdown functions for running containers. Logging Services are now logged out to Docker while also being stored on the containers. In case we've missed anything all uncaught logs are still logged by S6 overlay. .env for your Environment Lorem Ipsum Muli-Environment (e.g., dev, stage, prod) in a greatly simplified manner Repo for multi-env incoming","title":"ISLE Release 1.1.0"},{"location":"release-notes/release-1-1-1/","text":"Release Notes - ISLE v.1.1.1, 2019-05-01 Updates and testing performed by ISLE Committer Gavin Morris, Born-Digital ISLE (main project) docker-compose.yml Release header changed to 1.1.1 with date of release All isle-image tags changed to 1.1.1 Upgraded traefik to 1.7.9 Images isle-ubuntu-basebox Updated ubuntu:bionic build image Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded S6_OVERLAY to 1.21.7.0 Upgraded Java (Server JRE) to jre-8u202 /1.8.0_202 isle-tomcat Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.40 isle-fedora Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated Islandora XACML policies to Jan 2019 commit Upgraded Islandora Drupal Filter to 7.1.12 Upgraded Apache Maven to 3.6.0 Updated Discovery Garden's basic-solr 4.10.x config to newest March 19, 2019 commit Updated Discovery Garden's Islandora Transforms to March 19, 2019 commit isle-imageservices Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated openjpeg to Dec 21,2018 commit Upgraded Imagemagick to 7.0.8-42 isle-solr Server package management updates via apt-get isle-apache Upgraded Imagemagick to version ImageMagick-7.0.8-42.x86_64 Upgraded Composer to version 1.8.5 Upgraded Drush to 8.2.3 with 8.1.18 as fallback Upgraded FITS to 1.4 (Nov 2018) isle-mysql Updated mysql:5.7 build image","title":"1.1.1"},{"location":"release-notes/release-1-1-1/#release-notes-isle-v111-2019-05-01","text":"","title":"Release Notes - ISLE v.1.1.1, 2019-05-01"},{"location":"release-notes/release-1-1-1/#updates-and-testing-performed-by-isle-committer-gavin-morris-born-digital","text":"","title":"Updates and testing performed by ISLE Committer Gavin Morris, Born-Digital"},{"location":"release-notes/release-1-1-1/#isle-main-project","text":"docker-compose.yml Release header changed to 1.1.1 with date of release All isle-image tags changed to 1.1.1 Upgraded traefik to 1.7.9","title":"ISLE (main project)"},{"location":"release-notes/release-1-1-1/#images","text":"","title":"Images"},{"location":"release-notes/release-1-1-1/#isle-ubuntu-basebox","text":"Updated ubuntu:bionic build image Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded S6_OVERLAY to 1.21.7.0 Upgraded Java (Server JRE) to jre-8u202 /1.8.0_202","title":"isle-ubuntu-basebox"},{"location":"release-notes/release-1-1-1/#isle-tomcat","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.40","title":"isle-tomcat"},{"location":"release-notes/release-1-1-1/#isle-fedora","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated Islandora XACML policies to Jan 2019 commit Upgraded Islandora Drupal Filter to 7.1.12 Upgraded Apache Maven to 3.6.0 Updated Discovery Garden's basic-solr 4.10.x config to newest March 19, 2019 commit Updated Discovery Garden's Islandora Transforms to March 19, 2019 commit","title":"isle-fedora"},{"location":"release-notes/release-1-1-1/#isle-imageservices","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Updated openjpeg to Dec 21,2018 commit Upgraded Imagemagick to 7.0.8-42","title":"isle-imageservices"},{"location":"release-notes/release-1-1-1/#isle-solr","text":"Server package management updates via apt-get","title":"isle-solr"},{"location":"release-notes/release-1-1-1/#isle-apache","text":"Upgraded Imagemagick to version ImageMagick-7.0.8-42.x86_64 Upgraded Composer to version 1.8.5 Upgraded Drush to 8.2.3 with 8.1.18 as fallback Upgraded FITS to 1.4 (Nov 2018)","title":"isle-apache"},{"location":"release-notes/release-1-1-1/#isle-mysql","text":"Updated mysql:5.7 build image","title":"isle-mysql"},{"location":"release-notes/release-1-1-2/","text":"Release Notes - ISLE v.1.1.2, 2019-06-28 Contributions to this release from: David Keiser-Clark (Williams College), documentation Francesca Livermore (Wesleyan University), documentation Gavin Morris (Born-Digital), code updates and testing Mark Sandford (Colgate University), documentation Bethany Seeger (Amherst College), release manager Noah Smith (Born-Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), code updates ISLE (main project) Documentation for ISLE is now found in the docs directory of the ISLE repository docker-compose.yml Release header changed to 1.1.2 with date of release All ISLE docker image tags changed to 1.1.2 Switched to using OpenJDK for Java because of Oracle license changes. This has resulted in a few changes to the docker images: isle-ubuntu-basebox is removed from ISLE, replaced with adoptopenjdk:openjdk8 image , whose base image is ubuntu:18.04 (ubuntu-bionic). This means the underlying operating system setup is the same. Tools pulled in from the isle-ubuntu-basebox and needed by child images have been moved to isle-tomcat and isle-apache as appropriate. Djatoka is no longer running in isle-imageservices . Installer script updates/changes: OpenSeadragon vset was updated and made more complete for mobile device usage. New vsets in the installer script to turn off Kakadu by default and to use Imagemagick with OpenJPG instead for JP2 derivative creation. Please read more on Kakadu licensing on the Cantaloupe website . Docker Images isle-tomcat Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.42 isle-fedora Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get isle-imageservices Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Djatoka no longer running in image. isle-solr Readme change isle-apache Server package management updates via apt-get Apache Tika Tool is no longer used during TECHMD generation. It was causing the /tmp disk space in isle-apache to fill up during an ingest. For more details please see issue 96 . isle-mysql No change","title":"1.1.2"},{"location":"release-notes/release-1-1-2/#release-notes-isle-v112-2019-06-28","text":"","title":"Release Notes - ISLE v.1.1.2, 2019-06-28"},{"location":"release-notes/release-1-1-2/#contributions-to-this-release-from","text":"David Keiser-Clark (Williams College), documentation Francesca Livermore (Wesleyan University), documentation Gavin Morris (Born-Digital), code updates and testing Mark Sandford (Colgate University), documentation Bethany Seeger (Amherst College), release manager Noah Smith (Born-Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), code updates","title":"Contributions to this release from:"},{"location":"release-notes/release-1-1-2/#isle-main-project","text":"Documentation for ISLE is now found in the docs directory of the ISLE repository docker-compose.yml Release header changed to 1.1.2 with date of release All ISLE docker image tags changed to 1.1.2 Switched to using OpenJDK for Java because of Oracle license changes. This has resulted in a few changes to the docker images: isle-ubuntu-basebox is removed from ISLE, replaced with adoptopenjdk:openjdk8 image , whose base image is ubuntu:18.04 (ubuntu-bionic). This means the underlying operating system setup is the same. Tools pulled in from the isle-ubuntu-basebox and needed by child images have been moved to isle-tomcat and isle-apache as appropriate. Djatoka is no longer running in isle-imageservices . Installer script updates/changes: OpenSeadragon vset was updated and made more complete for mobile device usage. New vsets in the installer script to turn off Kakadu by default and to use Imagemagick with OpenJPG instead for JP2 derivative creation. Please read more on Kakadu licensing on the Cantaloupe website .","title":"ISLE (main project)"},{"location":"release-notes/release-1-1-2/#docker-images","text":"","title":"Docker Images"},{"location":"release-notes/release-1-1-2/#isle-tomcat","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.42","title":"isle-tomcat"},{"location":"release-notes/release-1-1-2/#isle-fedora","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get","title":"isle-fedora"},{"location":"release-notes/release-1-1-2/#isle-imageservices","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Djatoka no longer running in image.","title":"isle-imageservices"},{"location":"release-notes/release-1-1-2/#isle-solr","text":"Readme change","title":"isle-solr"},{"location":"release-notes/release-1-1-2/#isle-apache","text":"Server package management updates via apt-get Apache Tika Tool is no longer used during TECHMD generation. It was causing the /tmp disk space in isle-apache to fill up during an ingest. For more details please see issue 96 .","title":"isle-apache"},{"location":"release-notes/release-1-1-2/#isle-mysql","text":"No change","title":"isle-mysql"},{"location":"release-notes/release-1-2-0/","text":"Release Notes - ISLE v.1.2.0, 2019-08-13 Contributions to this release from: David Keiser-Clark (Williams College), documentation Gavin Morris (Born-Digital), code updates and testing Mark McFate (Grinnell College), testing and documentation Bethany Seeger (Amherst College), testing and release manager Noah Smith (Born Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), code updates and testing ISLE (main project) New structure for launching ISLE environments . This allows guidance in how one would configure ISLE for different scenarios. If you are upgrading from ISLE versions 1.1.1 or 1.1.2, see the upgrade instructions to configure your existing environments for the updated workflow. New docker-compose files and environment profiles created for: Demo - use this to spin up ISLE quickly just to check it out Local ( new , migrate ) - use this for a local development environment Staging ( new , migrate ) -- use this to setup a staging environment for your production website Production ( new , migrate ) - use this for your production environment Test - an environment for ISLE contributors; it includes automated testing code New settings.php and php.ini files for each of the above configurations. New traefik.toml files for each configuration. Adds TICK Dashboard as an optional feature in the Staging/Production/Test environments. TICK is a suite of open-source applications that are used together for the storing, visualization and monitoring of data (time series metrics) gathered from running systems. The TICK stack was created and is developed by Influxdata which is \"...dedicated to open source and truly cares about helping developers get to results faster with less complexity and less code.\" To enable TICK on your system, please read through Tick Stack Page Logging to physical files is turned off in each Docker container. To view the logs now, you can use one of these methods: Docker method: (when using the Docker json driver and TICK is not on) Single container: docker logs -f All containers: docker logs --tail=0 --follow To learn more: https://docs.docker.com/engine/reference/commandline/logs/ Docker-compose method: (when using the Docker json driver and TICK is not on) Single container: docker-compose logs -f All containers: docker-compose logs --tail=0 --follow To learn more: https://docs.docker.com/compose/reference/logs/ Use the TICK Log viewer if TICK is setup and using the Docker syslog driver. Please read the ISLE TICK documentation to see how to set this up TICK Stack Page Upgrade If you are coming from ISLE releases 1.1.1 & 1.1.2 - there will be some additional steps to take to migrate to this new release. We recommend that you also review the following: ISLE Installation: Environments Update ISLE documentation as well. The following files will need you to review, edit and/or merge in previous settings: .env - All previous variables with the exception of the four below have been moved to the demo, local, staging and production .env files. By default this file will be set to the demo environment. Default settings for ISLE. Change for other environments as needed. COMPOSE_PROJECT_NAME=isle_demo BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=ld COMPOSE_FILE=docker-compose.demo.yml You'll need to change the settings above to match whatever ISLE environment you would like. You'll need to copy over the settings from your previous local, Staging and Production. Please note on Staging and Production, you'll be making a local commit but NOT pushing back to your main ISLE git repository. All other users, names and passwords from your previous ISLE 1.1.1 & 1.1.2 .env will now need to be copied into the new environment .env files demo.env - Prepopulated. Nothing to change. local.env - Copy over all users, names and passwords from your previous Local ISLE 1.1.1 & 1.1.2 .env to the appropriate variable. Remove the comments and replace with the appropriate Local values. staging.env - Copy over all users, names and passwords from your previous Staging ISLE 1.1.1 & 1.1.2 .env to the appropriate variable. Remove the comments and replace with the appropriate Staging values. production.env - Copy over all users, names and passwords from your previous Production ISLE 1.1.1 & 1.1.2 .env to the appropriate variable. Remove the comments and replace with the appropriate Production values. docker-compose.yml - This file no longer exists in ISLE 1.2.0 and has been replaced by new docker-compose files and environment profiles created for: Demo - docker-compose.demo.yml - use this to spin up ISLE quickly just to check it out. Local - docker-compose.local.yml - use this for a local development environment. Copy over your previous ISLE Local docker-compose.yml settings as needed and merge into this file. Staging - docker-compose.staging.yml -- use this for your staging environment. Copy over your previous ISLE Staging docker-compose.yml settings as needed and merge into this file. Production - docker-compose.production.yml - use this for your production environment. Copy over your previous ISLE Production docker-compose.yml settings as needed and merge into this file. There are also new ./config/apache/settings_php/settings.*.php files used in ISLE 1.2.0 which are also separated by environment e.g. settings.local.php , etc. As instructed above, you'll need to ensure that for every settings.*.php file, the values from your previous .env file are copied in here as well. Within the new settings.*.php files, search for two sections called ISLE Configuration . Follow the inline instructions as directed to determine which values should be copied in. ISLE Docker Images isle-tomcat Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.43 Upgraded S6 overlay to 1.22.1 Logging configuration changed isle-fedora Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded Maven to 3.6.1 Upgraded Ant to 1.10.6 Logging configuration changed isle-imageservices Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Logging configuration changed isle-solr Readme change Logging configuration changed isle-apache Server package management updates via apt-get Upgraded PHP to version 7.1 from 5.61 Upgraded FITS to version 1.4.1 Upgraded S6 overlay to 1.22.1 Upgraded ImageMagick to version 7.0.8-56 Logging configuration changed isle-mysql Logging configuration changed","title":"1.2.0"},{"location":"release-notes/release-1-2-0/#release-notes-isle-v120-2019-08-13","text":"","title":"Release Notes - ISLE v.1.2.0, 2019-08-13"},{"location":"release-notes/release-1-2-0/#contributions-to-this-release-from","text":"David Keiser-Clark (Williams College), documentation Gavin Morris (Born-Digital), code updates and testing Mark McFate (Grinnell College), testing and documentation Bethany Seeger (Amherst College), testing and release manager Noah Smith (Born Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), code updates and testing","title":"Contributions to this release from:"},{"location":"release-notes/release-1-2-0/#isle-main-project","text":"New structure for launching ISLE environments . This allows guidance in how one would configure ISLE for different scenarios. If you are upgrading from ISLE versions 1.1.1 or 1.1.2, see the upgrade instructions to configure your existing environments for the updated workflow. New docker-compose files and environment profiles created for: Demo - use this to spin up ISLE quickly just to check it out Local ( new , migrate ) - use this for a local development environment Staging ( new , migrate ) -- use this to setup a staging environment for your production website Production ( new , migrate ) - use this for your production environment Test - an environment for ISLE contributors; it includes automated testing code New settings.php and php.ini files for each of the above configurations. New traefik.toml files for each configuration. Adds TICK Dashboard as an optional feature in the Staging/Production/Test environments. TICK is a suite of open-source applications that are used together for the storing, visualization and monitoring of data (time series metrics) gathered from running systems. The TICK stack was created and is developed by Influxdata which is \"...dedicated to open source and truly cares about helping developers get to results faster with less complexity and less code.\" To enable TICK on your system, please read through Tick Stack Page Logging to physical files is turned off in each Docker container. To view the logs now, you can use one of these methods: Docker method: (when using the Docker json driver and TICK is not on) Single container: docker logs -f All containers: docker logs --tail=0 --follow To learn more: https://docs.docker.com/engine/reference/commandline/logs/ Docker-compose method: (when using the Docker json driver and TICK is not on) Single container: docker-compose logs -f All containers: docker-compose logs --tail=0 --follow To learn more: https://docs.docker.com/compose/reference/logs/ Use the TICK Log viewer if TICK is setup and using the Docker syslog driver. Please read the ISLE TICK documentation to see how to set this up TICK Stack Page","title":"ISLE (main project)"},{"location":"release-notes/release-1-2-0/#upgrade","text":"If you are coming from ISLE releases 1.1.1 & 1.1.2 - there will be some additional steps to take to migrate to this new release. We recommend that you also review the following: ISLE Installation: Environments Update ISLE documentation as well. The following files will need you to review, edit and/or merge in previous settings: .env - All previous variables with the exception of the four below have been moved to the demo, local, staging and production .env files. By default this file will be set to the demo environment. Default settings for ISLE. Change for other environments as needed. COMPOSE_PROJECT_NAME=isle_demo BASE_DOMAIN=isle.localdomain CONTAINER_SHORT_ID=ld COMPOSE_FILE=docker-compose.demo.yml You'll need to change the settings above to match whatever ISLE environment you would like. You'll need to copy over the settings from your previous local, Staging and Production. Please note on Staging and Production, you'll be making a local commit but NOT pushing back to your main ISLE git repository. All other users, names and passwords from your previous ISLE 1.1.1 & 1.1.2 .env will now need to be copied into the new environment .env files demo.env - Prepopulated. Nothing to change. local.env - Copy over all users, names and passwords from your previous Local ISLE 1.1.1 & 1.1.2 .env to the appropriate variable. Remove the comments and replace with the appropriate Local values. staging.env - Copy over all users, names and passwords from your previous Staging ISLE 1.1.1 & 1.1.2 .env to the appropriate variable. Remove the comments and replace with the appropriate Staging values. production.env - Copy over all users, names and passwords from your previous Production ISLE 1.1.1 & 1.1.2 .env to the appropriate variable. Remove the comments and replace with the appropriate Production values. docker-compose.yml - This file no longer exists in ISLE 1.2.0 and has been replaced by new docker-compose files and environment profiles created for: Demo - docker-compose.demo.yml - use this to spin up ISLE quickly just to check it out. Local - docker-compose.local.yml - use this for a local development environment. Copy over your previous ISLE Local docker-compose.yml settings as needed and merge into this file. Staging - docker-compose.staging.yml -- use this for your staging environment. Copy over your previous ISLE Staging docker-compose.yml settings as needed and merge into this file. Production - docker-compose.production.yml - use this for your production environment. Copy over your previous ISLE Production docker-compose.yml settings as needed and merge into this file. There are also new ./config/apache/settings_php/settings.*.php files used in ISLE 1.2.0 which are also separated by environment e.g. settings.local.php , etc. As instructed above, you'll need to ensure that for every settings.*.php file, the values from your previous .env file are copied in here as well. Within the new settings.*.php files, search for two sections called ISLE Configuration . Follow the inline instructions as directed to determine which values should be copied in.","title":"Upgrade"},{"location":"release-notes/release-1-2-0/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-2-0/#isle-tomcat","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.43 Upgraded S6 overlay to 1.22.1 Logging configuration changed","title":"isle-tomcat"},{"location":"release-notes/release-1-2-0/#isle-fedora","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded Maven to 3.6.1 Upgraded Ant to 1.10.6 Logging configuration changed","title":"isle-fedora"},{"location":"release-notes/release-1-2-0/#isle-imageservices","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Logging configuration changed","title":"isle-imageservices"},{"location":"release-notes/release-1-2-0/#isle-solr","text":"Readme change Logging configuration changed","title":"isle-solr"},{"location":"release-notes/release-1-2-0/#isle-apache","text":"Server package management updates via apt-get Upgraded PHP to version 7.1 from 5.61 Upgraded FITS to version 1.4.1 Upgraded S6 overlay to 1.22.1 Upgraded ImageMagick to version 7.0.8-56 Logging configuration changed","title":"isle-apache"},{"location":"release-notes/release-1-2-0/#isle-mysql","text":"Logging configuration changed","title":"isle-mysql"},{"location":"release-notes/release-1-3-0/","text":"Release Notes - ISLE v.1.3.0, 2019-09-27 Contributions to this release from: David Keiser-Clark (Williams College), documentation and testing Francesca Livermore (Wesleyan University), documentation Gavin Morris (Born-Digital), code updates and testing Mark McFate (Grinnell College), testing and documentation Mark Sandford (Colgate University), documentation Bethany Seeger (Amherst College), code updates, testing and release manager Noah Smith (Born Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), testing ISLE (main project) Adds two new optional components for use on Production systems: Varnish - caching web accelearator for high traffic sites Optional Varnish service added to only Production & Local docker-compose files (commented out) Varnish logging added in the .envs Blazegraph - triplestore replacement for Mulgara for high volume ingest Blazegraph / Fedora service changes in the .envs to allow toggling Blazegraph logging added in the .envs Optional Blazegraph service added to all docker-compose(s) (commented out) Automated Testing - updated to include Varnish and Blazegraph in base test suite; and updated instructions to correspond with revised test repository location and keywords/names. Library of Congress standards proxy - High Volume Ingest Resource allocation document for - Local, Staging, Production e.g. RAM, CPU, tuning etc. Upgrade If you are coming from ISLE releases 1.2.0 - there will be some additional steps to take to migrate to this new release. We recommend that you also review the following: ISLE Installation: Environments Update ISLE documentation as well. The following files have new Varnish and Blazegraph information and ENVs which may need you to review, edit and/or merge in previous settings: All demo , local , staging , production and test .env files have a new ### Fedora Resource Index section with two new ENV variables. There are in-line instructions on how to switch between the default mulgara and optional component blazegraph All docker-compose.*.yml files have a new optional Blazegraph service section, ( commented out ) along with a ( commented out ) Blazegraph volume definition Test - test.env by default now tests Blazegraph instead of mulgara. Production - docker-compose.production.yml - New Varnish service added but commented out. production.env - New Varnish section with ENV variables ( commented out ) Local - docker-compose.local.yml - New Varnish service added but commented out. local.env - New Varnish section with ENV variables ( commented out ) Test - docker-compose.test.yml - New Varnish service added. test.env - New Varnish section with ENV variables ISLE Docker Images isle-tomcat adoptopenjdk/openjdk8 base image (security updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.46 isle-fedora Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded Maven to 3.6.2 Upgraded Ant to 1.10.7 Islandora transforms changes from August 15th Blazegraph work integrated Bug fix https://github.com/Islandora-Collaboration-Group/ISLE/issues/317 isle-imageservices Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Cantaloupe upgraded from 4.0.1 to 4.0.3 Cleanup of service paths https://github.com/Islandora-Collaboration-Group/ISLE/issues/226 isle-solr Server package management updates via apt-get isle-apache adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get PHP version 7.1 updates Upgraded FITS to version 1.5.0 Upgraded ImageMagick to version 7.0.8-66 Composer upgraded from commit / hash August 2, 2019 to Sept 2, 2019 (still v 1.9.0) isle-mysql apt-get dist-upgrades for dependencies (sec updates) isle-blazegraph adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via `apt-get ISLE Tomcat base image upgrade from 1.1.1 to 1.3.0 Blazegraph upgraded from 2.1.4 to 2.1.5 isle-varnish Server package management updates via apt-get ISLE base image change from discontinued isle-ubuntu-basebox to ubuntu:xenial base image (sec updates) Varnish upgraded from 4.1.3-12 to 4.1.11","title":"1.3.0"},{"location":"release-notes/release-1-3-0/#release-notes-isle-v130-2019-09-27","text":"","title":"Release Notes - ISLE v.1.3.0, 2019-09-27"},{"location":"release-notes/release-1-3-0/#contributions-to-this-release-from","text":"David Keiser-Clark (Williams College), documentation and testing Francesca Livermore (Wesleyan University), documentation Gavin Morris (Born-Digital), code updates and testing Mark McFate (Grinnell College), testing and documentation Mark Sandford (Colgate University), documentation Bethany Seeger (Amherst College), code updates, testing and release manager Noah Smith (Born Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), testing","title":"Contributions to this release from:"},{"location":"release-notes/release-1-3-0/#isle-main-project","text":"Adds two new optional components for use on Production systems: Varnish - caching web accelearator for high traffic sites Optional Varnish service added to only Production & Local docker-compose files (commented out) Varnish logging added in the .envs Blazegraph - triplestore replacement for Mulgara for high volume ingest Blazegraph / Fedora service changes in the .envs to allow toggling Blazegraph logging added in the .envs Optional Blazegraph service added to all docker-compose(s) (commented out) Automated Testing - updated to include Varnish and Blazegraph in base test suite; and updated instructions to correspond with revised test repository location and keywords/names. Library of Congress standards proxy - High Volume Ingest Resource allocation document for - Local, Staging, Production e.g. RAM, CPU, tuning etc.","title":"ISLE (main project)"},{"location":"release-notes/release-1-3-0/#upgrade","text":"If you are coming from ISLE releases 1.2.0 - there will be some additional steps to take to migrate to this new release. We recommend that you also review the following: ISLE Installation: Environments Update ISLE documentation as well. The following files have new Varnish and Blazegraph information and ENVs which may need you to review, edit and/or merge in previous settings: All demo , local , staging , production and test .env files have a new ### Fedora Resource Index section with two new ENV variables. There are in-line instructions on how to switch between the default mulgara and optional component blazegraph All docker-compose.*.yml files have a new optional Blazegraph service section, ( commented out ) along with a ( commented out ) Blazegraph volume definition Test - test.env by default now tests Blazegraph instead of mulgara. Production - docker-compose.production.yml - New Varnish service added but commented out. production.env - New Varnish section with ENV variables ( commented out ) Local - docker-compose.local.yml - New Varnish service added but commented out. local.env - New Varnish section with ENV variables ( commented out ) Test - docker-compose.test.yml - New Varnish service added. test.env - New Varnish section with ENV variables","title":"Upgrade"},{"location":"release-notes/release-1-3-0/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-3-0/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.46","title":"isle-tomcat"},{"location":"release-notes/release-1-3-0/#isle-fedora","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded Maven to 3.6.2 Upgraded Ant to 1.10.7 Islandora transforms changes from August 15th Blazegraph work integrated Bug fix https://github.com/Islandora-Collaboration-Group/ISLE/issues/317","title":"isle-fedora"},{"location":"release-notes/release-1-3-0/#isle-imageservices","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Cantaloupe upgraded from 4.0.1 to 4.0.3 Cleanup of service paths https://github.com/Islandora-Collaboration-Group/ISLE/issues/226","title":"isle-imageservices"},{"location":"release-notes/release-1-3-0/#isle-solr","text":"Server package management updates via apt-get","title":"isle-solr"},{"location":"release-notes/release-1-3-0/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get PHP version 7.1 updates Upgraded FITS to version 1.5.0 Upgraded ImageMagick to version 7.0.8-66 Composer upgraded from commit / hash August 2, 2019 to Sept 2, 2019 (still v 1.9.0)","title":"isle-apache"},{"location":"release-notes/release-1-3-0/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-mysql"},{"location":"release-notes/release-1-3-0/#isle-blazegraph","text":"adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via `apt-get ISLE Tomcat base image upgrade from 1.1.1 to 1.3.0 Blazegraph upgraded from 2.1.4 to 2.1.5","title":"isle-blazegraph"},{"location":"release-notes/release-1-3-0/#isle-varnish","text":"Server package management updates via apt-get ISLE base image change from discontinued isle-ubuntu-basebox to ubuntu:xenial base image (sec updates) Varnish upgraded from 4.1.3-12 to 4.1.11","title":"isle-varnish"},{"location":"release-notes/release-1-4-0/","text":"Release Notes - ISLE v.1.4.0, 2019-11-26 Contributions to this release from: David Keiser-Clark (Williams College), documentation Gavin Morris (Born-Digital), code updates, documentation and testing Mark McFate (Grinnell College), documentation, code updates and testing Mark Sandford (Colgate University), documentation Bethany Seeger (Amherst College), testing and release manager Noah Smith (Born Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), documentation review ISLE (main project) This is an ISLE security release. Images have been updated and only minor adjustments in versions happened. Upgrade If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. ISLE Docker Images isle-tomcat adoptopenjdk/openjdk8 base image (security updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.47 isle-fedora Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get isle-imageservices Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get ImageMagick updates to version 7.0.9-5 OpenJpeg upgraded to commit / hash November 17th, 2019 (v. 2.3.1) isle-solr Server package management updates via apt-get isle-apache adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Upgraded ImageMagick to version 7.0.9-5 Composer upgraded from commit / hash November 1st, 2019 (v 1.9.1) Drush upgraded to 8.3.1 isle-mysql apt-get dist-upgrades for dependencies (sec updates) isle-blazegraph adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via `apt-get ISLE Tomcat base image upgrade from 1.3.0 to 1.4.0 isle-varnish Server package management updates via apt-get","title":"1.4.0"},{"location":"release-notes/release-1-4-0/#release-notes-isle-v140-2019-11-26","text":"","title":"Release Notes - ISLE v.1.4.0, 2019-11-26"},{"location":"release-notes/release-1-4-0/#contributions-to-this-release-from","text":"David Keiser-Clark (Williams College), documentation Gavin Morris (Born-Digital), code updates, documentation and testing Mark McFate (Grinnell College), documentation, code updates and testing Mark Sandford (Colgate University), documentation Bethany Seeger (Amherst College), testing and release manager Noah Smith (Born Digital), code updates and testing Shaun Trujillo (Mount Holyoke College), documentation review","title":"Contributions to this release from:"},{"location":"release-notes/release-1-4-0/#isle-main-project","text":"This is an ISLE security release. Images have been updated and only minor adjustments in versions happened.","title":"ISLE (main project)"},{"location":"release-notes/release-1-4-0/#upgrade","text":"If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation.","title":"Upgrade"},{"location":"release-notes/release-1-4-0/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-4-0/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.47","title":"isle-tomcat"},{"location":"release-notes/release-1-4-0/#isle-fedora","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get","title":"isle-fedora"},{"location":"release-notes/release-1-4-0/#isle-imageservices","text":"Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get ImageMagick updates to version 7.0.9-5 OpenJpeg upgraded to commit / hash November 17th, 2019 (v. 2.3.1)","title":"isle-imageservices"},{"location":"release-notes/release-1-4-0/#isle-solr","text":"Server package management updates via apt-get","title":"isle-solr"},{"location":"release-notes/release-1-4-0/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Upgraded ImageMagick to version 7.0.9-5 Composer upgraded from commit / hash November 1st, 2019 (v 1.9.1) Drush upgraded to 8.3.1","title":"isle-apache"},{"location":"release-notes/release-1-4-0/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-mysql"},{"location":"release-notes/release-1-4-0/#isle-blazegraph","text":"adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via `apt-get ISLE Tomcat base image upgrade from 1.3.0 to 1.4.0","title":"isle-blazegraph"},{"location":"release-notes/release-1-4-0/#isle-varnish","text":"Server package management updates via apt-get","title":"isle-varnish"},{"location":"release-notes/release-1-4-1/","text":"Release Notes - ISLE v.1.4.1, 2020-01-31 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation Noah Smith (Born Digital), code updates and testing Big thanks for all of Brandon Weigel's hard work in bug hunting and the Apache PR fix. (Arca (https://arcabc.ca) Manager and technical lead, and coordinator at BC ELN (http://bceln.ca).) More names to be added once release has been fully tested. ISLE (main project) This is an ISLE security release. Images have been updated and only minor adjustments in versions happened. Upgrade If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. ISLE Docker Images isle-apache adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Accepted PR for apache2.conf work from @bondjimbond for .htaccess issue on Redhat specific ISLE Host servers Upgraded ImageMagick to version 7.0.9-8 Composer upgraded from commit / hash Jan 14, 2020 (v 1.9.1) Drush upgraded to 8.3.2 OpenJpeg upgraded to commit / hash Jan 13th, 2020 (v. 2.3.1) isle-blazegraph ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via `apt-get isle-fedora ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Maven upgrade from 3.6.2. to 3.6.3 isle-imageservices ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get ImageMagick updates to version 7.0.9-8 OpenJpeg upgraded to commit / hashJan 13th, 2020 (v. 2.3.1) isle-mysql apt-get dist-upgrades for dependencies (sec updates) Additions to README.md for environmental variables & link to MySQL's license information Added LICENSE file isle-solr ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get isle-tomcat adoptopenjdk/openjdk8 base image (security updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.50 isle-varnish Server package management updates via apt-get","title":"1.4.1"},{"location":"release-notes/release-1-4-1/#release-notes-isle-v141-2020-01-31","text":"","title":"Release Notes - ISLE v.1.4.1, 2020-01-31"},{"location":"release-notes/release-1-4-1/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation Noah Smith (Born Digital), code updates and testing Big thanks for all of Brandon Weigel's hard work in bug hunting and the Apache PR fix. (Arca (https://arcabc.ca) Manager and technical lead, and coordinator at BC ELN (http://bceln.ca).) More names to be added once release has been fully tested.","title":"Contributions to this release from:"},{"location":"release-notes/release-1-4-1/#isle-main-project","text":"This is an ISLE security release. Images have been updated and only minor adjustments in versions happened.","title":"ISLE (main project)"},{"location":"release-notes/release-1-4-1/#upgrade","text":"If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation.","title":"Upgrade"},{"location":"release-notes/release-1-4-1/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-4-1/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Accepted PR for apache2.conf work from @bondjimbond for .htaccess issue on Redhat specific ISLE Host servers Upgraded ImageMagick to version 7.0.9-8 Composer upgraded from commit / hash Jan 14, 2020 (v 1.9.1) Drush upgraded to 8.3.2 OpenJpeg upgraded to commit / hash Jan 13th, 2020 (v. 2.3.1)","title":"isle-apache"},{"location":"release-notes/release-1-4-1/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via `apt-get","title":"isle-blazegraph"},{"location":"release-notes/release-1-4-1/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Maven upgrade from 3.6.2. to 3.6.3","title":"isle-fedora"},{"location":"release-notes/release-1-4-1/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get ImageMagick updates to version 7.0.9-8 OpenJpeg upgraded to commit / hashJan 13th, 2020 (v. 2.3.1)","title":"isle-imageservices"},{"location":"release-notes/release-1-4-1/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates) Additions to README.md for environmental variables & link to MySQL's license information Added LICENSE file","title":"isle-mysql"},{"location":"release-notes/release-1-4-1/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.4.0 to 1.4.1 adoptopenjdk/openjdk8 base image (sec updates) Server package management updates via apt-get","title":"isle-solr"},{"location":"release-notes/release-1-4-1/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) Server package management updates via apt-get Updated GEN_DEP_PACKS dependencies via apt-get Upgraded tomcat to 8.5.50","title":"isle-tomcat"},{"location":"release-notes/release-1-4-1/#isle-varnish","text":"Server package management updates via apt-get","title":"isle-varnish"},{"location":"release-notes/release-1-4-2/","text":"Release Notes - ISLE v.1.4.2, 2020-04-06 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation Francis Dunham (Born-Digital), testing & Behat fixes Hertzel Armengol (Born-Digital), PHP, composer & Behat fixes ISLE (main project) This is an ISLE security release. Images have been updated and only minor adjustments in versions happened. Upgrade If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. ISLE Docker Images isle-apache adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-1 Composer upgraded to commit / hash March 13th, 2020 (v 1.10.1) OpenJpeg upgraded to commit / hash Feb 13th, 2020 (v. 2.3.1) isle-blazegraph ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-fedora ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-imageservices ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-1 OpenJpeg upgraded to commit / hash Feb 13th, 2020 (v. 2.3.1) isle-mysql apt-get dist-upgrades for dependencies (sec updates) isle-solr ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-tomcat adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) tomcat upgraded to 8.5.53 isle-varnish apt-get dist-upgrades for dependencies (sec updates) ISLE-Ansible Ansible deploy script received modifications for new versions of Docker, Docker-compose and additional software.","title":"1.4.2"},{"location":"release-notes/release-1-4-2/#release-notes-isle-v142-2020-04-06","text":"","title":"Release Notes - ISLE v.1.4.2, 2020-04-06"},{"location":"release-notes/release-1-4-2/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation Francis Dunham (Born-Digital), testing & Behat fixes Hertzel Armengol (Born-Digital), PHP, composer & Behat fixes","title":"Contributions to this release from:"},{"location":"release-notes/release-1-4-2/#isle-main-project","text":"This is an ISLE security release. Images have been updated and only minor adjustments in versions happened.","title":"ISLE (main project)"},{"location":"release-notes/release-1-4-2/#upgrade","text":"If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation.","title":"Upgrade"},{"location":"release-notes/release-1-4-2/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-4-2/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-1 Composer upgraded to commit / hash March 13th, 2020 (v 1.10.1) OpenJpeg upgraded to commit / hash Feb 13th, 2020 (v. 2.3.1)","title":"isle-apache"},{"location":"release-notes/release-1-4-2/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-blazegraph"},{"location":"release-notes/release-1-4-2/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-fedora"},{"location":"release-notes/release-1-4-2/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-1 OpenJpeg upgraded to commit / hash Feb 13th, 2020 (v. 2.3.1)","title":"isle-imageservices"},{"location":"release-notes/release-1-4-2/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-mysql"},{"location":"release-notes/release-1-4-2/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.4.1 to 1.4.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-solr"},{"location":"release-notes/release-1-4-2/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) tomcat upgraded to 8.5.53","title":"isle-tomcat"},{"location":"release-notes/release-1-4-2/#isle-varnish","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-varnish"},{"location":"release-notes/release-1-4-2/#isle-ansible","text":"Ansible deploy script received modifications for new versions of Docker, Docker-compose and additional software.","title":"ISLE-Ansible"},{"location":"release-notes/release-1-5-0/","text":"Release Notes - ISLE v.1.5.0, 2020-05 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Noah Smith (Born-Digital), code updates, documentation, Matomo profile addition. Mark Sandford (Colgate University), documentation Hertzel Armengol (Born-Digital), testing & Dockerfile fixes Francis Dunham (Born-Digital), testing ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config Matomo docs and config files added fix for bfg cleanup script URL default .env removed and replaced with sample.env docs to be added on how to use sample.env Upgrade If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. ISLE Docker Images isle-apache adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-11 Composer upgraded to commit / hash May 6th, 2020 (v 1.10.1) OpenJpeg upgraded to commit / hash Apr 18th, 2020 (v. 2.3.1) Volume removed from Dockerfile to stop overlay2 issues Vhost fix for cantaloupe IIIF 4.1.5 upgrade and changes isle-blazegraph ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-fedora ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-imageservices ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) Cantaloupe upgraded to version 4.1.5 Cantaloupe caching turned off due to viewing issues delegates.rb able to use two configs ImageMagick upgraded to version 7.0.10-11 OpenJpeg upgraded to commit / hash Apr 18th, 2020 (v. 2.3.1) Adds new proxy settings for IIIF to allow X-islandora token to work in IAB and Openseadragon viewers for Books and Large Images isle-mysql apt-get dist-upgrades for dependencies (sec updates) isle-solr ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-tomcat adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) tomcat upgraded to 8.5.55 isle-varnish apt-get dist-upgrades for dependencies (sec updates)","title":"1.5.0"},{"location":"release-notes/release-1-5-0/#release-notes-isle-v150-2020-05","text":"","title":"Release Notes - ISLE v.1.5.0, 2020-05"},{"location":"release-notes/release-1-5-0/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Noah Smith (Born-Digital), code updates, documentation, Matomo profile addition. Mark Sandford (Colgate University), documentation Hertzel Armengol (Born-Digital), testing & Dockerfile fixes Francis Dunham (Born-Digital), testing","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-0/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config Matomo docs and config files added fix for bfg cleanup script URL default .env removed and replaced with sample.env docs to be added on how to use sample.env","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-0/#upgrade","text":"If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation.","title":"Upgrade"},{"location":"release-notes/release-1-5-0/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-0/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-11 Composer upgraded to commit / hash May 6th, 2020 (v 1.10.1) OpenJpeg upgraded to commit / hash Apr 18th, 2020 (v. 2.3.1) Volume removed from Dockerfile to stop overlay2 issues Vhost fix for cantaloupe IIIF 4.1.5 upgrade and changes","title":"isle-apache"},{"location":"release-notes/release-1-5-0/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-0/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-fedora"},{"location":"release-notes/release-1-5-0/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) Cantaloupe upgraded to version 4.1.5 Cantaloupe caching turned off due to viewing issues delegates.rb able to use two configs ImageMagick upgraded to version 7.0.10-11 OpenJpeg upgraded to commit / hash Apr 18th, 2020 (v. 2.3.1) Adds new proxy settings for IIIF to allow X-islandora token to work in IAB and Openseadragon viewers for Books and Large Images","title":"isle-imageservices"},{"location":"release-notes/release-1-5-0/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-mysql"},{"location":"release-notes/release-1-5-0/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.4.2 to 1.5.0 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-solr"},{"location":"release-notes/release-1-5-0/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) tomcat upgraded to 8.5.55","title":"isle-tomcat"},{"location":"release-notes/release-1-5-0/#isle-varnish","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-varnish"},{"location":"release-notes/release-1-5-1/","text":"Release Notes - ISLE v.1.5.1, 2020-08 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config Apache fix for file naming Cantaloup bug fix Upgrade If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. ISLE Docker Images isle-apache adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.0.0.1 ImageMagick upgraded to version 7.0.10-24 Composer upgraded to commit / hash July 18th, 2020 (v 1.10.9) OpenJpeg upgraded to commit / hash June 30th, 2020 (v. 2.3.1) isle-blazegraph ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-fedora ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) Apache Ant upgrade from 1.10.7 to 1.10.8 isle-imageservices ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) Cantaloupe upgraded to version 4.1.6 Kakadu symlinks removed ImageMagick upgraded to version 7.0.10-24 OpenJpeg upgraded to commit / hash June 30th, 2020 (v. 2.3.1) isle-mysql apt-get dist-upgrades for dependencies (sec updates) isle-solr ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-tomcat adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.0.0.1 tomcat upgraded to 8.5.57 isle-varnish S6 overlay upgraded to 2.0.0.1 apt-get dist-upgrades for dependencies (sec updates)","title":"1.5.1"},{"location":"release-notes/release-1-5-1/#release-notes-isle-v151-2020-08","text":"","title":"Release Notes - ISLE v.1.5.1, 2020-08"},{"location":"release-notes/release-1-5-1/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-1/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config Apache fix for file naming Cantaloup bug fix","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-1/#upgrade","text":"If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation.","title":"Upgrade"},{"location":"release-notes/release-1-5-1/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-1/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.0.0.1 ImageMagick upgraded to version 7.0.10-24 Composer upgraded to commit / hash July 18th, 2020 (v 1.10.9) OpenJpeg upgraded to commit / hash June 30th, 2020 (v. 2.3.1)","title":"isle-apache"},{"location":"release-notes/release-1-5-1/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-1/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) Apache Ant upgrade from 1.10.7 to 1.10.8","title":"isle-fedora"},{"location":"release-notes/release-1-5-1/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) Cantaloupe upgraded to version 4.1.6 Kakadu symlinks removed ImageMagick upgraded to version 7.0.10-24 OpenJpeg upgraded to commit / hash June 30th, 2020 (v. 2.3.1)","title":"isle-imageservices"},{"location":"release-notes/release-1-5-1/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-mysql"},{"location":"release-notes/release-1-5-1/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.5.0 to 1.5.1 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-solr"},{"location":"release-notes/release-1-5-1/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.0.0.1 tomcat upgraded to 8.5.57","title":"isle-tomcat"},{"location":"release-notes/release-1-5-1/#isle-varnish","text":"S6 overlay upgraded to 2.0.0.1 apt-get dist-upgrades for dependencies (sec updates)","title":"isle-varnish"},{"location":"release-notes/release-1-5-2/","text":"Release Notes - ISLE v.1.5.2, 2020-09 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config Upgrade If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. ISLE Docker Images isle-apache adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.1.0.0 ImageMagick upgraded to version 7.0.10-29 Composer upgraded to commit / hash September 11th, 2020 (v 1.10.13) OpenJpeg upgraded to commit / hash September 16th, 2020 (v. 2.3.1) isle-blazegraph ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-fedora ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-imageservices ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-29 OpenJpeg upgraded to commit / hash September 16th, 2020 (v. 2.3.1) isle-mysql apt-get dist-upgrades for dependencies (sec updates) isle-solr ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) isle-tomcat adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.1.0.0 isle-varnish S6 overlay upgraded to 2.1.0.0 apt-get dist-upgrades for dependencies (sec updates)","title":"1.5.2"},{"location":"release-notes/release-1-5-2/#release-notes-isle-v152-2020-09","text":"","title":"Release Notes - ISLE v.1.5.2, 2020-09"},{"location":"release-notes/release-1-5-2/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-2/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-2/#upgrade","text":"If you are coming from ISLE releases 1.3.0 then you need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation. If you are coming from an ISLE release older then 1.3.0 , please read the release notes for 1.3.0 to understand the paradigm shift that happened between previous releases. You will also need to follow the instructions given in the Cleanup ISLE git repository for Release v.1.4.0 documentation.","title":"Upgrade"},{"location":"release-notes/release-1-5-2/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-2/#isle-apache","text":"adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.1.0.0 ImageMagick upgraded to version 7.0.10-29 Composer upgraded to commit / hash September 11th, 2020 (v 1.10.13) OpenJpeg upgraded to commit / hash September 16th, 2020 (v. 2.3.1)","title":"isle-apache"},{"location":"release-notes/release-1-5-2/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-2/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-fedora"},{"location":"release-notes/release-1-5-2/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates) ImageMagick upgraded to version 7.0.10-29 OpenJpeg upgraded to commit / hash September 16th, 2020 (v. 2.3.1)","title":"isle-imageservices"},{"location":"release-notes/release-1-5-2/#isle-mysql","text":"apt-get dist-upgrades for dependencies (sec updates)","title":"isle-mysql"},{"location":"release-notes/release-1-5-2/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.5.1 to 1.5.2 adoptopenjdk/openjdk8 base image (sec updates) apt-get dist-upgrades for dependencies (sec updates)","title":"isle-solr"},{"location":"release-notes/release-1-5-2/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image (security updates) apt-get dist-upgrades for dependencies (sec updates) S6 overlay upgraded to 2.1.0.0","title":"isle-tomcat"},{"location":"release-notes/release-1-5-2/#isle-varnish","text":"S6 overlay upgraded to 2.1.0.0 apt-get dist-upgrades for dependencies (sec updates)","title":"isle-varnish"},{"location":"release-notes/release-1-5-3/","text":"Release Notes - ISLE v.1.5.3, 2020-12 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config Branches change - master is no longer the default branch, main is now the default branch master will be deprecated then moved out. Warnings & Notes AS OF THE ISLE v.1.5.3 release in December 2020 (MANDATORY) The ISLE maintainers in agreement with the wider Islandora community have changed the default branch of master to main to work towards a more inclusive and open culture with removing language like \"master or slave\" as an important step. As a result the main branch will now be the default branch. ISLE users will need to continue to checkout main and pull from main as they once did with the now defunct master on all of their projects. git fetch --all git checkout main git pull origin main All future releases will be built and tagged from the main branches on all ISLE Docker images Github repositories as well. After December 2020, no more updates will be avaible from the master branch which will be deprecated and ultimately deleted in 2021. ISLE Docker Images isle-apache adoptopenjdk/openjdk8 base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates S6 overlay upgraded to 2.1.0.2 ImageMagick upgraded to version 7.0.10-51 Composer upgraded to commit / hash December 4th, 2020 (v 1.10.19) OpenJpeg upgraded to commit / hash December 5th, 2020 (v. 2.3.1) Github Actions workflow added for automated Docker image builds isle-blazegraph ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds isle-fedora ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Apache Ant upgraded to version 1.10.9 Github Actions workflow added for automated Docker image builds isle-imageservices ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Cantaloupe upgraded to version 4.1.7 ImageMagick upgraded to version 7.0.10-51 OpenJpeg upgraded to commit / hash December 5th, 2020 (v. 2.3.1) Github Actions workflow added for automated Docker image builds isle-mysql apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds isle-solr ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds isle-tomcat adoptopenjdk/openjdk8 base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates Apache Tomcat upgraded to 8.5.61 S6 overlay upgraded to 2.1.0.2 Github Actions workflow added for automated Docker image builds isle-varnish S6 overlay upgraded to 2.1.0.2 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds","title":"1.5.3"},{"location":"release-notes/release-1-5-3/#release-notes-isle-v153-2020-12","text":"","title":"Release Notes - ISLE v.1.5.3, 2020-12"},{"location":"release-notes/release-1-5-3/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-3/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config Branches change - master is no longer the default branch, main is now the default branch master will be deprecated then moved out.","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-3/#warnings-notes","text":"AS OF THE ISLE v.1.5.3 release in December 2020 (MANDATORY) The ISLE maintainers in agreement with the wider Islandora community have changed the default branch of master to main to work towards a more inclusive and open culture with removing language like \"master or slave\" as an important step. As a result the main branch will now be the default branch. ISLE users will need to continue to checkout main and pull from main as they once did with the now defunct master on all of their projects. git fetch --all git checkout main git pull origin main All future releases will be built and tagged from the main branches on all ISLE Docker images Github repositories as well. After December 2020, no more updates will be avaible from the master branch which will be deprecated and ultimately deleted in 2021.","title":"Warnings &amp; Notes"},{"location":"release-notes/release-1-5-3/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-3/#isle-apache","text":"adoptopenjdk/openjdk8 base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates S6 overlay upgraded to 2.1.0.2 ImageMagick upgraded to version 7.0.10-51 Composer upgraded to commit / hash December 4th, 2020 (v 1.10.19) OpenJpeg upgraded to commit / hash December 5th, 2020 (v. 2.3.1) Github Actions workflow added for automated Docker image builds","title":"isle-apache"},{"location":"release-notes/release-1-5-3/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-3/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Apache Ant upgraded to version 1.10.9 Github Actions workflow added for automated Docker image builds","title":"isle-fedora"},{"location":"release-notes/release-1-5-3/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Cantaloupe upgraded to version 4.1.7 ImageMagick upgraded to version 7.0.10-51 OpenJpeg upgraded to commit / hash December 5th, 2020 (v. 2.3.1) Github Actions workflow added for automated Docker image builds","title":"isle-imageservices"},{"location":"release-notes/release-1-5-3/#isle-mysql","text":"apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds","title":"isle-mysql"},{"location":"release-notes/release-1-5-3/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.5.2 to 1.5.3 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds","title":"isle-solr"},{"location":"release-notes/release-1-5-3/#isle-tomcat","text":"adoptopenjdk/openjdk8 base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates Apache Tomcat upgraded to 8.5.61 S6 overlay upgraded to 2.1.0.2 Github Actions workflow added for automated Docker image builds","title":"isle-tomcat"},{"location":"release-notes/release-1-5-3/#isle-varnish","text":"S6 overlay upgraded to 2.1.0.2 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow added for automated Docker image builds","title":"isle-varnish"},{"location":"release-notes/release-1-5-4/","text":"Release Notes - ISLE v.1.5.4, 2021-02 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation David Keiser-Clark (Williams College), documentation ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config ISLE Docker Images isle-apache adoptopenjdk:8-jdk-hotspot is now base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates S6 overlay upgraded to 2.2.0.3 ImageMagick upgraded to version 7.0.11-0 Composer upgraded to commit / hash January 27th, 2021 (v 1.10.20) OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated isle-blazegraph ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-fedora ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-imageservices ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-0 OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated isle-mysql apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-solr ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-tomcat adoptopenjdk:8-jdk-hotspot is now base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates S6 overlay upgraded to 2.2.0.3 Apache Tomcat upgraded to 8.5.63 Github Actions workflow updated isle-varnish S6 overlay upgraded to 2.2.0.3 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"1.5.4"},{"location":"release-notes/release-1-5-4/#release-notes-isle-v154-2021-02","text":"","title":"Release Notes - ISLE v.1.5.4, 2021-02"},{"location":"release-notes/release-1-5-4/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation David Keiser-Clark (Williams College), documentation","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-4/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-4/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-4/#isle-apache","text":"adoptopenjdk:8-jdk-hotspot is now base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates S6 overlay upgraded to 2.2.0.3 ImageMagick upgraded to version 7.0.11-0 Composer upgraded to commit / hash January 27th, 2021 (v 1.10.20) OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated","title":"isle-apache"},{"location":"release-notes/release-1-5-4/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-4/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-fedora"},{"location":"release-notes/release-1-5-4/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-0 OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated","title":"isle-imageservices"},{"location":"release-notes/release-1-5-4/#isle-mysql","text":"apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-mysql"},{"location":"release-notes/release-1-5-4/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.5.3 to 1.5.4 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-solr"},{"location":"release-notes/release-1-5-4/#isle-tomcat","text":"adoptopenjdk:8-jdk-hotspot is now base image security and package updates base image upgraded to Ubuntu 20.04 LTS apt-get dist-upgrades for dependencies security and package updates S6 overlay upgraded to 2.2.0.3 Apache Tomcat upgraded to 8.5.63 Github Actions workflow updated","title":"isle-tomcat"},{"location":"release-notes/release-1-5-4/#isle-varnish","text":"S6 overlay upgraded to 2.2.0.3 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-varnish"},{"location":"release-notes/release-1-5-5/","text":"Release Notes - ISLE v.1.5.5, 2021-03 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation David Keiser-Clark (Williams College), documentation, code updates Mark McFate, (Grinnell College), documentation, testing and code updates Tom Shorock, (Univ. of Kansas), testing and code updates Brandon Weigel, (Arca), documentation, testing ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config Release fixes ISLE v.1.5.5 release fixes ISLE Docker Images isle-apache apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-3 Composer upgraded to commit / hash March 10th, 2021 (v 1.10.20) OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/187 https://github.com/Islandora-Collaboration-Group/ISLE/issues/195 https://github.com/Islandora-Collaboration-Group/ISLE/issues/411 isle-blazegraph ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-fedora ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/190 isle-imageservices ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Cantaloupe upgraded to version 4.1.8 ImageMagick upgraded to version 7.0.11-3 OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/207 isle-mysql apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-solr ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-tomcat apt-get dist-upgrades for dependencies security and package updates Apache Tomcat upgraded to 8.5.64 Github Actions workflow updated isle-varnish apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-drupal-build-tools pdf.js now default viewer for PDFs and working by default now in install & migation scripts. Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/194","title":"1.5.5"},{"location":"release-notes/release-1-5-5/#release-notes-isle-v155-2021-03","text":"","title":"Release Notes - ISLE v.1.5.5, 2021-03"},{"location":"release-notes/release-1-5-5/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation David Keiser-Clark (Williams College), documentation, code updates Mark McFate, (Grinnell College), documentation, testing and code updates Tom Shorock, (Univ. of Kansas), testing and code updates Brandon Weigel, (Arca), documentation, testing","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-5/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-5/#release-fixes","text":"ISLE v.1.5.5 release fixes","title":"Release fixes"},{"location":"release-notes/release-1-5-5/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-5/#isle-apache","text":"apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-3 Composer upgraded to commit / hash March 10th, 2021 (v 1.10.20) OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/187 https://github.com/Islandora-Collaboration-Group/ISLE/issues/195 https://github.com/Islandora-Collaboration-Group/ISLE/issues/411","title":"isle-apache"},{"location":"release-notes/release-1-5-5/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-5/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/190","title":"isle-fedora"},{"location":"release-notes/release-1-5-5/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Cantaloupe upgraded to version 4.1.8 ImageMagick upgraded to version 7.0.11-3 OpenJpeg upgraded to commit / hash January 10th, 2020 (v. 2.4.0) Github Actions workflow updated Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/207","title":"isle-imageservices"},{"location":"release-notes/release-1-5-5/#isle-mysql","text":"apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-mysql"},{"location":"release-notes/release-1-5-5/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.5.4 to 1.5.5 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-solr"},{"location":"release-notes/release-1-5-5/#isle-tomcat","text":"apt-get dist-upgrades for dependencies security and package updates Apache Tomcat upgraded to 8.5.64 Github Actions workflow updated","title":"isle-tomcat"},{"location":"release-notes/release-1-5-5/#isle-varnish","text":"apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-varnish"},{"location":"release-notes/release-1-5-5/#isle-drupal-build-tools","text":"pdf.js now default viewer for PDFs and working by default now in install & migation scripts. Release fixes https://github.com/Islandora-Collaboration-Group/ISLE/issues/194","title":"isle-drupal-build-tools"},{"location":"release-notes/release-1-5-6/","text":"Release Notes - ISLE v.1.5.6, 2021-04 Contributions to this release from: Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation David Keiser-Clark (Williams College), documentation, code updates Yamil Suarez (Berklee College of Music), documentation and testing) ISLE (main project) This is an ISLE security and feature update release. Images have been updated along with the ISLE config ISLE Docker Images isle-apache apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-6 Composer upgraded to commit / hash April 18th, 2021 (v 1.10.21) Github Actions workflow updated isle-blazegraph ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-fedora ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates Apache Maven held at version 3.6.3 despite a recent April 3.8.1 release. Breaks POM dependencies and blocks mirrors. Apache Ant updated to version 1.10.10 as of April 17th Github Actions workflow updated isle-imageservices ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-6 Github Actions workflow updated isle-mysql apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-solr ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated isle-tomcat apt-get dist-upgrades for dependencies security and package updates Apache Tomcat upgraded to 8.5.65 Github Actions workflow updated isle-varnish apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"Latest release: 1.5.6"},{"location":"release-notes/release-1-5-6/#release-notes-isle-v156-2021-04","text":"","title":"Release Notes - ISLE v.1.5.6, 2021-04"},{"location":"release-notes/release-1-5-6/#contributions-to-this-release-from","text":"Gavin Morris (Born-Digital), code updates, documentation, testing and release manager for this version Mark Sandford (Colgate University), documentation David Keiser-Clark (Williams College), documentation, code updates Yamil Suarez (Berklee College of Music), documentation and testing)","title":"Contributions to this release from:"},{"location":"release-notes/release-1-5-6/#isle-main-project","text":"This is an ISLE security and feature update release. Images have been updated along with the ISLE config","title":"ISLE (main project)"},{"location":"release-notes/release-1-5-6/#isle-docker-images","text":"","title":"ISLE Docker Images"},{"location":"release-notes/release-1-5-6/#isle-apache","text":"apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-6 Composer upgraded to commit / hash April 18th, 2021 (v 1.10.21) Github Actions workflow updated","title":"isle-apache"},{"location":"release-notes/release-1-5-6/#isle-blazegraph","text":"ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-blazegraph"},{"location":"release-notes/release-1-5-6/#isle-fedora","text":"ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates Apache Maven held at version 3.6.3 despite a recent April 3.8.1 release. Breaks POM dependencies and blocks mirrors. Apache Ant updated to version 1.10.10 as of April 17th Github Actions workflow updated","title":"isle-fedora"},{"location":"release-notes/release-1-5-6/#isle-imageservices","text":"ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates ImageMagick upgraded to version 7.0.11-6 Github Actions workflow updated","title":"isle-imageservices"},{"location":"release-notes/release-1-5-6/#isle-mysql","text":"apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-mysql"},{"location":"release-notes/release-1-5-6/#isle-solr","text":"ISLE Tomcat base image upgrade from 1.5.5 to 1.5.6 apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-solr"},{"location":"release-notes/release-1-5-6/#isle-tomcat","text":"apt-get dist-upgrades for dependencies security and package updates Apache Tomcat upgraded to 8.5.65 Github Actions workflow updated","title":"isle-tomcat"},{"location":"release-notes/release-1-5-6/#isle-varnish","text":"apt-get dist-upgrades for dependencies security and package updates Github Actions workflow updated","title":"isle-varnish"},{"location":"specifications/diagram-network/","text":"","title":"Diagram network"},{"location":"specifications/docker-containers-images/","text":"ISLE Image Container Software / Service Version islandoracollabgroup/isle-apache isle-apache Dockerfile Apache 2.4 Drupal 7.x+ Islandora 7.x-1.3x AdoptJDK JDK 8.x PHP 7.1 ISLE Image Container Software / Service Version islandoracollabgroup/isle-fedora isle-fedora Dockerfile Tomcat 8.x Drupal filter 7.x Fedora 3.8.1 Gsearch DG Patched 2.x GSearch Extensions 0.1.x Islandora Transforms (XSLTs) latest XSLTs from DG repository MySQL (client) 5.6 AdoptJDK JDK 8.x ISLE Image Container Software / Service Version islandoracollabgroup/isle-mysql isle-mysql Dockerfile MySQL Server 5.x ISLE Image Container Software / Service Version islandoracollabgroup/isle-solr isle-solr Dockerfile Tomcat 8.x Solr 4.10.4 AdoptJDK JDK 8.x ISLE Image Container Software / Service Version islandoracollabgroup/isle-proxy isle-proxy Dockerfile Traefik 1.7.9","title":"Docker containers images"},{"location":"specifications/dockerfiles/","text":"Dockerfiles The ISLE Images are created by the use of Dockerfiles, text documents that contain all the commands an ISLE contributor could call on the command line to assemble an image. Using docker build users e.g. ISLE Contributors or Developers can create an automated build that executes several command-line instructions in succession. Assumptions / Prerequisites ISLE Contributors, Developers have pre-existing knowledge or familiarity with Dockerfile Dockerfiles , their editing process and compositions are familiar or known concepts. Dockerfile Locations These files can be found within their respective Github repository. Each directory is seperated by the image / container software type and each contains a respective Dockerfile. apache fedora image-services mysql solr tomcat Please note that isle-proxy uses an official Traefik image. Optional Dockerfiles blazegraph varnish Dockerfile Conventions Making changes within these files will alter the contents and functionality of the ISLE images. Ensure that each Dockerfile does not have a file suffix or extension. Each command needs to be terminated with a \\ unless it is the final command. Each new command or action added will increase the size of the image once built. Attempt to balance size with functionality. All ISLE images use official Docker build images. Review the Docker Containers & Images Specifications page for a listing of those builds. Directory Structure Example is from the Apache image directory \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 build \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 README.md \u2514\u2500\u2500 rootfs \u251c\u2500\u2500 etc \u2502 \u251c\u2500\u2500 apache2 \u2502 \u2502 \u2514\u2500\u2500 conf-available \u2502 \u2502 \u251c\u2500\u2500 other-vhosts-access-log.conf \u2502 \u2502 \u251c\u2500\u2500 remoteip.conf \u2502 \u2502 \u2514\u2500\u2500 servername.conf \u2502 \u251c\u2500\u2500 confd \u2502 \u2502 \u251c\u2500\u2500 conf.d \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-apache2-conf.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-isle-installer.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-settings.php.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-site-conf.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-sql.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 fits-log4j.properties.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 php-cli-ini.toml \u2502 \u2502 \u2502 \u2514\u2500\u2500 php-ini.toml \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 apache \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache2.conf.tpl \u2502 \u2502 \u2502 \u2514\u2500\u2500 site_template.conf.tpl \u2502 \u2502 \u251c\u2500\u2500 fits \u2502 \u2502 \u2502 \u2514\u2500\u2500 log4j.properties.tpl \u2502 \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u2502 \u251c\u2500\u2500 cli.php.ini.tpl \u2502 \u2502 \u2502 \u2514\u2500\u2500 php.ini.tpl \u2502 \u2502 \u2514\u2500\u2500 sql \u2502 \u2502 \u2514\u2500\u2500 apache.sql.tpl \u2502 \u251c\u2500\u2500 cont-init.d \u2502 \u2502 \u251c\u2500\u2500 00-islandora-uid \u2502 \u2502 \u2514\u2500\u2500 01-confd-site-enable \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u251c\u2500\u2500 7.0 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2502 \u251c\u2500\u2500 7.1 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2502 \u251c\u2500\u2500 7.2 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2502 \u2514\u2500\u2500 7.3 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2514\u2500\u2500 services.d \u2502 \u251c\u2500\u2500 apache \u2502 \u2502 \u2514\u2500\u2500 run \u2502 \u2514\u2500\u2500 cron \u2502 \u2514\u2500\u2500 run \u2514\u2500\u2500 usr \u2514\u2500\u2500 local \u251c\u2500\u2500 adore-djatoka-1.1 \u2502 \u2514\u2500\u2500 bin \u2502 \u251c\u2500\u2500 env.sh \u2502 \u2514\u2500\u2500 log4j.properties \u2514\u2500\u2500 etc \u2514\u2500\u2500 ImageMagick-7 \u251c\u2500\u2500 log.xml \u2514\u2500\u2500 policy.xml 31 directories, 34 files Dockerfile Composition Following standard Docker convention , all ISLE Dockerfiles have similar structures. Examples displayed are from the Apache Dockerfile . FROM command indicating which official Docker image is used as the base build. The Apache image uses one base image to build from as it both contains an Ubuntu 20.04 LTS OS and Adopt-JDK 8.x for Java FROM adoptopenjdk:8-jdk-hotspot is the first base image used. LABEL - For ISLE Committers to version control image descriptions, functionality and additional meta-data. ( optional ) RUN - Execute commands e.g. RUN apt-get update , etc. COPY - Within each ISLE image directory there are additional files or subdirectories are copied from the personal computer to the image itself. ENV - sets any environmental variables necessary for software to run or be configured properly. VOLUME - Exposes a volume for data necessary for the build to continue. e.g. VOLUME /var/www/html EXPOSE - Opens up ports (80,443) on the temporary build containers created and to persist in further usage. Can be overridden by any docker-compose.yml file ENTRYPOINT - Allows you to configure a container that will run as an executable. Within the apache Dockerfile , the server is told to \"run\" using the apache2ctl utility by this last line: ENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"] Dockerfile Commenting For ISLE Contributors when possible it is highly recommended that all sections be commented appropriately to explain functionality or actions to all Developers looking to customize or curious end users. Example: ## Apache, PHP, FFMPEG, and other Islandora Depends. ## Apache && PHP 7.1 from ondrej PPA ## Per @g7morris, ghostscript from repo is OK. RUN add-apt-repository -y ppa:ondrej/apache2 && \\ add-apt-repository -y ppa:ondrej/php && \\ FFMPEG_PACKS=\"ffmpeg \\ ffmpeg2theora \\ libavcodec-extra \\ lame \\","title":"Dockerfiles"},{"location":"specifications/dockerfiles/#dockerfiles","text":"The ISLE Images are created by the use of Dockerfiles, text documents that contain all the commands an ISLE contributor could call on the command line to assemble an image. Using docker build users e.g. ISLE Contributors or Developers can create an automated build that executes several command-line instructions in succession.","title":"Dockerfiles"},{"location":"specifications/dockerfiles/#assumptions-prerequisites","text":"ISLE Contributors, Developers have pre-existing knowledge or familiarity with Dockerfile Dockerfiles , their editing process and compositions are familiar or known concepts.","title":"Assumptions / Prerequisites"},{"location":"specifications/dockerfiles/#dockerfile-locations","text":"These files can be found within their respective Github repository. Each directory is seperated by the image / container software type and each contains a respective Dockerfile. apache fedora image-services mysql solr tomcat Please note that isle-proxy uses an official Traefik image.","title":"Dockerfile Locations"},{"location":"specifications/dockerfiles/#optional-dockerfiles","text":"blazegraph varnish","title":"Optional Dockerfiles"},{"location":"specifications/dockerfiles/#dockerfile-conventions","text":"Making changes within these files will alter the contents and functionality of the ISLE images. Ensure that each Dockerfile does not have a file suffix or extension. Each command needs to be terminated with a \\ unless it is the final command. Each new command or action added will increase the size of the image once built. Attempt to balance size with functionality. All ISLE images use official Docker build images. Review the Docker Containers & Images Specifications page for a listing of those builds.","title":"Dockerfile Conventions"},{"location":"specifications/dockerfiles/#directory-structure","text":"Example is from the Apache image directory \u251c\u2500\u2500 Dockerfile \u251c\u2500\u2500 hooks \u2502 \u2514\u2500\u2500 build \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile \u251c\u2500\u2500 README.md \u2514\u2500\u2500 rootfs \u251c\u2500\u2500 etc \u2502 \u251c\u2500\u2500 apache2 \u2502 \u2502 \u2514\u2500\u2500 conf-available \u2502 \u2502 \u251c\u2500\u2500 other-vhosts-access-log.conf \u2502 \u2502 \u251c\u2500\u2500 remoteip.conf \u2502 \u2502 \u2514\u2500\u2500 servername.conf \u2502 \u251c\u2500\u2500 confd \u2502 \u2502 \u251c\u2500\u2500 conf.d \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-apache2-conf.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-isle-installer.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-settings.php.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-site-conf.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache-sql.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 fits-log4j.properties.toml \u2502 \u2502 \u2502 \u251c\u2500\u2500 php-cli-ini.toml \u2502 \u2502 \u2502 \u2514\u2500\u2500 php-ini.toml \u2502 \u2502 \u2514\u2500\u2500 templates \u2502 \u2502 \u251c\u2500\u2500 apache \u2502 \u2502 \u2502 \u251c\u2500\u2500 apache2.conf.tpl \u2502 \u2502 \u2502 \u2514\u2500\u2500 site_template.conf.tpl \u2502 \u2502 \u251c\u2500\u2500 fits \u2502 \u2502 \u2502 \u2514\u2500\u2500 log4j.properties.tpl \u2502 \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u2502 \u251c\u2500\u2500 cli.php.ini.tpl \u2502 \u2502 \u2502 \u2514\u2500\u2500 php.ini.tpl \u2502 \u2502 \u2514\u2500\u2500 sql \u2502 \u2502 \u2514\u2500\u2500 apache.sql.tpl \u2502 \u251c\u2500\u2500 cont-init.d \u2502 \u2502 \u251c\u2500\u2500 00-islandora-uid \u2502 \u2502 \u2514\u2500\u2500 01-confd-site-enable \u2502 \u251c\u2500\u2500 php \u2502 \u2502 \u251c\u2500\u2500 7.0 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2502 \u251c\u2500\u2500 7.1 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2502 \u251c\u2500\u2500 7.2 \u2502 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2502 \u2514\u2500\u2500 7.3 \u2502 \u2502 \u2514\u2500\u2500 mods-available \u2502 \u2502 \u2514\u2500\u2500 imagick.ini \u2502 \u2514\u2500\u2500 services.d \u2502 \u251c\u2500\u2500 apache \u2502 \u2502 \u2514\u2500\u2500 run \u2502 \u2514\u2500\u2500 cron \u2502 \u2514\u2500\u2500 run \u2514\u2500\u2500 usr \u2514\u2500\u2500 local \u251c\u2500\u2500 adore-djatoka-1.1 \u2502 \u2514\u2500\u2500 bin \u2502 \u251c\u2500\u2500 env.sh \u2502 \u2514\u2500\u2500 log4j.properties \u2514\u2500\u2500 etc \u2514\u2500\u2500 ImageMagick-7 \u251c\u2500\u2500 log.xml \u2514\u2500\u2500 policy.xml 31 directories, 34 files","title":"Directory Structure"},{"location":"specifications/dockerfiles/#dockerfile-composition","text":"Following standard Docker convention , all ISLE Dockerfiles have similar structures. Examples displayed are from the Apache Dockerfile . FROM command indicating which official Docker image is used as the base build. The Apache image uses one base image to build from as it both contains an Ubuntu 20.04 LTS OS and Adopt-JDK 8.x for Java FROM adoptopenjdk:8-jdk-hotspot is the first base image used. LABEL - For ISLE Committers to version control image descriptions, functionality and additional meta-data. ( optional ) RUN - Execute commands e.g. RUN apt-get update , etc. COPY - Within each ISLE image directory there are additional files or subdirectories are copied from the personal computer to the image itself. ENV - sets any environmental variables necessary for software to run or be configured properly. VOLUME - Exposes a volume for data necessary for the build to continue. e.g. VOLUME /var/www/html EXPOSE - Opens up ports (80,443) on the temporary build containers created and to persist in further usage. Can be overridden by any docker-compose.yml file ENTRYPOINT - Allows you to configure a container that will run as an executable. Within the apache Dockerfile , the server is told to \"run\" using the apache2ctl utility by this last line: ENTRYPOINT [\"/usr/sbin/apache2ctl\", \"-D\", \"FOREGROUND\"]","title":"Dockerfile Composition"},{"location":"specifications/dockerfiles/#dockerfile-commenting","text":"For ISLE Contributors when possible it is highly recommended that all sections be commented appropriately to explain functionality or actions to all Developers looking to customize or curious end users. Example: ## Apache, PHP, FFMPEG, and other Islandora Depends. ## Apache && PHP 7.1 from ondrej PPA ## Per @g7morris, ghostscript from repo is OK. RUN add-apt-repository -y ppa:ondrej/apache2 && \\ add-apt-repository -y ppa:ondrej/php && \\ FFMPEG_PACKS=\"ffmpeg \\ ffmpeg2theora \\ libavcodec-extra \\ lame \\","title":"Dockerfile Commenting"},{"location":"specifications/drupal-modules-matrix/","text":"Drupal Modules Matrix Please find below a list of all Drupal & Islandora resources (modules, plugins, libraries etc) used to build the demo site isle.localdomain . Please review these files to catalogue and understand which Drupal and Islandora modules are used, enabled and where the software is pulled from. Because the number of modules is large and can change, ISLE maintainers are not keeping an active printed list but encourage users to pull these files, review modify and extend as they need during development phases. The maintainers of all git repos will have up to date versions posted along with more extensive lists of dependencies, warnings and readmes. The isle_islandora_installer.sh of the ISLE-Drupal-Build-Tools repo uses the following: Drupal Drush makefile * Drupal Core 7.x Islandora Drush makefile","title":"Drupal Modules Matrix"},{"location":"specifications/drupal-modules-matrix/#drupal-modules-matrix","text":"Please find below a list of all Drupal & Islandora resources (modules, plugins, libraries etc) used to build the demo site isle.localdomain . Please review these files to catalogue and understand which Drupal and Islandora modules are used, enabled and where the software is pulled from. Because the number of modules is large and can change, ISLE maintainers are not keeping an active printed list but encourage users to pull these files, review modify and extend as they need during development phases. The maintainers of all git repos will have up to date versions posted along with more extensive lists of dependencies, warnings and readmes. The isle_islandora_installer.sh of the ISLE-Drupal-Build-Tools repo uses the following: Drupal Drush makefile * Drupal Core 7.x Islandora Drush makefile","title":"Drupal Modules Matrix"},{"location":"specifications/resource-matrix/","text":"Resource Allocation This document is a suggested guide for allocating ISLE host resources based on your ISLE environment. Note: These are recommended defaults which sometimes include a range. Your needs may require more resources to be added. It is not recommended to go below the defaults for the Staging and Production environments. For the Production and Staging storage needs, ISLE End users should plan on these numbers increasing over time as their collections grow. It is generally recommended that Staging and Production mirror each other in size. Resource Allocation by ISLE Environment / System Resource Demo Local Test Staging Production OS Mac/Windows/Linux Mac/Windows/Linux Mac/Windows/Linux Ubuntu / CentOS Ubuntu / CentOS RAM 4 GB 4 - 8+ GB 4 GB 16 GB 16 - 32+ GB CPU 1 1 - 2 1 - 2 2 - 4 2 - 4+ Storage - OS 3 - 5+ GB 6 - 10+ GB 3 - 5+ GB 50 - 100+ GB 50 - 100+ GB Storage - Fed data 5 - 10+ GB 5 - 10+ GB 5 - 10+ GB 3 - 6+ TB 3 - 6+ TB For Fed data storage , it is recommended that a minimum overhead of about 100 - 250 GB of free space is kept on the disk so that Fedora's ActiveMQ system doesn't shutdown due to a lack of space. You might be able to get away with less overhead. If using Blazegraph , add an additional mandatory minimum of 4 GB to any system's RAM resource requirements to the overall total. If using Varnish , you may find the system will be more performant if you increase the system memory by an additional 1 -2 GB of memory to the overall total. For Production and Staging ISLE host servers , a minimum of an additional 4 - 8 GB should be used for a swapfile. KEY OS = Operating System RAM = Memory CPU = Processor(s) / Cores Fed data = Fedora datastreamStore (/mnt/data/fedora/datastreamStore) storage Storage - OS includes the Docker volumes that store additional data Memory Allocation and Tuning Concepts The tuning and configuration of ISLE can vary based on system resources and traffic, it is recommended that you start out with the default memory allocations and test the results as you increase or decrease in key areas. Container Ranges Demo Local Test Staging Production isle-fedora MIN 128M 128M 128M 1024M 1024M MAX 768M 768M 768M 4096M 4096M isle-solr MIN 0 0 0 1024M 1024M MAX 512M 512M 512M 2048M 2048M isle-images MIN 0 0 0 512M 512M MAX 512M 512M 512M 1024M 1024M isle-blazegraph MIN 1024M 1024M 1024M 4096M 4096M MAX 4096M 4096M 4096M 6144M 6144M The remainder of free memory is assumed to be taken or used by the remaining ISLE containers e.g. isle-apache or isle-mysql as needed. If you would like to specifically set memory by container which is out of scope of current ISLE setups and documentation, please read more in the Docker-compose documentation under the Resources section or search by the term mem_limit . KEY MAX = JAVA_MAX_MEM ( you'll adjust these settings in the docker-compose.*.yml file ) MIN = JAVA_MIN_MEM ( you'll adjust these settings in the docker-compose.*.yml file ) High Volume Ingest When planning for ingesting objects at a high volume and rate, it would be highly advisable to consider the following prior to starting any large ingest: As the Apache container will be under a high load to create derivatives: Add a minimum of at least 4 GB of memory to your Staging and Production systems. If possible, add an additional 1 -2 CPUs to your Staging and Production systems. Anticipate the size of the incoming objects or collections (data) to be ingested and double-check that you have storage capacity on your Staging and Production systems. This can vary greatly depending on content types and size of objects to be ingested. A good rule of thumb is to conservatively factor in that newly created derivatives and additional datastreams will take up to 1.25 to 1.5 x your storage space. For example if an ISLE end user has 50 GB of tiffs to be ingested, they should plan on having a minimum of 60 - 75 GB of available storage space. This isn't always a hard and fast rule but will avoid situations where space runs out mid-ingest. Varnish Allocation for a Production System Example configuration for a Production ISLE host server using 16 GB of memory. Expect to allocate about 40 - 50% of the host server memory for all of the Java / Tomcat based images isle-fedora should have the most e.g. 4096 MB or 4 GB isle-solr should have the second most e.g. 2048 MB or 2 GB isle-imageservices should have the third most e.g. 1024 MB or 1 GB If using isle-blazegraph , this image should also be using a minimum of 4096 MB or 4 GB of memory Keep about 2 -3 GB free for the remaining images e.g. isle-apache , isle-mysql etc. This would leave you roughly 1 - 2 GB to allocate to the Varnish cache. Start with 256 to 512 MB and work your way up as needed. You can adjust the amount that Varnish puts into memory in the supplied .env file On the line: VARNISH_MALLOC=256m you can change the amount of memory to a higher value other than the default 256 Megabytes. We recommend that you start with 1-2 GB for now to tune further as your resources and needs warrant. There are additional potential memory allocation and tuning recommendations for Varnish from Varnish-software If you need to read more about how to use or change Varnish's cache settings, please start here Recommendation: Adding more memory to the Production ISLE host system from the default recommended 16 GB might be recommended here if running all optional components e.g. isle-varnish , isle-blazegraph , the TICK stack, etc.","title":"Resource Allocation"},{"location":"specifications/resource-matrix/#resource-allocation","text":"This document is a suggested guide for allocating ISLE host resources based on your ISLE environment. Note: These are recommended defaults which sometimes include a range. Your needs may require more resources to be added. It is not recommended to go below the defaults for the Staging and Production environments. For the Production and Staging storage needs, ISLE End users should plan on these numbers increasing over time as their collections grow. It is generally recommended that Staging and Production mirror each other in size.","title":"Resource Allocation"},{"location":"specifications/resource-matrix/#resource-allocation-by-isle-environment-system","text":"Resource Demo Local Test Staging Production OS Mac/Windows/Linux Mac/Windows/Linux Mac/Windows/Linux Ubuntu / CentOS Ubuntu / CentOS RAM 4 GB 4 - 8+ GB 4 GB 16 GB 16 - 32+ GB CPU 1 1 - 2 1 - 2 2 - 4 2 - 4+ Storage - OS 3 - 5+ GB 6 - 10+ GB 3 - 5+ GB 50 - 100+ GB 50 - 100+ GB Storage - Fed data 5 - 10+ GB 5 - 10+ GB 5 - 10+ GB 3 - 6+ TB 3 - 6+ TB For Fed data storage , it is recommended that a minimum overhead of about 100 - 250 GB of free space is kept on the disk so that Fedora's ActiveMQ system doesn't shutdown due to a lack of space. You might be able to get away with less overhead. If using Blazegraph , add an additional mandatory minimum of 4 GB to any system's RAM resource requirements to the overall total. If using Varnish , you may find the system will be more performant if you increase the system memory by an additional 1 -2 GB of memory to the overall total. For Production and Staging ISLE host servers , a minimum of an additional 4 - 8 GB should be used for a swapfile. KEY OS = Operating System RAM = Memory CPU = Processor(s) / Cores Fed data = Fedora datastreamStore (/mnt/data/fedora/datastreamStore) storage Storage - OS includes the Docker volumes that store additional data","title":"Resource Allocation by ISLE Environment / System"},{"location":"specifications/resource-matrix/#memory-allocation-and-tuning-concepts","text":"The tuning and configuration of ISLE can vary based on system resources and traffic, it is recommended that you start out with the default memory allocations and test the results as you increase or decrease in key areas. Container Ranges Demo Local Test Staging Production isle-fedora MIN 128M 128M 128M 1024M 1024M MAX 768M 768M 768M 4096M 4096M isle-solr MIN 0 0 0 1024M 1024M MAX 512M 512M 512M 2048M 2048M isle-images MIN 0 0 0 512M 512M MAX 512M 512M 512M 1024M 1024M isle-blazegraph MIN 1024M 1024M 1024M 4096M 4096M MAX 4096M 4096M 4096M 6144M 6144M The remainder of free memory is assumed to be taken or used by the remaining ISLE containers e.g. isle-apache or isle-mysql as needed. If you would like to specifically set memory by container which is out of scope of current ISLE setups and documentation, please read more in the Docker-compose documentation under the Resources section or search by the term mem_limit . KEY MAX = JAVA_MAX_MEM ( you'll adjust these settings in the docker-compose.*.yml file ) MIN = JAVA_MIN_MEM ( you'll adjust these settings in the docker-compose.*.yml file )","title":"Memory Allocation and Tuning Concepts"},{"location":"specifications/resource-matrix/#high-volume-ingest","text":"When planning for ingesting objects at a high volume and rate, it would be highly advisable to consider the following prior to starting any large ingest: As the Apache container will be under a high load to create derivatives: Add a minimum of at least 4 GB of memory to your Staging and Production systems. If possible, add an additional 1 -2 CPUs to your Staging and Production systems. Anticipate the size of the incoming objects or collections (data) to be ingested and double-check that you have storage capacity on your Staging and Production systems. This can vary greatly depending on content types and size of objects to be ingested. A good rule of thumb is to conservatively factor in that newly created derivatives and additional datastreams will take up to 1.25 to 1.5 x your storage space. For example if an ISLE end user has 50 GB of tiffs to be ingested, they should plan on having a minimum of 60 - 75 GB of available storage space. This isn't always a hard and fast rule but will avoid situations where space runs out mid-ingest.","title":"High Volume Ingest"},{"location":"specifications/resource-matrix/#varnish-allocation-for-a-production-system","text":"Example configuration for a Production ISLE host server using 16 GB of memory. Expect to allocate about 40 - 50% of the host server memory for all of the Java / Tomcat based images isle-fedora should have the most e.g. 4096 MB or 4 GB isle-solr should have the second most e.g. 2048 MB or 2 GB isle-imageservices should have the third most e.g. 1024 MB or 1 GB If using isle-blazegraph , this image should also be using a minimum of 4096 MB or 4 GB of memory Keep about 2 -3 GB free for the remaining images e.g. isle-apache , isle-mysql etc. This would leave you roughly 1 - 2 GB to allocate to the Varnish cache. Start with 256 to 512 MB and work your way up as needed. You can adjust the amount that Varnish puts into memory in the supplied .env file On the line: VARNISH_MALLOC=256m you can change the amount of memory to a higher value other than the default 256 Megabytes. We recommend that you start with 1-2 GB for now to tune further as your resources and needs warrant. There are additional potential memory allocation and tuning recommendations for Varnish from Varnish-software If you need to read more about how to use or change Varnish's cache settings, please start here Recommendation: Adding more memory to the Production ISLE host system from the default recommended 16 GB might be recommended here if running all optional components e.g. isle-varnish , isle-blazegraph , the TICK stack, etc.","title":"Varnish Allocation for a Production System"},{"location":"update/update/","text":"Update ISLE to the Latest Release Update an existing ISLE installation to install the newest improvements and security updates. This process is intended to be backwards compatible with your existing ISLE site. We strongly recommend that you begin the update process on your Local environment so that you may test and troubleshoot before proceeding to update your Staging and Production environments. Important Information These instructions assume you have already installed either the Local ISLE Installation: New Site or the Local ISLE Installation: Migrate Existing Islandora Site on your Local personal computer and are using that described git workflow. Please test these updates on your Local and Staging environments before updating your Production server. Always read the Release Notes for any version(s) newer than that which you are currently running. Docker Desktop Update: If Docker prompts that updates are available for your personal computer, please follow these steps: Go to your Local ISLE site: docker-compose down Install the new updated version(s) of Docker Desktop. Go to your Local ISLE site: docker-compose up -d Update Local (personal computer) On your Local (personal computer), open a terminal (Windows: open Git Bash) and navigate to your Local ISLE repository (this contains the \"docker-compose.local.yml\" file): Example: cd /path/to/your/repository Stop the existing ISLE containers: docker-compose down Check your git remotes: git remote -v If you do not have a remote named \"icg-upstream\" then create one: git remote add icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git Run a git fetch from the ICG upstream: git fetch icg-upstream Checkout a new git branch as a precaution for performing the update on your project. This way your \"main\" branch stays safe and untouched until you have tested thoroughly and are ready to merge in changes from the recent update. You may select any name for your new local branch. Example: git checkout -b isle-update-numberhere Pull down the ICG ISLE \"main\" branch into your Local project's new \"isle-update-numberhere\" branch: git pull icg-upstream main In your ISLE directory, you may view the newest release of ISLE code by entering: ls -lha Now that you have pulled down the latest code, there are likely to be conflicts between your existing code and the newer code. Run this command to determine if there are git merge conflicts: git status If there are any merge conflicts, then use a text editor (or IDE) to resolve them. (The Atom text editor offers green and red buttons to facilitate this process.) Some releases will have more merge conflicts than others. Carefully progress through this process of resolving merge conflicts. Changes will usually include but are not limited to: new configuration files new ISLE services optional or otherwise new ISLE docker image tags new comments new documentation After all merge conflicts are resolved, then add and commit your edits to your Local environment: Example: git add <changedfileshere> Example: git commit -m \"ISLE update from version #X to version #Y\" Optional: If you want to backup this new branch to your origin, then run this command: (Ultimately after testing on your Local, you'll merge to main and then deploy the new code to your Staging and Production environments.) Example: git push origin isle-update-numberhere Using the same open terminal, ensure you are in the root of your ISLE project directory: Example: cd /path/to/your/repository Download the new ISLE docker images to the Local (personal computer): docker-compose pull Run the new docker containers (and new code) on your Local environment: docker-compose up -d In your web browser, enter the URL of your Local site: Example: https://yourprojectnamehere.localdomain Quality control (QC) the Local site and ensure the following: The site appears and functions as it did prior to these updates. You can ingest test objects without any issue. You can modify existing object data without any issue. All services are functional and without apparent ERROR warnings in the browser log console output. Example: In Chrome, press the F12 button to open the Console , then select the \"Console\" tab. When you have completed testing and have no further adjustments to make, switch from your \"isle-update-numberhere\" branch of code to your \"main\" branch: git checkout main Merge your \"isle-update-numberhere\" branch of code to \"main\". Example: git merge isle-update-numberhere Push this code to your online git provider ISLE git push -u origin main This will take 2-5 minutes depending on your internet speed. You now have the current ISLE project code checked into git; this will be the foundation for making changes to your Staging and Production servers. Update Staging Server SSH into your Staging ISLE Host Server: Example: ssh islandora@yourstagingserver.institution.edu Example: cd /opt/yourprojecthere Stop the existing ISLE containers: docker-compose down Update the docker files via git: git pull origin main You must now again fix the .env file as you did in the On Remote Staging - Edit the \".env\" File to Change to the Staging Environment step of either the Staging ISLE Installation: New Site or the Staging ISLE Installation: Migrate Existing Islandora Site instructions. As described, this step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env and then commit it locally to git. This local commit will never be pushed back to the git repository and this is critical because it allows future ISLE updates and/or configuration changes. In other words, you are restoring what you had in the .env to the Staging settings in case they are overwritten. Download the new ISLE docker images to the remote Staging environment: docker-compose pull This may take a few minutes depending on your network connection Run the new docker containers (and new code) on your Staging environment: docker-compose up -d The new containers should start up and your Staging Islandora site should be available, without any loss of existing content. QC the Staging site and ensure the following: The site appears and functions as it did prior to these updates. You can ingest test objects without any issue. You can modify existing object data without any issue. All services are functional and without apparent ERROR warnings in the browser log console output. We recommend that you observe the above Staging installation for a few days or a week. Update Production Server When you are confident that your Staging installation is working as expected: Repeat the same above \"Update Staging Server\" process but do so on your Production server environment. Additional Resources Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Update ISLE"},{"location":"update/update/#update-isle-to-the-latest-release","text":"Update an existing ISLE installation to install the newest improvements and security updates. This process is intended to be backwards compatible with your existing ISLE site. We strongly recommend that you begin the update process on your Local environment so that you may test and troubleshoot before proceeding to update your Staging and Production environments.","title":"Update ISLE to the Latest Release"},{"location":"update/update/#important-information","text":"These instructions assume you have already installed either the Local ISLE Installation: New Site or the Local ISLE Installation: Migrate Existing Islandora Site on your Local personal computer and are using that described git workflow. Please test these updates on your Local and Staging environments before updating your Production server. Always read the Release Notes for any version(s) newer than that which you are currently running. Docker Desktop Update: If Docker prompts that updates are available for your personal computer, please follow these steps: Go to your Local ISLE site: docker-compose down Install the new updated version(s) of Docker Desktop. Go to your Local ISLE site: docker-compose up -d","title":"Important Information"},{"location":"update/update/#update-local-personal-computer","text":"On your Local (personal computer), open a terminal (Windows: open Git Bash) and navigate to your Local ISLE repository (this contains the \"docker-compose.local.yml\" file): Example: cd /path/to/your/repository Stop the existing ISLE containers: docker-compose down Check your git remotes: git remote -v If you do not have a remote named \"icg-upstream\" then create one: git remote add icg-upstream https://github.com/Islandora-Collaboration-Group/ISLE.git Run a git fetch from the ICG upstream: git fetch icg-upstream Checkout a new git branch as a precaution for performing the update on your project. This way your \"main\" branch stays safe and untouched until you have tested thoroughly and are ready to merge in changes from the recent update. You may select any name for your new local branch. Example: git checkout -b isle-update-numberhere Pull down the ICG ISLE \"main\" branch into your Local project's new \"isle-update-numberhere\" branch: git pull icg-upstream main In your ISLE directory, you may view the newest release of ISLE code by entering: ls -lha Now that you have pulled down the latest code, there are likely to be conflicts between your existing code and the newer code. Run this command to determine if there are git merge conflicts: git status If there are any merge conflicts, then use a text editor (or IDE) to resolve them. (The Atom text editor offers green and red buttons to facilitate this process.) Some releases will have more merge conflicts than others. Carefully progress through this process of resolving merge conflicts. Changes will usually include but are not limited to: new configuration files new ISLE services optional or otherwise new ISLE docker image tags new comments new documentation After all merge conflicts are resolved, then add and commit your edits to your Local environment: Example: git add <changedfileshere> Example: git commit -m \"ISLE update from version #X to version #Y\" Optional: If you want to backup this new branch to your origin, then run this command: (Ultimately after testing on your Local, you'll merge to main and then deploy the new code to your Staging and Production environments.) Example: git push origin isle-update-numberhere Using the same open terminal, ensure you are in the root of your ISLE project directory: Example: cd /path/to/your/repository Download the new ISLE docker images to the Local (personal computer): docker-compose pull Run the new docker containers (and new code) on your Local environment: docker-compose up -d In your web browser, enter the URL of your Local site: Example: https://yourprojectnamehere.localdomain Quality control (QC) the Local site and ensure the following: The site appears and functions as it did prior to these updates. You can ingest test objects without any issue. You can modify existing object data without any issue. All services are functional and without apparent ERROR warnings in the browser log console output. Example: In Chrome, press the F12 button to open the Console , then select the \"Console\" tab. When you have completed testing and have no further adjustments to make, switch from your \"isle-update-numberhere\" branch of code to your \"main\" branch: git checkout main Merge your \"isle-update-numberhere\" branch of code to \"main\". Example: git merge isle-update-numberhere Push this code to your online git provider ISLE git push -u origin main This will take 2-5 minutes depending on your internet speed. You now have the current ISLE project code checked into git; this will be the foundation for making changes to your Staging and Production servers.","title":"Update Local (personal computer)"},{"location":"update/update/#update-staging-server","text":"SSH into your Staging ISLE Host Server: Example: ssh islandora@yourstagingserver.institution.edu Example: cd /opt/yourprojecthere Stop the existing ISLE containers: docker-compose down Update the docker files via git: git pull origin main You must now again fix the .env file as you did in the On Remote Staging - Edit the \".env\" File to Change to the Staging Environment step of either the Staging ISLE Installation: New Site or the Staging ISLE Installation: Migrate Existing Islandora Site instructions. As described, this step is a multi-step, involved process that allows an end-user to make appropriate changes to the .env and then commit it locally to git. This local commit will never be pushed back to the git repository and this is critical because it allows future ISLE updates and/or configuration changes. In other words, you are restoring what you had in the .env to the Staging settings in case they are overwritten. Download the new ISLE docker images to the remote Staging environment: docker-compose pull This may take a few minutes depending on your network connection Run the new docker containers (and new code) on your Staging environment: docker-compose up -d The new containers should start up and your Staging Islandora site should be available, without any loss of existing content. QC the Staging site and ensure the following: The site appears and functions as it did prior to these updates. You can ingest test objects without any issue. You can modify existing object data without any issue. All services are functional and without apparent ERROR warnings in the browser log console output. We recommend that you observe the above Staging installation for a few days or a week.","title":"Update Staging Server"},{"location":"update/update/#update-production-server","text":"When you are confident that your Staging installation is working as expected: Repeat the same above \"Update Staging Server\" process but do so on your Production server environment.","title":"Update Production Server"},{"location":"update/update/#additional-resources","text":"Please post questions to the public Islandora ISLE Google group , or subscribe to receive emails.","title":"Additional Resources"}]}