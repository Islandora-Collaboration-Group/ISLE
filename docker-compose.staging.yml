version: '3.7'

#### docker-compose up -d;
## Staging Environment - Used for remote (non-local / cloud) hosting of a Staging site. Code here is almost finished but viewed privately prior to pushing to public Production.
## Updated 2019-11-25 - Release 1.4.0 (@ 1.4.0)

services:
  isle-portainer: ## Renamed to avoid conflicts on systems/servers with portainer already running.
    image: portainer/portainer
    container_name: isle-portainer-${CONTAINER_SHORT_ID}
    command: -H unix:///var/run/docker.sock --no-auth
    networks:
      - isle-internal
    ports:
      - "9010:9000" ## Remapped to avoid conflicts on systems/servers with portainer already running.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - isle-portainer-data:/data
    labels:
      - traefik.port=9000
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal
      ## Enabling access the Portainer interface via traefik is not safe in a production environment unless
      ## you have the ISLE system behind a firewall and, overall, only ports 80 and 443 exposed.
      - traefik.enable=true
      - "traefik.frontend.rule=Host:portainer.${BASE_DOMAIN};"
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"


  mysql:
    image: islandoracollabgroup/isle-mysql:1.4.0
    container_name: isle-mysql-${CONTAINER_SHORT_ID}
    env_file:
      - staging.env
    networks:
      - isle-internal
    ## (Optional): Uncomment to open up the MySQL service on its standard port. Use behind a firewall and do not expose this port publicly.
    ## For the demo or local environments, change the first 3306 to 9306 if an additional MySQL server is being run locally to avoid port conflict.
    #ports:
    #  - "3306:3306"
    volumes:
    ## Customization: Allows for additional tuning of MySQL.
      - ./config/mysql/ISLE.cnf:/etc/mysql/mysql.conf.d/ISLE.cnf
      - isle-db-data:/var/lib/mysql
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"


  fedora:
    image: islandoracollabgroup/isle-fedora:1.4.0
    container_name: isle-fedora-${CONTAINER_SHORT_ID}
    environment:
      - JAVA_MAX_MEM=4096M
      - JAVA_MIN_MEM=1024M
    env_file:
      - staging.env
    networks:
      - isle-internal
    ports:
      - "8081:8080"
    depends_on:
      - mysql
      - solr
    volumes:
      ## Customization: Bind mounting the two Fedora data paths below instead of using default Docker volumes
      ## Next two lines are suggested paths and users can change values to the left of the : to match their Fedora data folders of choice.
      - /mnt/data/fedora/datastreamStore:/usr/local/fedora/data/datastreamStore
      - /opt/data/fedora/objectStore:/usr/local/fedora/data/objectStore
      - isle-fedora-resourceIndex:/usr/local/fedora/data/resourceIndex # (Optional) Migrators can change this to your local RI folder instead of using a Docker volume.
      - isle-fedora-activemq:/usr/local/fedora/data/activemq-data # (Optional) Migrators can change this to your local MQ folder instead of using a Docker volume.
      - isle-fedora-XACML:/usr/local/fedora/data/fedora-xacml-policies
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"


  solr:
    image: islandoracollabgroup/isle-solr:1.4.0
    container_name: isle-solr-${CONTAINER_SHORT_ID}
    environment:
      - JAVA_MAX_MEM=2048M
      - JAVA_MIN_MEM=512M
    env_file:
      - staging.env
    networks:
      - isle-internal
    ports:
      - "8082:8080"
    depends_on:
      - mysql
    volumes:
      - isle-solr-data:/usr/local/solr
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"


  image-services:
    image: islandoracollabgroup/isle-imageservices:1.4.0
    container_name: isle-images-${CONTAINER_SHORT_ID}
    environment:
      - JAVA_MAX_MEM=2048M
      - JAVA_MIN_MEM=512M
    env_file:
      - staging.env
    networks:
      - isle-internal
    depends_on:
      - apache
      - fedora
    ports:
      - "8083:8080"
    labels:
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal
      ## Making image-services accessible via traefik is not safe and not recommended
      - traefik.enable=false
      - "traefik.frontend.rule=Host:images.${BASE_DOMAIN}; PathPrefix: /, /cantaloupe"
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"


  apache:
    image: islandoracollabgroup/isle-apache:1.4.0
    container_name: isle-apache-${CONTAINER_SHORT_ID}
    env_file:
      - .env
      - staging.env
    networks:
      isle-internal:
    depends_on:
      - mysql
      - fedora
      - solr
      - traefik
    volumes:
      # Customization: Bind mounting Drupal Code instead of using default Docker volumes.
      ## The next line is a suggested path and users can change values to the left of the : to match their Apache data folder of choice.
      - /opt/data/apache/html:/var/www/html
      # Customization: Separate settings.php files based on environment.
      # Ensure that the values from the staging.env have been inserted in the corresponding ISLE configuration sections of the settings.staging.php
      - ./config/apache/settings_php/settings.staging.php:/var/www/html/sites/default/settings.php
      ## (Optional): Uncomment line below to allow bind mounting of the php.ini file for editing of php memory, upload and max_post values.
      #- ./config/apache/php_ini/php.staging.ini:/etc/php/7.1/apache2/php.ini
    labels:
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_isle-internal
      - traefik.enable=true
      - "traefik.frontend.rule=Host:${BASE_DOMAIN}; PathPrefix: /, /cantaloupe"
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"


  traefik:
    image: traefik:1.7.9
    container_name: isle-proxy-${CONTAINER_SHORT_ID}
    networks:
      isle-internal:
      isle-external:
    env_file:
      - staging.env
    ports:
      - "80:80"
      - "443:443"
      #- "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      # SSL Choice 1: To use Let's Encrypt for SSL- uncomment ONLY the line below and then create an empty config/proxy/acme.json file
      # - ./config/proxy/acme.json:/acme.json
      # SSL Choice 2: To use commercial SSLs - uncomment ONLY the line below. Add your SSL certs (.cert, .pem, .key) files to config/proxy/ssl-certs
      # - ./config/proxy/ssl-certs:/certs:ro
      # Based on the choice of SSL type made above, you'll need to refer to the /config/proxy/traefik.staging.toml file for further configuration instructions.
      - ./config/proxy/traefik.staging.toml:/etc/traefik/traefik.toml
    labels:
      - traefik.port=8080
      ## Enabling access to the Traefik interface is not safe in a production environment unless you have the
      ## ISLE system behind a firewall and only ports 80 and 443 exposed.
      - traefik.enable=false
      - traefik.frontend.rule=Host:admin.${BASE_DOMAIN};
    ## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system
    #logging:
    #  driver: syslog
    #  options:
    #    tag: "{{.Name}}"

# Start - TICK stack services section
## (Optional): Uncomment lines below to run ISLE with the TICK monitoring system

#  influxdb:
#    image: influxdb:latest
#    container_name: isle-influxdb-${CONTAINER_SHORT_ID}
#    networks:
#      isle-internal:
#    ports:
#      # The API for InfluxDB is served on port 8086
#      - "8086:8086"
#      - "8088:8088"
#      # UDP Port
#      - "8089:8089"
#    volumes:
#      # Mount for influxdb data directory
#      - isle-influxdb-data:/var/lib/influxdb
#      # Mount for influxdb configuration
#      - ./config/tick/influxdb/influxdb.conf:/etc/influxdb/influxdb.conf
#    logging:
#      driver: syslog
#      options:
#        tag: "{{.Name}}"


#  telegraf:
#    image: telegraf:latest
#    # Telegraf requires network access to InfluxDB
#    container_name: isle-telegraf-${CONTAINER_SHORT_ID}
#    networks:
#      isle-internal:
#    depends_on:
#      - influxdb
#    ports:
#      # This port should be for rsyslog
#      - "6514:6514"
#    volumes:
#      # Mount for telegraf configuration
#      - ./config/tick/telegraf/telegraf.staging.conf:/etc/telegraf/telegraf.conf:ro
#      # Mount for Docker API access
#      - /var/run/docker.sock:/var/run/docker.sock:ro
#      # To get metrics off the host
#      - /:/hostfs:ro
#      - /etc:/hostfs/etc:ro
#      - /proc:/hostfs/proc:ro
#      - /sys:/hostfs/sys:ro
#      - /var/run/utmp:/var/run/utmp:ro
#    logging:
#      driver: syslog
#      options:
#        tag: "{{.Name}}"


#  kapacitor:
#    image: kapacitor:latest
#    container_name: isle-kapacitor-${CONTAINER_SHORT_ID}
#    networks:
#      isle-internal:
#    # Kapacitor requires network access to Influxdb
#    ports:
#    # The API for Kapacitor is served on port 9092
#      - "9092:9092"
#    volumes:
#      # Mount for kapacitor data directory
#      - isle-kapacitor-data:/var/lib/kapacitor
#      # Mount for kapacitor configuration
#      - ./config/tick/kapacitor/kapacitor.conf:/etc/kapacitor/kapacitor.conf
#    logging:
#      driver: syslog
#      options:
#        tag: "{{.Name}}"


#  chronograf:
#    image: chronograf:latest
#    container_name: isle-chronograf-${CONTAINER_SHORT_ID}
#    environment:
#      - RESOURCES_PATH="/usr/share/chronograf/resources"
#      - LOG_LEVEL=error
#    networks:
#      isle-internal:
#    ports:
#      # The WebUI for Chronograf is served on port 8888
#      - "8888:8888"
#    depends_on:
#      - kapacitor
#      - influxdb
#      - telegraf
#    volumes:
#      # Mount for chronograf database
#      - isle-chronograf-data:/var/lib/chronograf/
#    logging:
#      driver: syslog
#      options:
#        tag: "{{.Name}}"

# END - TICK stack services section


# Start - Blazegraph service section
## (Optional-component): Uncomment lines below to run ISLE with the Blazegraph triplestore instead of default Mulgara

#  isle-blazegraph:
#    image: islandoracollabgroup/isle-blazegraph:1.4.0
#    container_name: isle-blazegraph-${CONTAINER_SHORT_ID}
#    environment:
#      - JAVA_MAX_MEM=4096M
#      - JAVA_MIN_MEM=1024M
#    env_file:
#      - staging.env
#    networks:
#      - isle-internal
#    ports:
#      - "8084:8080"
#    volumes:
#      - isle-blazegraph-data:/var/bigdata
#    logging:
#      driver: syslog
#      options:
#        tag: "{{.Name}}"

# END - Blazegraph service section


# Defined networks
networks:
  isle-internal:
  isle-external:


volumes:
  isle-db-data:
  isle-solr-data:
  isle-portainer-data:
  isle-fedora-resourceIndex:
  isle-fedora-activemq:
  isle-fedora-XACML:
  #isle-influxdb-data:
  #isle-kapacitor-data:
  #isle-chronograf-data:
  ## (Optional component): Uncomment line below to run ISLE with the Blazegraph triplestore instead of default Mulgara
  #isle-blazegraph-data:


# Customization: Bindmounts used instead of docker volumes
# removed isle-apache-data: Bind-mounting for custom Drupal code
# removed isle-fedora-datastreamStore: Bind-mounting for the Fedora data
# removed isle-fedora-objectStore: Bind-mounting for the Fedora data
# Customization - End
